
Get_Distance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000152  00800060  000031cc  00003260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008001b2  008001b2  000033b2  2**0
                  ALLOC
  3 .stab         00003b1c  00000000  00000000  000033b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002626  00000000  00000000  00006ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000094f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009696  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009888  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000bc93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d019  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e1f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e6a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f014  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__vector_1>
       8:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3c       	cpi	r26, 0xC5	; 197
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 04 18 	call	0x3008	; 0x3008 <main>
      8a:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bd 18 	jmp	0x317a	; 0x317a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d9 18 	jmp	0x31b2	; 0x31b2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 57       	subi	r30, 0x78	; 120
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Interrupt_INTx_Init>:
/* ------------------------------ Helper Functions Declarations ------------------------------ */
static Std_ReturnType Interrupt_INTx_Sense_init(const interrupt_INTx_t* int_obj);

/* ------------------------------ SW Functions Definitions ------------------------------ */
Std_ReturnType Interrupt_INTx_Init(const interrupt_INTx_t* int_obj)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Interrupt_INTx_Init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <Interrupt_INTx_Init+0x8>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9b 83       	std	Y+3, r25	; 0x03
     e3e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	89 83       	std	Y+1, r24	; 0x01
	if(int_obj == NULL)
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	9b 81       	ldd	r25, Y+3	; 0x03
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	11 f4       	brne	.+4      	; 0xe50 <Interrupt_INTx_Init+0x22>
	{
		ret = E_NOT_OK;
     e4c:	19 82       	std	Y+1, r1	; 0x01
     e4e:	74 c0       	rjmp	.+232    	; 0xf38 <Interrupt_INTx_Init+0x10a>
	}
	else
	{
		/* Disable the External Interrupt */
		ret = Interrupt_INTx_Deinit(int_obj->int_source);
     e50:	ea 81       	ldd	r30, Y+2	; 0x02
     e52:	fb 81       	ldd	r31, Y+3	; 0x03
     e54:	82 81       	ldd	r24, Z+2	; 0x02
     e56:	86 95       	lsr	r24
     e58:	86 95       	lsr	r24
     e5a:	83 70       	andi	r24, 0x03	; 3
     e5c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Interrupt_INTx_Deinit>
     e60:	89 83       	std	Y+1, r24	; 0x01
		/* Set External Interrupt Sensing */
		ret = Interrupt_INTx_Sense_init(int_obj);
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	9b 81       	ldd	r25, Y+3	; 0x03
     e66:	0e 94 f7 07 	call	0xfee	; 0xfee <Interrupt_INTx_Sense_init>
     e6a:	89 83       	std	Y+1, r24	; 0x01
		/* Enable the External Interrupt (Set INTx Enable bit)*/
		INTERRUPT_GLOBAL_ENABLE();
     e6c:	af e5       	ldi	r26, 0x5F	; 95
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ef e5       	ldi	r30, 0x5F	; 95
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	80 68       	ori	r24, 0x80	; 128
     e78:	8c 93       	st	X, r24
		switch(int_obj->int_source)
     e7a:	ea 81       	ldd	r30, Y+2	; 0x02
     e7c:	fb 81       	ldd	r31, Y+3	; 0x03
     e7e:	82 81       	ldd	r24, Z+2	; 0x02
     e80:	86 95       	lsr	r24
     e82:	86 95       	lsr	r24
     e84:	83 70       	andi	r24, 0x03	; 3
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	3d 83       	std	Y+5, r19	; 0x05
     e8c:	2c 83       	std	Y+4, r18	; 0x04
     e8e:	8c 81       	ldd	r24, Y+4	; 0x04
     e90:	9d 81       	ldd	r25, Y+5	; 0x05
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	91 05       	cpc	r25, r1
     e96:	09 f1       	breq	.+66     	; 0xeda <Interrupt_INTx_Init+0xac>
     e98:	2c 81       	ldd	r18, Y+4	; 0x04
     e9a:	3d 81       	ldd	r19, Y+5	; 0x05
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	31 05       	cpc	r19, r1
     ea0:	99 f1       	breq	.+102    	; 0xf08 <Interrupt_INTx_Init+0xda>
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	09 f0       	breq	.+2      	; 0xeac <Interrupt_INTx_Init+0x7e>
     eaa:	45 c0       	rjmp	.+138    	; 0xf36 <Interrupt_INTx_Init+0x108>
		{
		case INT0_EXT:	INT0_ENABLE();
     eac:	ab e5       	ldi	r26, 0x5B	; 91
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	eb e5       	ldi	r30, 0x5B	; 91
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	80 64       	ori	r24, 0x40	; 64
     eb8:	8c 93       	st	X, r24
						CLEAR_BIT(DDRD, PD2);	// set INT0 pin as digital input
     eba:	a1 e3       	ldi	r26, 0x31	; 49
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e1 e3       	ldi	r30, 0x31	; 49
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8b 7f       	andi	r24, 0xFB	; 251
     ec6:	8c 93       	st	X, r24
		INT0_InterruptHandler_notify = int_obj->EXT_InterruptHandler;
     ec8:	ea 81       	ldd	r30, Y+2	; 0x02
     eca:	fb 81       	ldd	r31, Y+3	; 0x03
     ecc:	80 81       	ld	r24, Z
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	90 93 b3 01 	sts	0x01B3, r25
     ed4:	80 93 b2 01 	sts	0x01B2, r24
     ed8:	2f c0       	rjmp	.+94     	; 0xf38 <Interrupt_INTx_Init+0x10a>
			break;
		case INT1_EXT:	INT1_ENABLE();
     eda:	ab e5       	ldi	r26, 0x5B	; 91
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	eb e5       	ldi	r30, 0x5B	; 91
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	80 68       	ori	r24, 0x80	; 128
     ee6:	8c 93       	st	X, r24
						CLEAR_BIT(DDRD, PD3);	// set INT1 pin as digital input
     ee8:	a1 e3       	ldi	r26, 0x31	; 49
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e1 e3       	ldi	r30, 0x31	; 49
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	87 7f       	andi	r24, 0xF7	; 247
     ef4:	8c 93       	st	X, r24
		INT1_InterruptHandler_notify = int_obj->EXT_InterruptHandler;
     ef6:	ea 81       	ldd	r30, Y+2	; 0x02
     ef8:	fb 81       	ldd	r31, Y+3	; 0x03
     efa:	80 81       	ld	r24, Z
     efc:	91 81       	ldd	r25, Z+1	; 0x01
     efe:	90 93 b5 01 	sts	0x01B5, r25
     f02:	80 93 b4 01 	sts	0x01B4, r24
     f06:	18 c0       	rjmp	.+48     	; 0xf38 <Interrupt_INTx_Init+0x10a>
			break;
		case INT2_EXT:	INT2_ENABLE();
     f08:	ab e5       	ldi	r26, 0x5B	; 91
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	eb e5       	ldi	r30, 0x5B	; 91
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	80 62       	ori	r24, 0x20	; 32
     f14:	8c 93       	st	X, r24
						CLEAR_BIT(DDRB, PB2);	// set INT2 pin as digital input
     f16:	a7 e3       	ldi	r26, 0x37	; 55
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e7 e3       	ldi	r30, 0x37	; 55
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	8b 7f       	andi	r24, 0xFB	; 251
     f22:	8c 93       	st	X, r24
		INT2_InterruptHandler_notify = int_obj->EXT_InterruptHandler;
     f24:	ea 81       	ldd	r30, Y+2	; 0x02
     f26:	fb 81       	ldd	r31, Y+3	; 0x03
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	90 93 b7 01 	sts	0x01B7, r25
     f30:	80 93 b6 01 	sts	0x01B6, r24
     f34:	01 c0       	rjmp	.+2      	; 0xf38 <Interrupt_INTx_Init+0x10a>
			break;
		default:		ret = E_NOT_OK;
     f36:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		/* Enabling the Global Interrupt Bit (I-bit in the SREG "status register") */
	}
	return ret;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <Interrupt_INTx_Deinit>:
Std_ReturnType Interrupt_INTx_Deinit(const uint8 a_int_source)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <Interrupt_INTx_Deinit+0x6>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <Interrupt_INTx_Deinit+0x8>
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	89 83       	std	Y+1, r24	; 0x01
		/* Disable the External Interrupt */
		switch(a_int_source)
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	3c 83       	std	Y+4, r19	; 0x04
     f64:	2b 83       	std	Y+3, r18	; 0x03
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	9c 81       	ldd	r25, Y+4	; 0x04
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	91 05       	cpc	r25, r1
     f6e:	c1 f0       	breq	.+48     	; 0xfa0 <Interrupt_INTx_Deinit+0x56>
     f70:	2b 81       	ldd	r18, Y+3	; 0x03
     f72:	3c 81       	ldd	r19, Y+4	; 0x04
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	11 f1       	breq	.+68     	; 0xfbe <Interrupt_INTx_Deinit+0x74>
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	9c 81       	ldd	r25, Y+4	; 0x04
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	69 f5       	brne	.+90     	; 0xfdc <Interrupt_INTx_Deinit+0x92>
		{
		case INT0_EXT:	 INT0_CLEAR_FLAG(); INT0_DISABLE();
     f82:	aa e5       	ldi	r26, 0x5A	; 90
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	ea e5       	ldi	r30, 0x5A	; 90
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8f 7b       	andi	r24, 0xBF	; 191
     f8e:	8c 93       	st	X, r24
     f90:	ab e5       	ldi	r26, 0x5B	; 91
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	eb e5       	ldi	r30, 0x5B	; 91
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	8f 7b       	andi	r24, 0xBF	; 191
     f9c:	8c 93       	st	X, r24
     f9e:	1f c0       	rjmp	.+62     	; 0xfde <Interrupt_INTx_Deinit+0x94>
			break;
		case INT1_EXT:	 INT1_CLEAR_FLAG(); INT1_DISABLE();
     fa0:	aa e5       	ldi	r26, 0x5A	; 90
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	ea e5       	ldi	r30, 0x5A	; 90
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	8f 77       	andi	r24, 0x7F	; 127
     fac:	8c 93       	st	X, r24
     fae:	ab e5       	ldi	r26, 0x5B	; 91
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	eb e5       	ldi	r30, 0x5B	; 91
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	8f 77       	andi	r24, 0x7F	; 127
     fba:	8c 93       	st	X, r24
     fbc:	10 c0       	rjmp	.+32     	; 0xfde <Interrupt_INTx_Deinit+0x94>
			break;
		case INT2_EXT:	 INT2_CLEAR_FLAG(); INT2_DISABLE();
     fbe:	aa e5       	ldi	r26, 0x5A	; 90
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	ea e5       	ldi	r30, 0x5A	; 90
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8f 7d       	andi	r24, 0xDF	; 223
     fca:	8c 93       	st	X, r24
     fcc:	ab e5       	ldi	r26, 0x5B	; 91
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	eb e5       	ldi	r30, 0x5B	; 91
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	8f 7d       	andi	r24, 0xDF	; 223
     fd8:	8c 93       	st	X, r24
     fda:	01 c0       	rjmp	.+2      	; 0xfde <Interrupt_INTx_Deinit+0x94>
			break;
		default:		ret = E_NOT_OK;
     fdc:	19 82       	std	Y+1, r1	; 0x01
			break;
	}
	return ret;
     fde:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <Interrupt_INTx_Sense_init>:

/* ------------------------------ Helper Functions Definitions ------------------------------ */
static Std_ReturnType Interrupt_INTx_Sense_init(const interrupt_INTx_t* int_obj)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	2b 97       	sbiw	r28, 0x0b	; 11
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	9b 83       	std	Y+3, r25	; 0x03
    1004:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	89 83       	std	Y+1, r24	; 0x01
	switch(int_obj->int_source)
    100a:	ea 81       	ldd	r30, Y+2	; 0x02
    100c:	fb 81       	ldd	r31, Y+3	; 0x03
    100e:	82 81       	ldd	r24, Z+2	; 0x02
    1010:	86 95       	lsr	r24
    1012:	86 95       	lsr	r24
    1014:	83 70       	andi	r24, 0x03	; 3
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	3b 87       	std	Y+11, r19	; 0x0b
    101c:	2a 87       	std	Y+10, r18	; 0x0a
    101e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1020:	9b 85       	ldd	r25, Y+11	; 0x0b
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	91 05       	cpc	r25, r1
    1026:	09 f4       	brne	.+2      	; 0x102a <Interrupt_INTx_Sense_init+0x3c>
    1028:	6b c0       	rjmp	.+214    	; 0x1100 <Interrupt_INTx_Sense_init+0x112>
    102a:	2a 85       	ldd	r18, Y+10	; 0x0a
    102c:	3b 85       	ldd	r19, Y+11	; 0x0b
    102e:	22 30       	cpi	r18, 0x02	; 2
    1030:	31 05       	cpc	r19, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <Interrupt_INTx_Sense_init+0x48>
    1034:	c5 c0       	rjmp	.+394    	; 0x11c0 <Interrupt_INTx_Sense_init+0x1d2>
    1036:	8a 85       	ldd	r24, Y+10	; 0x0a
    1038:	9b 85       	ldd	r25, Y+11	; 0x0b
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	09 f0       	breq	.+2      	; 0x1040 <Interrupt_INTx_Sense_init+0x52>
    103e:	e5 c0       	rjmp	.+458    	; 0x120a <Interrupt_INTx_Sense_init+0x21c>
		{
		case INT0_EXT:
			switch(int_obj->int_sense)
    1040:	ea 81       	ldd	r30, Y+2	; 0x02
    1042:	fb 81       	ldd	r31, Y+3	; 0x03
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	83 70       	andi	r24, 0x03	; 3
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	39 87       	std	Y+9, r19	; 0x09
    104e:	28 87       	std	Y+8, r18	; 0x08
    1050:	88 85       	ldd	r24, Y+8	; 0x08
    1052:	99 85       	ldd	r25, Y+9	; 0x09
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	91 05       	cpc	r25, r1
    1058:	21 f1       	breq	.+72     	; 0x10a2 <Interrupt_INTx_Sense_init+0xb4>
    105a:	28 85       	ldd	r18, Y+8	; 0x08
    105c:	39 85       	ldd	r19, Y+9	; 0x09
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	2c f4       	brge	.+10     	; 0x106e <Interrupt_INTx_Sense_init+0x80>
    1064:	88 85       	ldd	r24, Y+8	; 0x08
    1066:	99 85       	ldd	r25, Y+9	; 0x09
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	61 f0       	breq	.+24     	; 0x1084 <Interrupt_INTx_Sense_init+0x96>
    106c:	47 c0       	rjmp	.+142    	; 0x10fc <Interrupt_INTx_Sense_init+0x10e>
    106e:	28 85       	ldd	r18, Y+8	; 0x08
    1070:	39 85       	ldd	r19, Y+9	; 0x09
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	21 f1       	breq	.+72     	; 0x10c0 <Interrupt_INTx_Sense_init+0xd2>
    1078:	88 85       	ldd	r24, Y+8	; 0x08
    107a:	99 85       	ldd	r25, Y+9	; 0x09
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	91 05       	cpc	r25, r1
    1080:	71 f1       	breq	.+92     	; 0x10de <Interrupt_INTx_Sense_init+0xf0>
    1082:	3c c0       	rjmp	.+120    	; 0x10fc <Interrupt_INTx_Sense_init+0x10e>
			{
			case INTx_SENSE_LOW_LEVEL:			CLEAR_BIT(MCUCR, ISC00);
    1084:	a5 e5       	ldi	r26, 0x55	; 85
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e5 e5       	ldi	r30, 0x55	; 85
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	8e 7f       	andi	r24, 0xFE	; 254
    1090:	8c 93       	st	X, r24
												CLEAR_BIT(MCUCR, ISC01);
    1092:	a5 e5       	ldi	r26, 0x55	; 85
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e5 e5       	ldi	r30, 0x55	; 85
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8d 7f       	andi	r24, 0xFD	; 253
    109e:	8c 93       	st	X, r24
    10a0:	b5 c0       	rjmp	.+362    	; 0x120c <Interrupt_INTx_Sense_init+0x21e>
				break;
			case INTx_SENSE_ANY_LOGICAL_CHANGE: SET_BIT(MCUCR, ISC00);
    10a2:	a5 e5       	ldi	r26, 0x55	; 85
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e5 e5       	ldi	r30, 0x55	; 85
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	81 60       	ori	r24, 0x01	; 1
    10ae:	8c 93       	st	X, r24
												CLEAR_BIT(MCUCR, ISC01);
    10b0:	a5 e5       	ldi	r26, 0x55	; 85
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e5 e5       	ldi	r30, 0x55	; 85
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	8d 7f       	andi	r24, 0xFD	; 253
    10bc:	8c 93       	st	X, r24
    10be:	a6 c0       	rjmp	.+332    	; 0x120c <Interrupt_INTx_Sense_init+0x21e>
				break;
			case INTx_SENSE_FALLING_EDGE: 		CLEAR_BIT(MCUCR, ISC00);
    10c0:	a5 e5       	ldi	r26, 0x55	; 85
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e5 e5       	ldi	r30, 0x55	; 85
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8e 7f       	andi	r24, 0xFE	; 254
    10cc:	8c 93       	st	X, r24
												SET_BIT(MCUCR, ISC01);
    10ce:	a5 e5       	ldi	r26, 0x55	; 85
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e5 e5       	ldi	r30, 0x55	; 85
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	82 60       	ori	r24, 0x02	; 2
    10da:	8c 93       	st	X, r24
    10dc:	97 c0       	rjmp	.+302    	; 0x120c <Interrupt_INTx_Sense_init+0x21e>
				break;
			case INTx_SENSE_RISING_EDGE:		SET_BIT(MCUCR, ISC00);
    10de:	a5 e5       	ldi	r26, 0x55	; 85
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e5 e5       	ldi	r30, 0x55	; 85
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	81 60       	ori	r24, 0x01	; 1
    10ea:	8c 93       	st	X, r24
												SET_BIT(MCUCR, ISC01);
    10ec:	a5 e5       	ldi	r26, 0x55	; 85
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e5 e5       	ldi	r30, 0x55	; 85
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	82 60       	ori	r24, 0x02	; 2
    10f8:	8c 93       	st	X, r24
    10fa:	88 c0       	rjmp	.+272    	; 0x120c <Interrupt_INTx_Sense_init+0x21e>
				break;
			default: ret = E_NOT_OK;
    10fc:	19 82       	std	Y+1, r1	; 0x01
    10fe:	86 c0       	rjmp	.+268    	; 0x120c <Interrupt_INTx_Sense_init+0x21e>
				break;
			}
			break;
		case INT1_EXT:
			switch(int_obj->int_sense)
    1100:	ea 81       	ldd	r30, Y+2	; 0x02
    1102:	fb 81       	ldd	r31, Y+3	; 0x03
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	83 70       	andi	r24, 0x03	; 3
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	3f 83       	std	Y+7, r19	; 0x07
    110e:	2e 83       	std	Y+6, r18	; 0x06
    1110:	8e 81       	ldd	r24, Y+6	; 0x06
    1112:	9f 81       	ldd	r25, Y+7	; 0x07
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	91 05       	cpc	r25, r1
    1118:	21 f1       	breq	.+72     	; 0x1162 <Interrupt_INTx_Sense_init+0x174>
    111a:	2e 81       	ldd	r18, Y+6	; 0x06
    111c:	3f 81       	ldd	r19, Y+7	; 0x07
    111e:	22 30       	cpi	r18, 0x02	; 2
    1120:	31 05       	cpc	r19, r1
    1122:	2c f4       	brge	.+10     	; 0x112e <Interrupt_INTx_Sense_init+0x140>
    1124:	8e 81       	ldd	r24, Y+6	; 0x06
    1126:	9f 81       	ldd	r25, Y+7	; 0x07
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	61 f0       	breq	.+24     	; 0x1144 <Interrupt_INTx_Sense_init+0x156>
    112c:	47 c0       	rjmp	.+142    	; 0x11bc <Interrupt_INTx_Sense_init+0x1ce>
    112e:	2e 81       	ldd	r18, Y+6	; 0x06
    1130:	3f 81       	ldd	r19, Y+7	; 0x07
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	31 05       	cpc	r19, r1
    1136:	21 f1       	breq	.+72     	; 0x1180 <Interrupt_INTx_Sense_init+0x192>
    1138:	8e 81       	ldd	r24, Y+6	; 0x06
    113a:	9f 81       	ldd	r25, Y+7	; 0x07
    113c:	83 30       	cpi	r24, 0x03	; 3
    113e:	91 05       	cpc	r25, r1
    1140:	71 f1       	breq	.+92     	; 0x119e <Interrupt_INTx_Sense_init+0x1b0>
    1142:	3c c0       	rjmp	.+120    	; 0x11bc <Interrupt_INTx_Sense_init+0x1ce>
			{
			case INTx_SENSE_LOW_LEVEL:			CLEAR_BIT(MCUCR, ISC10);
    1144:	a5 e5       	ldi	r26, 0x55	; 85
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e5 e5       	ldi	r30, 0x55	; 85
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	8b 7f       	andi	r24, 0xFB	; 251
    1150:	8c 93       	st	X, r24
												CLEAR_BIT(MCUCR, ISC11);
    1152:	a5 e5       	ldi	r26, 0x55	; 85
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e5 e5       	ldi	r30, 0x55	; 85
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	87 7f       	andi	r24, 0xF7	; 247
    115e:	8c 93       	st	X, r24
    1160:	55 c0       	rjmp	.+170    	; 0x120c <Interrupt_INTx_Sense_init+0x21e>
				break;
			case INTx_SENSE_ANY_LOGICAL_CHANGE: SET_BIT(MCUCR, ISC10);
    1162:	a5 e5       	ldi	r26, 0x55	; 85
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e5 e5       	ldi	r30, 0x55	; 85
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	84 60       	ori	r24, 0x04	; 4
    116e:	8c 93       	st	X, r24
												CLEAR_BIT(MCUCR, ISC11);
    1170:	a5 e5       	ldi	r26, 0x55	; 85
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e5 e5       	ldi	r30, 0x55	; 85
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	87 7f       	andi	r24, 0xF7	; 247
    117c:	8c 93       	st	X, r24
    117e:	46 c0       	rjmp	.+140    	; 0x120c <Interrupt_INTx_Sense_init+0x21e>
				break;
			case INTx_SENSE_FALLING_EDGE: 		CLEAR_BIT(MCUCR, ISC10);
    1180:	a5 e5       	ldi	r26, 0x55	; 85
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e5 e5       	ldi	r30, 0x55	; 85
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8b 7f       	andi	r24, 0xFB	; 251
    118c:	8c 93       	st	X, r24
												SET_BIT(MCUCR, ISC11);
    118e:	a5 e5       	ldi	r26, 0x55	; 85
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e5 e5       	ldi	r30, 0x55	; 85
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	88 60       	ori	r24, 0x08	; 8
    119a:	8c 93       	st	X, r24
    119c:	37 c0       	rjmp	.+110    	; 0x120c <Interrupt_INTx_Sense_init+0x21e>
				break;
			case INTx_SENSE_RISING_EDGE:		SET_BIT(MCUCR, ISC10);
    119e:	a5 e5       	ldi	r26, 0x55	; 85
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e5 e5       	ldi	r30, 0x55	; 85
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	84 60       	ori	r24, 0x04	; 4
    11aa:	8c 93       	st	X, r24
												SET_BIT(MCUCR, ISC11);
    11ac:	a5 e5       	ldi	r26, 0x55	; 85
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e5 e5       	ldi	r30, 0x55	; 85
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	88 60       	ori	r24, 0x08	; 8
    11b8:	8c 93       	st	X, r24
    11ba:	28 c0       	rjmp	.+80     	; 0x120c <Interrupt_INTx_Sense_init+0x21e>
				break;
			default: ret = E_NOT_OK;
    11bc:	19 82       	std	Y+1, r1	; 0x01
    11be:	26 c0       	rjmp	.+76     	; 0x120c <Interrupt_INTx_Sense_init+0x21e>
				break;
			}
			break;
		case INT2_EXT:
			switch(int_obj->int_sense)
    11c0:	ea 81       	ldd	r30, Y+2	; 0x02
    11c2:	fb 81       	ldd	r31, Y+3	; 0x03
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	83 70       	andi	r24, 0x03	; 3
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3d 83       	std	Y+5, r19	; 0x05
    11ce:	2c 83       	std	Y+4, r18	; 0x04
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	9d 81       	ldd	r25, Y+5	; 0x05
    11d4:	82 30       	cpi	r24, 0x02	; 2
    11d6:	91 05       	cpc	r25, r1
    11d8:	31 f0       	breq	.+12     	; 0x11e6 <Interrupt_INTx_Sense_init+0x1f8>
    11da:	2c 81       	ldd	r18, Y+4	; 0x04
    11dc:	3d 81       	ldd	r19, Y+5	; 0x05
    11de:	23 30       	cpi	r18, 0x03	; 3
    11e0:	31 05       	cpc	r19, r1
    11e2:	49 f0       	breq	.+18     	; 0x11f6 <Interrupt_INTx_Sense_init+0x208>
    11e4:	10 c0       	rjmp	.+32     	; 0x1206 <Interrupt_INTx_Sense_init+0x218>
			{
			case INTx_SENSE_FALLING_EDGE: 		CLEAR_BIT(MCUCSR, ISC2);
    11e6:	a4 e5       	ldi	r26, 0x54	; 84
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e4 e5       	ldi	r30, 0x54	; 84
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 7b       	andi	r24, 0xBF	; 191
    11f2:	8c 93       	st	X, r24
    11f4:	0b c0       	rjmp	.+22     	; 0x120c <Interrupt_INTx_Sense_init+0x21e>
				break;
			case INTx_SENSE_RISING_EDGE:		SET_BIT(MCUCSR, ISC2);
    11f6:	a4 e5       	ldi	r26, 0x54	; 84
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e4 e5       	ldi	r30, 0x54	; 84
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	80 64       	ori	r24, 0x40	; 64
    1202:	8c 93       	st	X, r24
    1204:	03 c0       	rjmp	.+6      	; 0x120c <Interrupt_INTx_Sense_init+0x21e>
				break;
			default: ret = E_NOT_OK;
    1206:	19 82       	std	Y+1, r1	; 0x01
    1208:	01 c0       	rjmp	.+2      	; 0x120c <Interrupt_INTx_Sense_init+0x21e>
				break;
			}
			break;
		default:		ret = E_NOT_OK;
    120a:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	return ret;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
}
    120e:	2b 96       	adiw	r28, 0x0b	; 11
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <__vector_1>:


/* ---------------------- Implementing ISR code for INT0, INT1 and INT2*/
ISR(INT0_vect)
{
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	2f 93       	push	r18
    122c:	3f 93       	push	r19
    122e:	4f 93       	push	r20
    1230:	5f 93       	push	r21
    1232:	6f 93       	push	r22
    1234:	7f 93       	push	r23
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	af 93       	push	r26
    123c:	bf 93       	push	r27
    123e:	ef 93       	push	r30
    1240:	ff 93       	push	r31
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	// clear the int0 flag
	INT0_CLEAR_FLAG();
    124a:	aa e5       	ldi	r26, 0x5A	; 90
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	ea e5       	ldi	r30, 0x5A	; 90
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	8f 7b       	andi	r24, 0xBF	; 191
    1256:	8c 93       	st	X, r24

	// use the callback function
	if(INT0_InterruptHandler_notify)
    1258:	80 91 b2 01 	lds	r24, 0x01B2
    125c:	90 91 b3 01 	lds	r25, 0x01B3
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	29 f0       	breq	.+10     	; 0x126e <__vector_1+0x4e>
	{
		INT0_InterruptHandler_notify();
    1264:	e0 91 b2 01 	lds	r30, 0x01B2
    1268:	f0 91 b3 01 	lds	r31, 0x01B3
    126c:	09 95       	icall
	}
}
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	ff 91       	pop	r31
    1274:	ef 91       	pop	r30
    1276:	bf 91       	pop	r27
    1278:	af 91       	pop	r26
    127a:	9f 91       	pop	r25
    127c:	8f 91       	pop	r24
    127e:	7f 91       	pop	r23
    1280:	6f 91       	pop	r22
    1282:	5f 91       	pop	r21
    1284:	4f 91       	pop	r20
    1286:	3f 91       	pop	r19
    1288:	2f 91       	pop	r18
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f 90       	pop	r0
    1290:	1f 90       	pop	r1
    1292:	18 95       	reti

00001294 <__vector_2>:

ISR(INT1_vect)
{
    1294:	1f 92       	push	r1
    1296:	0f 92       	push	r0
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	0f 92       	push	r0
    129c:	11 24       	eor	r1, r1
    129e:	2f 93       	push	r18
    12a0:	3f 93       	push	r19
    12a2:	4f 93       	push	r20
    12a4:	5f 93       	push	r21
    12a6:	6f 93       	push	r22
    12a8:	7f 93       	push	r23
    12aa:	8f 93       	push	r24
    12ac:	9f 93       	push	r25
    12ae:	af 93       	push	r26
    12b0:	bf 93       	push	r27
    12b2:	ef 93       	push	r30
    12b4:	ff 93       	push	r31
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	// clear the int0 flag
	INT1_CLEAR_FLAG();
    12be:	aa e5       	ldi	r26, 0x5A	; 90
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	ea e5       	ldi	r30, 0x5A	; 90
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	8f 77       	andi	r24, 0x7F	; 127
    12ca:	8c 93       	st	X, r24

	// use the callback function
	if(INT1_InterruptHandler_notify)
    12cc:	80 91 b4 01 	lds	r24, 0x01B4
    12d0:	90 91 b5 01 	lds	r25, 0x01B5
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	29 f0       	breq	.+10     	; 0x12e2 <__vector_2+0x4e>
	{
		INT1_InterruptHandler_notify();
    12d8:	e0 91 b4 01 	lds	r30, 0x01B4
    12dc:	f0 91 b5 01 	lds	r31, 0x01B5
    12e0:	09 95       	icall
	}
}
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	ff 91       	pop	r31
    12e8:	ef 91       	pop	r30
    12ea:	bf 91       	pop	r27
    12ec:	af 91       	pop	r26
    12ee:	9f 91       	pop	r25
    12f0:	8f 91       	pop	r24
    12f2:	7f 91       	pop	r23
    12f4:	6f 91       	pop	r22
    12f6:	5f 91       	pop	r21
    12f8:	4f 91       	pop	r20
    12fa:	3f 91       	pop	r19
    12fc:	2f 91       	pop	r18
    12fe:	0f 90       	pop	r0
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	0f 90       	pop	r0
    1304:	1f 90       	pop	r1
    1306:	18 95       	reti

00001308 <__vector_18>:

ISR(INT2_vect)
{
    1308:	1f 92       	push	r1
    130a:	0f 92       	push	r0
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	0f 92       	push	r0
    1310:	11 24       	eor	r1, r1
    1312:	2f 93       	push	r18
    1314:	3f 93       	push	r19
    1316:	4f 93       	push	r20
    1318:	5f 93       	push	r21
    131a:	6f 93       	push	r22
    131c:	7f 93       	push	r23
    131e:	8f 93       	push	r24
    1320:	9f 93       	push	r25
    1322:	af 93       	push	r26
    1324:	bf 93       	push	r27
    1326:	ef 93       	push	r30
    1328:	ff 93       	push	r31
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
	// clear the int0 flag
	INT2_CLEAR_FLAG();
    1332:	aa e5       	ldi	r26, 0x5A	; 90
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ea e5       	ldi	r30, 0x5A	; 90
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	8f 7d       	andi	r24, 0xDF	; 223
    133e:	8c 93       	st	X, r24

	// use the callback function
	if(INT2_InterruptHandler_notify)
    1340:	80 91 b6 01 	lds	r24, 0x01B6
    1344:	90 91 b7 01 	lds	r25, 0x01B7
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	29 f0       	breq	.+10     	; 0x1356 <__vector_18+0x4e>
	{
		INT2_InterruptHandler_notify();
    134c:	e0 91 b6 01 	lds	r30, 0x01B6
    1350:	f0 91 b7 01 	lds	r31, 0x01B7
    1354:	09 95       	icall
	}
}
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	ff 91       	pop	r31
    135c:	ef 91       	pop	r30
    135e:	bf 91       	pop	r27
    1360:	af 91       	pop	r26
    1362:	9f 91       	pop	r25
    1364:	8f 91       	pop	r24
    1366:	7f 91       	pop	r23
    1368:	6f 91       	pop	r22
    136a:	5f 91       	pop	r21
    136c:	4f 91       	pop	r20
    136e:	3f 91       	pop	r19
    1370:	2f 91       	pop	r18
    1372:	0f 90       	pop	r0
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	0f 90       	pop	r0
    1378:	1f 90       	pop	r1
    137a:	18 95       	reti

0000137c <ICU_init>:

static void(*icu_interruptCallBack_ptr)(void);
static inline void set_timer1_clock(uint8 timer1Clock);
/* ----------------------------- SW Functions Definitions ------------------------------ */
Std_ReturnType ICU_init(const icu_ConfigType* a_icuObj_ptr)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <ICU_init+0x6>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <ICU_init+0x8>
    1384:	0f 92       	push	r0
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	9b 83       	std	Y+3, r25	; 0x03
    138c:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == a_icuObj_ptr)
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	9b 81       	ldd	r25, Y+3	; 0x03
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	11 f4       	brne	.+4      	; 0x139e <ICU_init+0x22>
	{
		ret = E_NOT_OK;
    139a:	19 82       	std	Y+1, r1	; 0x01
    139c:	57 c0       	rjmp	.+174    	; 0x144c <ICU_init+0xd0>
	}
	else
	{
		/* Disable timer1 module */
		TCCR1B = NO_CLOCK;
    139e:	ee e4       	ldi	r30, 0x4E	; 78
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	10 82       	st	Z, r1
		/* set edge detection */
		ICU_setEdgeDetectionType(a_icuObj_ptr->icu_edgeSelect);
    13a4:	ea 81       	ldd	r30, Y+2	; 0x02
    13a6:	fb 81       	ldd	r31, Y+3	; 0x03
    13a8:	83 81       	ldd	r24, Z+3	; 0x03
    13aa:	0e 94 4c 0a 	call	0x1498	; 0x1498 <ICU_setEdgeDetectionType>
		/* configure noise cancellation */
		switch(a_icuObj_ptr->icu_edgeSelect)
    13ae:	ea 81       	ldd	r30, Y+2	; 0x02
    13b0:	fb 81       	ldd	r31, Y+3	; 0x03
    13b2:	83 81       	ldd	r24, Z+3	; 0x03
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	3d 83       	std	Y+5, r19	; 0x05
    13ba:	2c 83       	std	Y+4, r18	; 0x04
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	9d 81       	ldd	r25, Y+5	; 0x05
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	31 f0       	breq	.+12     	; 0x13d0 <ICU_init+0x54>
    13c4:	2c 81       	ldd	r18, Y+4	; 0x04
    13c6:	3d 81       	ldd	r19, Y+5	; 0x05
    13c8:	21 30       	cpi	r18, 0x01	; 1
    13ca:	31 05       	cpc	r19, r1
    13cc:	49 f0       	breq	.+18     	; 0x13e0 <ICU_init+0x64>
    13ce:	10 c0       	rjmp	.+32     	; 0x13f0 <ICU_init+0x74>
		{
		case ICU_NOISE_CANCEL_DISABLE:	CLEAR_BIT(TCCR1B, ICNC1);
    13d0:	ae e4       	ldi	r26, 0x4E	; 78
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ee e4       	ldi	r30, 0x4E	; 78
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	8f 77       	andi	r24, 0x7F	; 127
    13dc:	8c 93       	st	X, r24
    13de:	0f c0       	rjmp	.+30     	; 0x13fe <ICU_init+0x82>
			break;
		case ICU_NOISE_CANCEL_ENABLE:	SET_BIT(TCCR1B, ICNC1);
    13e0:	ae e4       	ldi	r26, 0x4E	; 78
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	ee e4       	ldi	r30, 0x4E	; 78
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	80 68       	ori	r24, 0x80	; 128
    13ec:	8c 93       	st	X, r24
    13ee:	07 c0       	rjmp	.+14     	; 0x13fe <ICU_init+0x82>
			break;
		default: CLEAR_BIT(TCCR1B, ICES1);
    13f0:	ae e4       	ldi	r26, 0x4E	; 78
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ee e4       	ldi	r30, 0x4E	; 78
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	8f 7b       	andi	r24, 0xBF	; 191
    13fc:	8c 93       	st	X, r24
		break;
		}
		/* configure interrupt */
#if TIMER1_IC1_INTERRRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
		INTERRUPT_GLOBAL_ENABLE();
    13fe:	af e5       	ldi	r26, 0x5F	; 95
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	ef e5       	ldi	r30, 0x5F	; 95
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	80 68       	ori	r24, 0x80	; 128
    140a:	8c 93       	st	X, r24
		TIMER1_CLEAR_IC1_INTERRUPT_FLAG();
    140c:	a8 e5       	ldi	r26, 0x58	; 88
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e8 e5       	ldi	r30, 0x58	; 88
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	80 62       	ori	r24, 0x20	; 32
    1418:	8c 93       	st	X, r24
		TIMER1_IC1_INTERRUPT_ENABLE();
    141a:	a9 e5       	ldi	r26, 0x59	; 89
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e9 e5       	ldi	r30, 0x59	; 89
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	80 62       	ori	r24, 0x20	; 32
    1426:	8c 93       	st	X, r24
		ret = ICU_setCallBack(a_icuObj_ptr->icu_interruptHandlerNotify);
    1428:	ea 81       	ldd	r30, Y+2	; 0x02
    142a:	fb 81       	ldd	r31, Y+3	; 0x03
    142c:	80 81       	ld	r24, Z
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	0e 94 2f 0a 	call	0x145e	; 0x145e <ICU_setCallBack>
    1434:	89 83       	std	Y+1, r24	; 0x01
#endif
		/* set TCNT1 initial value */
		TCNT1H = 0;
    1436:	ed e4       	ldi	r30, 0x4D	; 77
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	10 82       	st	Z, r1
		TCNT1L = 0;
    143c:	ec e4       	ldi	r30, 0x4C	; 76
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	10 82       	st	Z, r1
		/* set timer1 clock */
		set_timer1_clock(a_icuObj_ptr->timer1Clock);
    1442:	ea 81       	ldd	r30, Y+2	; 0x02
    1444:	fb 81       	ldd	r31, Y+3	; 0x03
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	0e 94 06 0b 	call	0x160c	; 0x160c <set_timer1_clock>
	}
	return ret;
    144c:	89 81       	ldd	r24, Y+1	; 0x01
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
Std_ReturnType ICU_setCallBack(void(*a_ptr)(void))
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <ICU_setCallBack+0x6>
    1464:	0f 92       	push	r0
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	9b 83       	std	Y+3, r25	; 0x03
    146c:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == a_ptr)
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	9b 81       	ldd	r25, Y+3	; 0x03
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	11 f4       	brne	.+4      	; 0x147e <ICU_setCallBack+0x20>
	{
		ret = E_NOT_OK;
    147a:	19 82       	std	Y+1, r1	; 0x01
    147c:	06 c0       	rjmp	.+12     	; 0x148a <ICU_setCallBack+0x2c>
	}
	else
	{
		icu_interruptCallBack_ptr = a_ptr;
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	9b 81       	ldd	r25, Y+3	; 0x03
    1482:	90 93 b9 01 	sts	0x01B9, r25
    1486:	80 93 b8 01 	sts	0x01B8, r24
	}
	return ret;
    148a:	89 81       	ldd	r24, Y+1	; 0x01
}
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const e_icu_EdgeType_t a_icuEdgeType)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	00 d0       	rcall	.+0      	; 0x149e <ICU_setEdgeDetectionType+0x6>
    149e:	0f 92       	push	r0
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Be aware that changing trigger source can trigger a capture.
	 * The Input Capture Flag must therefore be cleared after the change
	 */
	switch(a_icuEdgeType)
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3b 83       	std	Y+3, r19	; 0x03
    14ae:	2a 83       	std	Y+2, r18	; 0x02
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	9b 81       	ldd	r25, Y+3	; 0x03
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	31 f0       	breq	.+12     	; 0x14c4 <ICU_setEdgeDetectionType+0x2c>
    14b8:	2a 81       	ldd	r18, Y+2	; 0x02
    14ba:	3b 81       	ldd	r19, Y+3	; 0x03
    14bc:	21 30       	cpi	r18, 0x01	; 1
    14be:	31 05       	cpc	r19, r1
    14c0:	49 f0       	breq	.+18     	; 0x14d4 <ICU_setEdgeDetectionType+0x3c>
    14c2:	0f c0       	rjmp	.+30     	; 0x14e2 <ICU_setEdgeDetectionType+0x4a>
	{
	case ICU_FALLING_EDGE_DETECT:	CLEAR_BIT(TCCR1B, ICES1);
    14c4:	ae e4       	ldi	r26, 0x4E	; 78
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	ee e4       	ldi	r30, 0x4E	; 78
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8f 7b       	andi	r24, 0xBF	; 191
    14d0:	8c 93       	st	X, r24
    14d2:	07 c0       	rjmp	.+14     	; 0x14e2 <ICU_setEdgeDetectionType+0x4a>
		break;
	case ICU_RISING_EDGE_DETECT:	SET_BIT(TCCR1B, ICES1);
    14d4:	ae e4       	ldi	r26, 0x4E	; 78
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ee e4       	ldi	r30, 0x4E	; 78
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	80 64       	ori	r24, 0x40	; 64
    14e0:	8c 93       	st	X, r24
		break;
	}
	TIMER1_CLEAR_IC1_INTERRUPT_FLAG();
    14e2:	a8 e5       	ldi	r26, 0x58	; 88
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e8 e5       	ldi	r30, 0x58	; 88
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	80 62       	ori	r24, 0x20	; 32
    14ee:	8c 93       	st	X, r24
}
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
Std_ReturnType ICU_getInputCaptureValue(uint16* a_icuData)
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <ICU_getInputCaptureValue+0x6>
    1502:	0f 92       	push	r0
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	9b 83       	std	Y+3, r25	; 0x03
    150a:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == a_icuData)
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	9b 81       	ldd	r25, Y+3	; 0x03
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	11 f4       	brne	.+4      	; 0x151c <ICU_getInputCaptureValue+0x20>
	{
		ret = E_NOT_OK;
    1518:	19 82       	std	Y+1, r1	; 0x01
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <ICU_getInputCaptureValue+0x48>
	}
	else
	{	/* Reading the 16-bit value in the Input Capture Register (ICR1) is done by
	 	 * first reading the Low byte (ICR1L) and then the High byte (ICR1H)
	 	 */
		*a_icuData = ICR1L;
    151c:	e6 e4       	ldi	r30, 0x46	; 70
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	ea 81       	ldd	r30, Y+2	; 0x02
    1528:	fb 81       	ldd	r31, Y+3	; 0x03
    152a:	91 83       	std	Z+1, r25	; 0x01
    152c:	80 83       	st	Z, r24
		*a_icuData = (uint16)ICR1H << 8;
    152e:	e7 e4       	ldi	r30, 0x47	; 71
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	98 2f       	mov	r25, r24
    153a:	88 27       	eor	r24, r24
    153c:	ea 81       	ldd	r30, Y+2	; 0x02
    153e:	fb 81       	ldd	r31, Y+3	; 0x03
    1540:	91 83       	std	Z+1, r25	; 0x01
    1542:	80 83       	st	Z, r24
	}
	return ret;
    1544:	89 81       	ldd	r24, Y+1	; 0x01
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    155a:	ec e4       	ldi	r30, 0x4C	; 76
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	11 82       	std	Z+1, r1	; 0x01
    1560:	10 82       	st	Z, r1
}
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <ICU_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_DeInit(void)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1570:	ef e4       	ldi	r30, 0x4F	; 79
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	10 82       	st	Z, r1
	TCCR1B = 0;
    1576:	ee e4       	ldi	r30, 0x4E	; 78
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	10 82       	st	Z, r1
	TCNT1 = 0;
    157c:	ec e4       	ldi	r30, 0x4C	; 76
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	11 82       	std	Z+1, r1	; 0x01
    1582:	10 82       	st	Z, r1

#if TIMER1_IC1_INTERRRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
	TIMER1_IC1_INTERRUPT_DISABLE();
    1584:	a9 e5       	ldi	r26, 0x59	; 89
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e9 e5       	ldi	r30, 0x59	; 89
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	8f 7d       	andi	r24, 0xDF	; 223
    1590:	8c 93       	st	X, r24
#endif
}
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <__vector_5>:

/* ISR code on ADC Completion */
#if TIMER1_IC1_INTERRRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
ISR(TIMER1_CAPT_vect)
{
    1598:	1f 92       	push	r1
    159a:	0f 92       	push	r0
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	0f 92       	push	r0
    15a0:	11 24       	eor	r1, r1
    15a2:	2f 93       	push	r18
    15a4:	3f 93       	push	r19
    15a6:	4f 93       	push	r20
    15a8:	5f 93       	push	r21
    15aa:	6f 93       	push	r22
    15ac:	7f 93       	push	r23
    15ae:	8f 93       	push	r24
    15b0:	9f 93       	push	r25
    15b2:	af 93       	push	r26
    15b4:	bf 93       	push	r27
    15b6:	ef 93       	push	r30
    15b8:	ff 93       	push	r31
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
	if(NULL != icu_interruptCallBack_ptr)
    15c2:	80 91 b8 01 	lds	r24, 0x01B8
    15c6:	90 91 b9 01 	lds	r25, 0x01B9
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	29 f0       	breq	.+10     	; 0x15d8 <__vector_5+0x40>
	{
		icu_interruptCallBack_ptr();
    15ce:	e0 91 b8 01 	lds	r30, 0x01B8
    15d2:	f0 91 b9 01 	lds	r31, 0x01B9
    15d6:	09 95       	icall
	}
	/* clear ICU interrupt flag. */
	TIMER1_CLEAR_IC1_INTERRUPT_FLAG();
    15d8:	a8 e5       	ldi	r26, 0x58	; 88
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e8 e5       	ldi	r30, 0x58	; 88
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	80 62       	ori	r24, 0x20	; 32
    15e4:	8c 93       	st	X, r24
}
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	ff 91       	pop	r31
    15ec:	ef 91       	pop	r30
    15ee:	bf 91       	pop	r27
    15f0:	af 91       	pop	r26
    15f2:	9f 91       	pop	r25
    15f4:	8f 91       	pop	r24
    15f6:	7f 91       	pop	r23
    15f8:	6f 91       	pop	r22
    15fa:	5f 91       	pop	r21
    15fc:	4f 91       	pop	r20
    15fe:	3f 91       	pop	r19
    1600:	2f 91       	pop	r18
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	0f 90       	pop	r0
    1608:	1f 90       	pop	r1
    160a:	18 95       	reti

0000160c <set_timer1_clock>:
#endif

/*------------------------------ Helper Function Definitions ------------------------------*/
static inline void set_timer1_clock(uint8 timer1Clock)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <set_timer1_clock+0x6>
    1612:	0f 92       	push	r0
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	89 83       	std	Y+1, r24	; 0x01
	switch(timer1Clock)
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	3b 83       	std	Y+3, r19	; 0x03
    1622:	2a 83       	std	Y+2, r18	; 0x02
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	9b 81       	ldd	r25, Y+3	; 0x03
    1628:	83 30       	cpi	r24, 0x03	; 3
    162a:	91 05       	cpc	r25, r1
    162c:	09 f4       	brne	.+2      	; 0x1630 <set_timer1_clock+0x24>
    162e:	49 c0       	rjmp	.+146    	; 0x16c2 <set_timer1_clock+0xb6>
    1630:	2a 81       	ldd	r18, Y+2	; 0x02
    1632:	3b 81       	ldd	r19, Y+3	; 0x03
    1634:	24 30       	cpi	r18, 0x04	; 4
    1636:	31 05       	cpc	r19, r1
    1638:	5c f4       	brge	.+22     	; 0x1650 <set_timer1_clock+0x44>
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	9b 81       	ldd	r25, Y+3	; 0x03
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	91 05       	cpc	r25, r1
    1642:	99 f0       	breq	.+38     	; 0x166a <set_timer1_clock+0x5e>
    1644:	2a 81       	ldd	r18, Y+2	; 0x02
    1646:	3b 81       	ldd	r19, Y+3	; 0x03
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	21 f1       	breq	.+72     	; 0x1696 <set_timer1_clock+0x8a>
    164e:	7b c0       	rjmp	.+246    	; 0x1746 <set_timer1_clock+0x13a>
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	9b 81       	ldd	r25, Y+3	; 0x03
    1654:	84 30       	cpi	r24, 0x04	; 4
    1656:	91 05       	cpc	r25, r1
    1658:	09 f4       	brne	.+2      	; 0x165c <set_timer1_clock+0x50>
    165a:	49 c0       	rjmp	.+146    	; 0x16ee <set_timer1_clock+0xe2>
    165c:	2a 81       	ldd	r18, Y+2	; 0x02
    165e:	3b 81       	ldd	r19, Y+3	; 0x03
    1660:	25 30       	cpi	r18, 0x05	; 5
    1662:	31 05       	cpc	r19, r1
    1664:	09 f4       	brne	.+2      	; 0x1668 <set_timer1_clock+0x5c>
    1666:	59 c0       	rjmp	.+178    	; 0x171a <set_timer1_clock+0x10e>
    1668:	6e c0       	rjmp	.+220    	; 0x1746 <set_timer1_clock+0x13a>
	{
	case F_CPU_CLOCK:	SET_BIT(TCCR1B, CS10), CLEAR_BIT(TCCR1B, CS11), CLEAR_BIT(TCCR1B, CS12);
    166a:	ae e4       	ldi	r26, 0x4E	; 78
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ee e4       	ldi	r30, 0x4E	; 78
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	81 60       	ori	r24, 0x01	; 1
    1676:	8c 93       	st	X, r24
    1678:	ae e4       	ldi	r26, 0x4E	; 78
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	ee e4       	ldi	r30, 0x4E	; 78
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	8d 7f       	andi	r24, 0xFD	; 253
    1684:	8c 93       	st	X, r24
    1686:	ae e4       	ldi	r26, 0x4E	; 78
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	ee e4       	ldi	r30, 0x4E	; 78
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	8b 7f       	andi	r24, 0xFB	; 251
    1692:	8c 93       	st	X, r24
    1694:	6d c0       	rjmp	.+218    	; 0x1770 <set_timer1_clock+0x164>
		break;
	case F_CPU_8:	CLEAR_BIT(TCCR1B, CS10), SET_BIT(TCCR1B, CS11), CLEAR_BIT(TCCR1B, CS12);
    1696:	ae e4       	ldi	r26, 0x4E	; 78
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	ee e4       	ldi	r30, 0x4E	; 78
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8e 7f       	andi	r24, 0xFE	; 254
    16a2:	8c 93       	st	X, r24
    16a4:	ae e4       	ldi	r26, 0x4E	; 78
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	ee e4       	ldi	r30, 0x4E	; 78
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	82 60       	ori	r24, 0x02	; 2
    16b0:	8c 93       	st	X, r24
    16b2:	ae e4       	ldi	r26, 0x4E	; 78
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	ee e4       	ldi	r30, 0x4E	; 78
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	8b 7f       	andi	r24, 0xFB	; 251
    16be:	8c 93       	st	X, r24
    16c0:	57 c0       	rjmp	.+174    	; 0x1770 <set_timer1_clock+0x164>
		break;
	case F_CPU_64:	SET_BIT(TCCR1B, CS10), SET_BIT(TCCR1B, CS11), CLEAR_BIT(TCCR1B, CS12);
    16c2:	ae e4       	ldi	r26, 0x4E	; 78
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	ee e4       	ldi	r30, 0x4E	; 78
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	81 60       	ori	r24, 0x01	; 1
    16ce:	8c 93       	st	X, r24
    16d0:	ae e4       	ldi	r26, 0x4E	; 78
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	ee e4       	ldi	r30, 0x4E	; 78
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	82 60       	ori	r24, 0x02	; 2
    16dc:	8c 93       	st	X, r24
    16de:	ae e4       	ldi	r26, 0x4E	; 78
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	ee e4       	ldi	r30, 0x4E	; 78
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8b 7f       	andi	r24, 0xFB	; 251
    16ea:	8c 93       	st	X, r24
    16ec:	41 c0       	rjmp	.+130    	; 0x1770 <set_timer1_clock+0x164>
		break;
	case F_CPU_256:	CLEAR_BIT(TCCR1B, CS10), CLEAR_BIT(TCCR1B, CS11), SET_BIT(TCCR1B, CS12);
    16ee:	ae e4       	ldi	r26, 0x4E	; 78
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	ee e4       	ldi	r30, 0x4E	; 78
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	8e 7f       	andi	r24, 0xFE	; 254
    16fa:	8c 93       	st	X, r24
    16fc:	ae e4       	ldi	r26, 0x4E	; 78
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	ee e4       	ldi	r30, 0x4E	; 78
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	8d 7f       	andi	r24, 0xFD	; 253
    1708:	8c 93       	st	X, r24
    170a:	ae e4       	ldi	r26, 0x4E	; 78
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	ee e4       	ldi	r30, 0x4E	; 78
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	84 60       	ori	r24, 0x04	; 4
    1716:	8c 93       	st	X, r24
    1718:	2b c0       	rjmp	.+86     	; 0x1770 <set_timer1_clock+0x164>
		break;
	case F_CPU_1024:SET_BIT(TCCR1B, CS10), CLEAR_BIT(TCCR1B, CS11), SET_BIT(TCCR1B, CS12);
    171a:	ae e4       	ldi	r26, 0x4E	; 78
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	ee e4       	ldi	r30, 0x4E	; 78
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	81 60       	ori	r24, 0x01	; 1
    1726:	8c 93       	st	X, r24
    1728:	ae e4       	ldi	r26, 0x4E	; 78
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	ee e4       	ldi	r30, 0x4E	; 78
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	8d 7f       	andi	r24, 0xFD	; 253
    1734:	8c 93       	st	X, r24
    1736:	ae e4       	ldi	r26, 0x4E	; 78
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	ee e4       	ldi	r30, 0x4E	; 78
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	84 60       	ori	r24, 0x04	; 4
    1742:	8c 93       	st	X, r24
    1744:	15 c0       	rjmp	.+42     	; 0x1770 <set_timer1_clock+0x164>
		break;
	default:		SET_BIT(TCCR1B, CS10), CLEAR_BIT(TCCR1B, CS11), CLEAR_BIT(TCCR1B, CS12);
    1746:	ae e4       	ldi	r26, 0x4E	; 78
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	ee e4       	ldi	r30, 0x4E	; 78
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	81 60       	ori	r24, 0x01	; 1
    1752:	8c 93       	st	X, r24
    1754:	ae e4       	ldi	r26, 0x4E	; 78
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	ee e4       	ldi	r30, 0x4E	; 78
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	8d 7f       	andi	r24, 0xFD	; 253
    1760:	8c 93       	st	X, r24
    1762:	ae e4       	ldi	r26, 0x4E	; 78
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	ee e4       	ldi	r30, 0x4E	; 78
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	8b 7f       	andi	r24, 0xFB	; 251
    176e:	8c 93       	st	X, r24
	}
}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <GPIO_pin_direction_initialize>:
volatile uint8 *PORT_registers[4] = {&PORTA, &PORTB, &PORTC, &PORTD};
volatile uint8 *PIN_registers[4] = {&PINA, &PINB, &PINC, &PIND};


Std_ReturnType GPIO_pin_direction_initialize(const gpio_config_pin_t* gpio_obj)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	00 d0       	rcall	.+0      	; 0x1782 <GPIO_pin_direction_initialize+0x6>
    1782:	0f 92       	push	r0
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	9b 83       	std	Y+3, r25	; 0x03
    178a:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	9b 81       	ldd	r25, Y+3	; 0x03
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	11 f4       	brne	.+4      	; 0x179c <GPIO_pin_direction_initialize+0x20>
	{
		ret = E_NOT_OK;
    1798:	19 82       	std	Y+1, r1	; 0x01
    179a:	6e c0       	rjmp	.+220    	; 0x1878 <GPIO_pin_direction_initialize+0xfc>
	}
	else
	{
		ret = E_OK;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	89 83       	std	Y+1, r24	; 0x01
		if(gpio_obj->direction == GPIO_DIRECTION_INPUT)
    17a0:	ea 81       	ldd	r30, Y+2	; 0x02
    17a2:	fb 81       	ldd	r31, Y+3	; 0x03
    17a4:	80 81       	ld	r24, Z
    17a6:	80 74       	andi	r24, 0x40	; 64
    17a8:	88 23       	and	r24, r24
    17aa:	89 f5       	brne	.+98     	; 0x180e <GPIO_pin_direction_initialize+0x92>
		{
			CLEAR_BIT(*DDR_registers[gpio_obj->port], gpio_obj->pin);
    17ac:	ea 81       	ldd	r30, Y+2	; 0x02
    17ae:	fb 81       	ldd	r31, Y+3	; 0x03
    17b0:	80 81       	ld	r24, Z
    17b2:	87 70       	andi	r24, 0x07	; 7
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	fc 01       	movw	r30, r24
    17be:	e8 57       	subi	r30, 0x78	; 120
    17c0:	fe 4f       	sbci	r31, 0xFE	; 254
    17c2:	a0 81       	ld	r26, Z
    17c4:	b1 81       	ldd	r27, Z+1	; 0x01
    17c6:	ea 81       	ldd	r30, Y+2	; 0x02
    17c8:	fb 81       	ldd	r31, Y+3	; 0x03
    17ca:	80 81       	ld	r24, Z
    17cc:	87 70       	andi	r24, 0x07	; 7
    17ce:	88 2f       	mov	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	fc 01       	movw	r30, r24
    17d8:	e8 57       	subi	r30, 0x78	; 120
    17da:	fe 4f       	sbci	r31, 0xFE	; 254
    17dc:	01 90       	ld	r0, Z+
    17de:	f0 81       	ld	r31, Z
    17e0:	e0 2d       	mov	r30, r0
    17e2:	40 81       	ld	r20, Z
    17e4:	ea 81       	ldd	r30, Y+2	; 0x02
    17e6:	fb 81       	ldd	r31, Y+3	; 0x03
    17e8:	80 81       	ld	r24, Z
    17ea:	86 95       	lsr	r24
    17ec:	86 95       	lsr	r24
    17ee:	86 95       	lsr	r24
    17f0:	87 70       	andi	r24, 0x07	; 7
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 2e       	mov	r0, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <GPIO_pin_direction_initialize+0x86>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	0a 94       	dec	r0
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <GPIO_pin_direction_initialize+0x82>
    1806:	80 95       	com	r24
    1808:	84 23       	and	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	35 c0       	rjmp	.+106    	; 0x1878 <GPIO_pin_direction_initialize+0xfc>
		}
		else if(gpio_obj->direction == GPIO_DIRECTION_OUTPUT)
    180e:	ea 81       	ldd	r30, Y+2	; 0x02
    1810:	fb 81       	ldd	r31, Y+3	; 0x03
    1812:	80 81       	ld	r24, Z
    1814:	80 74       	andi	r24, 0x40	; 64
    1816:	88 23       	and	r24, r24
    1818:	79 f1       	breq	.+94     	; 0x1878 <GPIO_pin_direction_initialize+0xfc>
		{
			SET_BIT(*DDR_registers[gpio_obj->port], gpio_obj->pin);
    181a:	ea 81       	ldd	r30, Y+2	; 0x02
    181c:	fb 81       	ldd	r31, Y+3	; 0x03
    181e:	80 81       	ld	r24, Z
    1820:	87 70       	andi	r24, 0x07	; 7
    1822:	88 2f       	mov	r24, r24
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	fc 01       	movw	r30, r24
    182c:	e8 57       	subi	r30, 0x78	; 120
    182e:	fe 4f       	sbci	r31, 0xFE	; 254
    1830:	a0 81       	ld	r26, Z
    1832:	b1 81       	ldd	r27, Z+1	; 0x01
    1834:	ea 81       	ldd	r30, Y+2	; 0x02
    1836:	fb 81       	ldd	r31, Y+3	; 0x03
    1838:	80 81       	ld	r24, Z
    183a:	87 70       	andi	r24, 0x07	; 7
    183c:	88 2f       	mov	r24, r24
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	fc 01       	movw	r30, r24
    1846:	e8 57       	subi	r30, 0x78	; 120
    1848:	fe 4f       	sbci	r31, 0xFE	; 254
    184a:	01 90       	ld	r0, Z+
    184c:	f0 81       	ld	r31, Z
    184e:	e0 2d       	mov	r30, r0
    1850:	40 81       	ld	r20, Z
    1852:	ea 81       	ldd	r30, Y+2	; 0x02
    1854:	fb 81       	ldd	r31, Y+3	; 0x03
    1856:	80 81       	ld	r24, Z
    1858:	86 95       	lsr	r24
    185a:	86 95       	lsr	r24
    185c:	86 95       	lsr	r24
    185e:	87 70       	andi	r24, 0x07	; 7
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 2e       	mov	r0, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <GPIO_pin_direction_initialize+0xf4>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	0a 94       	dec	r0
    1872:	e2 f7       	brpl	.-8      	; 0x186c <GPIO_pin_direction_initialize+0xf0>
    1874:	84 2b       	or	r24, r20
    1876:	8c 93       	st	X, r24
		}
	}
	return ret;
    1878:	89 81       	ldd	r24, Y+1	; 0x01
}
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <GPIO_pin_initialize>:
Std_ReturnType GPIO_pin_initialize(const gpio_config_pin_t* gpio_obj)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	00 d0       	rcall	.+0      	; 0x188c <GPIO_pin_initialize+0x6>
    188c:	0f 92       	push	r0
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	9b 83       	std	Y+3, r25	; 0x03
    1894:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	89 83       	std	Y+1, r24	; 0x01
		if (NULL == gpio_obj)
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	9b 81       	ldd	r25, Y+3	; 0x03
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	11 f4       	brne	.+4      	; 0x18a6 <GPIO_pin_initialize+0x20>
		{
			ret = E_NOT_OK;
    18a2:	19 82       	std	Y+1, r1	; 0x01
    18a4:	12 c0       	rjmp	.+36     	; 0x18ca <GPIO_pin_initialize+0x44>
		}
		else
		{
			ret = GPIO_pin_direction_initialize(gpio_obj);
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	9b 81       	ldd	r25, Y+3	; 0x03
    18aa:	0e 94 be 0b 	call	0x177c	; 0x177c <GPIO_pin_direction_initialize>
    18ae:	89 83       	std	Y+1, r24	; 0x01
			ret = GPIO_pin_write_logic(gpio_obj, gpio_obj->logic);
    18b0:	ea 81       	ldd	r30, Y+2	; 0x02
    18b2:	fb 81       	ldd	r31, Y+3	; 0x03
    18b4:	80 81       	ld	r24, Z
    18b6:	88 1f       	adc	r24, r24
    18b8:	88 27       	eor	r24, r24
    18ba:	88 1f       	adc	r24, r24
    18bc:	28 2f       	mov	r18, r24
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	9b 81       	ldd	r25, Y+3	; 0x03
    18c2:	62 2f       	mov	r22, r18
    18c4:	0e 94 ad 0c 	call	0x195a	; 0x195a <GPIO_pin_write_logic>
    18c8:	89 83       	std	Y+1, r24	; 0x01
		}
		return ret;
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <GPIO_pin_read_direction>:
Std_ReturnType GPIO_pin_read_direction(const gpio_config_pin_t* gpio_obj, uint8* Direction_read)
{
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	00 d0       	rcall	.+0      	; 0x18de <GPIO_pin_read_direction+0x6>
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <GPIO_pin_read_direction+0x8>
    18e0:	0f 92       	push	r0
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	9b 83       	std	Y+3, r25	; 0x03
    18e8:	8a 83       	std	Y+2, r24	; 0x02
    18ea:	7d 83       	std	Y+5, r23	; 0x05
    18ec:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	9b 81       	ldd	r25, Y+3	; 0x03
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	11 f4       	brne	.+4      	; 0x18fe <GPIO_pin_read_direction+0x26>
	{
		ret = E_NOT_OK;
    18fa:	19 82       	std	Y+1, r1	; 0x01
    18fc:	25 c0       	rjmp	.+74     	; 0x1948 <GPIO_pin_read_direction+0x70>
	}
	else
	{
		*Direction_read = READ_BIT(*DDR_registers[gpio_obj->port], gpio_obj->pin);
    18fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1900:	fb 81       	ldd	r31, Y+3	; 0x03
    1902:	80 81       	ld	r24, Z
    1904:	87 70       	andi	r24, 0x07	; 7
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	fc 01       	movw	r30, r24
    1910:	e8 57       	subi	r30, 0x78	; 120
    1912:	fe 4f       	sbci	r31, 0xFE	; 254
    1914:	01 90       	ld	r0, Z+
    1916:	f0 81       	ld	r31, Z
    1918:	e0 2d       	mov	r30, r0
    191a:	80 81       	ld	r24, Z
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	ea 81       	ldd	r30, Y+2	; 0x02
    1922:	fb 81       	ldd	r31, Y+3	; 0x03
    1924:	80 81       	ld	r24, Z
    1926:	86 95       	lsr	r24
    1928:	86 95       	lsr	r24
    192a:	86 95       	lsr	r24
    192c:	87 70       	andi	r24, 0x07	; 7
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a9 01       	movw	r20, r18
    1934:	02 c0       	rjmp	.+4      	; 0x193a <GPIO_pin_read_direction+0x62>
    1936:	55 95       	asr	r21
    1938:	47 95       	ror	r20
    193a:	8a 95       	dec	r24
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <GPIO_pin_read_direction+0x5e>
    193e:	ca 01       	movw	r24, r20
    1940:	81 70       	andi	r24, 0x01	; 1
    1942:	ec 81       	ldd	r30, Y+4	; 0x04
    1944:	fd 81       	ldd	r31, Y+5	; 0x05
    1946:	80 83       	st	Z, r24
	}
	return ret;
    1948:	89 81       	ldd	r24, Y+1	; 0x01
}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <GPIO_pin_write_logic>:
Std_ReturnType GPIO_pin_write_logic(const gpio_config_pin_t* gpio_obj, uint8 logic)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	00 d0       	rcall	.+0      	; 0x1960 <GPIO_pin_write_logic+0x6>
    1960:	00 d0       	rcall	.+0      	; 0x1962 <GPIO_pin_write_logic+0x8>
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	9b 83       	std	Y+3, r25	; 0x03
    1968:	8a 83       	std	Y+2, r24	; 0x02
    196a:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	9b 81       	ldd	r25, Y+3	; 0x03
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	11 f4       	brne	.+4      	; 0x197c <GPIO_pin_write_logic+0x22>
	{
		ret = E_NOT_OK;
    1978:	19 82       	std	Y+1, r1	; 0x01
    197a:	66 c0       	rjmp	.+204    	; 0x1a48 <GPIO_pin_write_logic+0xee>
	}
	else
	{
		if(logic == GPIO_HIGH)
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	81 f5       	brne	.+96     	; 0x19e2 <GPIO_pin_write_logic+0x88>
		{
			SET_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    1982:	ea 81       	ldd	r30, Y+2	; 0x02
    1984:	fb 81       	ldd	r31, Y+3	; 0x03
    1986:	80 81       	ld	r24, Z
    1988:	87 70       	andi	r24, 0x07	; 7
    198a:	88 2f       	mov	r24, r24
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	fc 01       	movw	r30, r24
    1994:	e0 57       	subi	r30, 0x70	; 112
    1996:	fe 4f       	sbci	r31, 0xFE	; 254
    1998:	a0 81       	ld	r26, Z
    199a:	b1 81       	ldd	r27, Z+1	; 0x01
    199c:	ea 81       	ldd	r30, Y+2	; 0x02
    199e:	fb 81       	ldd	r31, Y+3	; 0x03
    19a0:	80 81       	ld	r24, Z
    19a2:	87 70       	andi	r24, 0x07	; 7
    19a4:	88 2f       	mov	r24, r24
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	fc 01       	movw	r30, r24
    19ae:	e0 57       	subi	r30, 0x70	; 112
    19b0:	fe 4f       	sbci	r31, 0xFE	; 254
    19b2:	01 90       	ld	r0, Z+
    19b4:	f0 81       	ld	r31, Z
    19b6:	e0 2d       	mov	r30, r0
    19b8:	40 81       	ld	r20, Z
    19ba:	ea 81       	ldd	r30, Y+2	; 0x02
    19bc:	fb 81       	ldd	r31, Y+3	; 0x03
    19be:	80 81       	ld	r24, Z
    19c0:	86 95       	lsr	r24
    19c2:	86 95       	lsr	r24
    19c4:	86 95       	lsr	r24
    19c6:	87 70       	andi	r24, 0x07	; 7
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <GPIO_pin_write_logic+0x7e>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <GPIO_pin_write_logic+0x7a>
    19dc:	84 2b       	or	r24, r20
    19de:	8c 93       	st	X, r24
    19e0:	33 c0       	rjmp	.+102    	; 0x1a48 <GPIO_pin_write_logic+0xee>
		}
		else if(logic == GPIO_LOW)
    19e2:	8c 81       	ldd	r24, Y+4	; 0x04
    19e4:	88 23       	and	r24, r24
    19e6:	81 f5       	brne	.+96     	; 0x1a48 <GPIO_pin_write_logic+0xee>
		{
			CLEAR_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    19e8:	ea 81       	ldd	r30, Y+2	; 0x02
    19ea:	fb 81       	ldd	r31, Y+3	; 0x03
    19ec:	80 81       	ld	r24, Z
    19ee:	87 70       	andi	r24, 0x07	; 7
    19f0:	88 2f       	mov	r24, r24
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	fc 01       	movw	r30, r24
    19fa:	e0 57       	subi	r30, 0x70	; 112
    19fc:	fe 4f       	sbci	r31, 0xFE	; 254
    19fe:	a0 81       	ld	r26, Z
    1a00:	b1 81       	ldd	r27, Z+1	; 0x01
    1a02:	ea 81       	ldd	r30, Y+2	; 0x02
    1a04:	fb 81       	ldd	r31, Y+3	; 0x03
    1a06:	80 81       	ld	r24, Z
    1a08:	87 70       	andi	r24, 0x07	; 7
    1a0a:	88 2f       	mov	r24, r24
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	fc 01       	movw	r30, r24
    1a14:	e0 57       	subi	r30, 0x70	; 112
    1a16:	fe 4f       	sbci	r31, 0xFE	; 254
    1a18:	01 90       	ld	r0, Z+
    1a1a:	f0 81       	ld	r31, Z
    1a1c:	e0 2d       	mov	r30, r0
    1a1e:	40 81       	ld	r20, Z
    1a20:	ea 81       	ldd	r30, Y+2	; 0x02
    1a22:	fb 81       	ldd	r31, Y+3	; 0x03
    1a24:	80 81       	ld	r24, Z
    1a26:	86 95       	lsr	r24
    1a28:	86 95       	lsr	r24
    1a2a:	86 95       	lsr	r24
    1a2c:	87 70       	andi	r24, 0x07	; 7
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <GPIO_pin_write_logic+0xe4>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <GPIO_pin_write_logic+0xe0>
    1a42:	80 95       	com	r24
    1a44:	84 23       	and	r24, r20
    1a46:	8c 93       	st	X, r24
		}
	}
	return ret;
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <GPIO_pin_read_logic>:
Std_ReturnType GPIO_pin_read_logic(const gpio_config_pin_t* gpio_obj, uint8* logic_res)
{
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <GPIO_pin_read_logic+0x6>
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <GPIO_pin_read_logic+0x8>
    1a60:	0f 92       	push	r0
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	9b 83       	std	Y+3, r25	; 0x03
    1a68:	8a 83       	std	Y+2, r24	; 0x02
    1a6a:	7d 83       	std	Y+5, r23	; 0x05
    1a6c:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	9b 81       	ldd	r25, Y+3	; 0x03
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	11 f4       	brne	.+4      	; 0x1a7e <GPIO_pin_read_logic+0x26>
	{
		ret = E_NOT_OK;
    1a7a:	19 82       	std	Y+1, r1	; 0x01
    1a7c:	25 c0       	rjmp	.+74     	; 0x1ac8 <GPIO_pin_read_logic+0x70>
	}
	else
	{
		*logic_res = READ_BIT(*PIN_registers[gpio_obj->port], gpio_obj->pin);
    1a7e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a80:	fb 81       	ldd	r31, Y+3	; 0x03
    1a82:	80 81       	ld	r24, Z
    1a84:	87 70       	andi	r24, 0x07	; 7
    1a86:	88 2f       	mov	r24, r24
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	fc 01       	movw	r30, r24
    1a90:	e8 56       	subi	r30, 0x68	; 104
    1a92:	fe 4f       	sbci	r31, 0xFE	; 254
    1a94:	01 90       	ld	r0, Z+
    1a96:	f0 81       	ld	r31, Z
    1a98:	e0 2d       	mov	r30, r0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa2:	fb 81       	ldd	r31, Y+3	; 0x03
    1aa4:	80 81       	ld	r24, Z
    1aa6:	86 95       	lsr	r24
    1aa8:	86 95       	lsr	r24
    1aaa:	86 95       	lsr	r24
    1aac:	87 70       	andi	r24, 0x07	; 7
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a9 01       	movw	r20, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <GPIO_pin_read_logic+0x62>
    1ab6:	55 95       	asr	r21
    1ab8:	47 95       	ror	r20
    1aba:	8a 95       	dec	r24
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <GPIO_pin_read_logic+0x5e>
    1abe:	ca 01       	movw	r24, r20
    1ac0:	81 70       	andi	r24, 0x01	; 1
    1ac2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ac6:	80 83       	st	Z, r24
	}
	return ret;
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <GPIO_pin_toggle_logic>:
Std_ReturnType GPIO_pin_toggle_logic(const gpio_config_pin_t* gpio_obj)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <GPIO_pin_toggle_logic+0x6>
    1ae0:	0f 92       	push	r0
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	9b 83       	std	Y+3, r25	; 0x03
    1ae8:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	9b 81       	ldd	r25, Y+3	; 0x03
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	11 f4       	brne	.+4      	; 0x1afa <GPIO_pin_toggle_logic+0x20>
	{
		ret = E_NOT_OK;
    1af6:	19 82       	std	Y+1, r1	; 0x01
    1af8:	2f c0       	rjmp	.+94     	; 0x1b58 <GPIO_pin_toggle_logic+0x7e>
	}
	else
	{
		TOGGLE_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    1afa:	ea 81       	ldd	r30, Y+2	; 0x02
    1afc:	fb 81       	ldd	r31, Y+3	; 0x03
    1afe:	80 81       	ld	r24, Z
    1b00:	87 70       	andi	r24, 0x07	; 7
    1b02:	88 2f       	mov	r24, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	e0 57       	subi	r30, 0x70	; 112
    1b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b10:	a0 81       	ld	r26, Z
    1b12:	b1 81       	ldd	r27, Z+1	; 0x01
    1b14:	ea 81       	ldd	r30, Y+2	; 0x02
    1b16:	fb 81       	ldd	r31, Y+3	; 0x03
    1b18:	80 81       	ld	r24, Z
    1b1a:	87 70       	andi	r24, 0x07	; 7
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	fc 01       	movw	r30, r24
    1b26:	e0 57       	subi	r30, 0x70	; 112
    1b28:	fe 4f       	sbci	r31, 0xFE	; 254
    1b2a:	01 90       	ld	r0, Z+
    1b2c:	f0 81       	ld	r31, Z
    1b2e:	e0 2d       	mov	r30, r0
    1b30:	40 81       	ld	r20, Z
    1b32:	ea 81       	ldd	r30, Y+2	; 0x02
    1b34:	fb 81       	ldd	r31, Y+3	; 0x03
    1b36:	80 81       	ld	r24, Z
    1b38:	86 95       	lsr	r24
    1b3a:	86 95       	lsr	r24
    1b3c:	86 95       	lsr	r24
    1b3e:	87 70       	andi	r24, 0x07	; 7
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	02 2e       	mov	r0, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <GPIO_pin_toggle_logic+0x76>
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	0a 94       	dec	r0
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <GPIO_pin_toggle_logic+0x72>
    1b54:	84 27       	eor	r24, r20
    1b56:	8c 93       	st	X, r24
	}
	return ret;
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <GPIO_pin_PullUp_Enable>:
Std_ReturnType GPIO_pin_PullUp_Enable(const gpio_config_pin_t* gpio_obj)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <GPIO_pin_PullUp_Enable+0x6>
    1b6c:	0f 92       	push	r0
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	9b 83       	std	Y+3, r25	; 0x03
    1b74:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	11 f4       	brne	.+4      	; 0x1b86 <GPIO_pin_PullUp_Enable+0x20>
	{
		ret = E_NOT_OK;
    1b82:	19 82       	std	Y+1, r1	; 0x01
    1b84:	65 c0       	rjmp	.+202    	; 0x1c50 <GPIO_pin_PullUp_Enable+0xea>
	}
	else
	{
		CLEAR_BIT(*(DDR_registers[gpio_obj->port]), gpio_obj->pin);
    1b86:	ea 81       	ldd	r30, Y+2	; 0x02
    1b88:	fb 81       	ldd	r31, Y+3	; 0x03
    1b8a:	80 81       	ld	r24, Z
    1b8c:	87 70       	andi	r24, 0x07	; 7
    1b8e:	88 2f       	mov	r24, r24
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	fc 01       	movw	r30, r24
    1b98:	e8 57       	subi	r30, 0x78	; 120
    1b9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9c:	a0 81       	ld	r26, Z
    1b9e:	b1 81       	ldd	r27, Z+1	; 0x01
    1ba0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ba2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ba4:	80 81       	ld	r24, Z
    1ba6:	87 70       	andi	r24, 0x07	; 7
    1ba8:	88 2f       	mov	r24, r24
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	e8 57       	subi	r30, 0x78	; 120
    1bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb6:	01 90       	ld	r0, Z+
    1bb8:	f0 81       	ld	r31, Z
    1bba:	e0 2d       	mov	r30, r0
    1bbc:	40 81       	ld	r20, Z
    1bbe:	ea 81       	ldd	r30, Y+2	; 0x02
    1bc0:	fb 81       	ldd	r31, Y+3	; 0x03
    1bc2:	80 81       	ld	r24, Z
    1bc4:	86 95       	lsr	r24
    1bc6:	86 95       	lsr	r24
    1bc8:	86 95       	lsr	r24
    1bca:	87 70       	andi	r24, 0x07	; 7
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <GPIO_pin_PullUp_Enable+0x74>
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	2a 95       	dec	r18
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <GPIO_pin_PullUp_Enable+0x70>
    1bde:	80 95       	com	r24
    1be0:	84 23       	and	r24, r20
    1be2:	8c 93       	st	X, r24
		SET_BIT(*(PORT_registers[gpio_obj->port]), gpio_obj->pin);
    1be4:	ea 81       	ldd	r30, Y+2	; 0x02
    1be6:	fb 81       	ldd	r31, Y+3	; 0x03
    1be8:	80 81       	ld	r24, Z
    1bea:	87 70       	andi	r24, 0x07	; 7
    1bec:	88 2f       	mov	r24, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	e0 57       	subi	r30, 0x70	; 112
    1bf8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bfa:	a0 81       	ld	r26, Z
    1bfc:	b1 81       	ldd	r27, Z+1	; 0x01
    1bfe:	ea 81       	ldd	r30, Y+2	; 0x02
    1c00:	fb 81       	ldd	r31, Y+3	; 0x03
    1c02:	80 81       	ld	r24, Z
    1c04:	87 70       	andi	r24, 0x07	; 7
    1c06:	88 2f       	mov	r24, r24
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	fc 01       	movw	r30, r24
    1c10:	e0 57       	subi	r30, 0x70	; 112
    1c12:	fe 4f       	sbci	r31, 0xFE	; 254
    1c14:	01 90       	ld	r0, Z+
    1c16:	f0 81       	ld	r31, Z
    1c18:	e0 2d       	mov	r30, r0
    1c1a:	40 81       	ld	r20, Z
    1c1c:	ea 81       	ldd	r30, Y+2	; 0x02
    1c1e:	fb 81       	ldd	r31, Y+3	; 0x03
    1c20:	80 81       	ld	r24, Z
    1c22:	86 95       	lsr	r24
    1c24:	86 95       	lsr	r24
    1c26:	86 95       	lsr	r24
    1c28:	87 70       	andi	r24, 0x07	; 7
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 2e       	mov	r0, r18
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <GPIO_pin_PullUp_Enable+0xd4>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	0a 94       	dec	r0
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <GPIO_pin_PullUp_Enable+0xd0>
    1c3e:	84 2b       	or	r24, r20
    1c40:	8c 93       	st	X, r24
		CLEAR_BIT(SFIOR, PUD);
    1c42:	a0 e5       	ldi	r26, 0x50	; 80
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e0 e5       	ldi	r30, 0x50	; 80
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	8b 7f       	andi	r24, 0xFB	; 251
    1c4e:	8c 93       	st	X, r24
	}
	return ret;
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <GPIO_pin_PullUp_Disable>:
Std_ReturnType GPIO_pin_PullUp_Disable(const gpio_config_pin_t* gpio_obj)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <GPIO_pin_PullUp_Disable+0x6>
    1c64:	0f 92       	push	r0
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	9b 83       	std	Y+3, r25	; 0x03
    1c6c:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	9b 81       	ldd	r25, Y+3	; 0x03
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	11 f4       	brne	.+4      	; 0x1c7e <GPIO_pin_PullUp_Disable+0x20>
	{
		ret = E_NOT_OK;
    1c7a:	19 82       	std	Y+1, r1	; 0x01
    1c7c:	30 c0       	rjmp	.+96     	; 0x1cde <GPIO_pin_PullUp_Disable+0x80>
	}
	else
	{
		CLEAR_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    1c7e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c80:	fb 81       	ldd	r31, Y+3	; 0x03
    1c82:	80 81       	ld	r24, Z
    1c84:	87 70       	andi	r24, 0x07	; 7
    1c86:	88 2f       	mov	r24, r24
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	fc 01       	movw	r30, r24
    1c90:	e0 57       	subi	r30, 0x70	; 112
    1c92:	fe 4f       	sbci	r31, 0xFE	; 254
    1c94:	a0 81       	ld	r26, Z
    1c96:	b1 81       	ldd	r27, Z+1	; 0x01
    1c98:	ea 81       	ldd	r30, Y+2	; 0x02
    1c9a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c9c:	80 81       	ld	r24, Z
    1c9e:	87 70       	andi	r24, 0x07	; 7
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	fc 01       	movw	r30, r24
    1caa:	e0 57       	subi	r30, 0x70	; 112
    1cac:	fe 4f       	sbci	r31, 0xFE	; 254
    1cae:	01 90       	ld	r0, Z+
    1cb0:	f0 81       	ld	r31, Z
    1cb2:	e0 2d       	mov	r30, r0
    1cb4:	40 81       	ld	r20, Z
    1cb6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cb8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cba:	80 81       	ld	r24, Z
    1cbc:	86 95       	lsr	r24
    1cbe:	86 95       	lsr	r24
    1cc0:	86 95       	lsr	r24
    1cc2:	87 70       	andi	r24, 0x07	; 7
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	02 2e       	mov	r0, r18
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <GPIO_pin_PullUp_Disable+0x76>
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	0a 94       	dec	r0
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <GPIO_pin_PullUp_Disable+0x72>
    1cd8:	80 95       	com	r24
    1cda:	84 23       	and	r24, r20
    1cdc:	8c 93       	st	X, r24
	}
	return ret;
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <GPIO_port_direction_initialize>:

Std_ReturnType GPIO_port_direction_initialize(gpio_port_t _port, uint8 port_direction)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <GPIO_port_direction_initialize+0x6>
    1cf2:	0f 92       	push	r0
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	8a 83       	std	Y+2, r24	; 0x02
    1cfa:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	84 30       	cpi	r24, 0x04	; 4
    1d04:	10 f0       	brcs	.+4      	; 0x1d0a <GPIO_port_direction_initialize+0x1e>
	{
		ret = E_NOT_OK;
    1d06:	19 82       	std	Y+1, r1	; 0x01
    1d08:	0d c0       	rjmp	.+26     	; 0x1d24 <GPIO_port_direction_initialize+0x38>
	}
	else
	{
		*DDR_registers[_port] = port_direction;
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	fc 01       	movw	r30, r24
    1d16:	e8 57       	subi	r30, 0x78	; 120
    1d18:	fe 4f       	sbci	r31, 0xFE	; 254
    1d1a:	01 90       	ld	r0, Z+
    1d1c:	f0 81       	ld	r31, Z
    1d1e:	e0 2d       	mov	r30, r0
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	80 83       	st	Z, r24
	}
	return ret;
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <GPIO_port_initialize>:
Std_ReturnType GPIO_port_initialize(gpio_port_t _port, uint8 port_direction, uint8 port_logic)
{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <GPIO_port_initialize+0x6>
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <GPIO_port_initialize+0x8>
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	8a 83       	std	Y+2, r24	; 0x02
    1d40:	6b 83       	std	Y+3, r22	; 0x03
    1d42:	4c 83       	std	Y+4, r20	; 0x04
	Std_ReturnType ret = E_OK;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	84 30       	cpi	r24, 0x04	; 4
    1d4c:	10 f0       	brcs	.+4      	; 0x1d52 <GPIO_port_initialize+0x20>
	{
		ret = E_NOT_OK;
    1d4e:	19 82       	std	Y+1, r1	; 0x01
    1d50:	1a c0       	rjmp	.+52     	; 0x1d86 <GPIO_port_initialize+0x54>
	}
	else
	{
		*DDR_registers[_port] = port_direction;
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	e8 57       	subi	r30, 0x78	; 120
    1d60:	fe 4f       	sbci	r31, 0xFE	; 254
    1d62:	01 90       	ld	r0, Z+
    1d64:	f0 81       	ld	r31, Z
    1d66:	e0 2d       	mov	r30, r0
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	80 83       	st	Z, r24
		*PORT_registers[_port] = port_logic;
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	88 2f       	mov	r24, r24
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	fc 01       	movw	r30, r24
    1d78:	e0 57       	subi	r30, 0x70	; 112
    1d7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7c:	01 90       	ld	r0, Z+
    1d7e:	f0 81       	ld	r31, Z
    1d80:	e0 2d       	mov	r30, r0
    1d82:	8c 81       	ldd	r24, Y+4	; 0x04
    1d84:	80 83       	st	Z, r24
	}
		return ret;
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <GPIO_port_read_direction>:
Std_ReturnType GPIO_port_read_direction(gpio_port_t _port, uint8* port_direction)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <GPIO_port_read_direction+0x6>
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <GPIO_port_read_direction+0x8>
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	8a 83       	std	Y+2, r24	; 0x02
    1da4:	7c 83       	std	Y+4, r23	; 0x04
    1da6:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	84 30       	cpi	r24, 0x04	; 4
    1db0:	10 f0       	brcs	.+4      	; 0x1db6 <GPIO_port_read_direction+0x20>
	{
		ret = E_NOT_OK;
    1db2:	19 82       	std	Y+1, r1	; 0x01
    1db4:	0f c0       	rjmp	.+30     	; 0x1dd4 <GPIO_port_read_direction+0x3e>
	}
	else
	{
		*port_direction = *DDR_registers[_port];
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e8 57       	subi	r30, 0x78	; 120
    1dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc6:	01 90       	ld	r0, Z+
    1dc8:	f0 81       	ld	r31, Z
    1dca:	e0 2d       	mov	r30, r0
    1dcc:	80 81       	ld	r24, Z
    1dce:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd0:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd2:	80 83       	st	Z, r24
	}
	return ret;
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <GPIO_port_write_logic>:
Std_ReturnType GPIO_port_write_logic(gpio_port_t _port, uint8 port_logic)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <GPIO_port_write_logic+0x6>
    1dea:	0f 92       	push	r0
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	8a 83       	std	Y+2, r24	; 0x02
    1df2:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	84 30       	cpi	r24, 0x04	; 4
    1dfc:	10 f0       	brcs	.+4      	; 0x1e02 <GPIO_port_write_logic+0x1e>
	{
		ret = E_NOT_OK;
    1dfe:	19 82       	std	Y+1, r1	; 0x01
    1e00:	0d c0       	rjmp	.+26     	; 0x1e1c <GPIO_port_write_logic+0x38>
	}
	else
	{
		*PORT_registers[_port] = port_logic;
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	e0 57       	subi	r30, 0x70	; 112
    1e10:	fe 4f       	sbci	r31, 0xFE	; 254
    1e12:	01 90       	ld	r0, Z+
    1e14:	f0 81       	ld	r31, Z
    1e16:	e0 2d       	mov	r30, r0
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	80 83       	st	Z, r24
	}
	return ret;
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <GPIO_port_read_logic>:
Std_ReturnType GPIO_port_read_logic(gpio_port_t _port, uint8* port_logic)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <GPIO_port_read_logic+0x6>
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <GPIO_port_read_logic+0x8>
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	8a 83       	std	Y+2, r24	; 0x02
    1e38:	7c 83       	std	Y+4, r23	; 0x04
    1e3a:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	84 30       	cpi	r24, 0x04	; 4
    1e44:	10 f0       	brcs	.+4      	; 0x1e4a <GPIO_port_read_logic+0x20>
	{
		ret = E_NOT_OK;
    1e46:	19 82       	std	Y+1, r1	; 0x01
    1e48:	0f c0       	rjmp	.+30     	; 0x1e68 <GPIO_port_read_logic+0x3e>
	}
	else
	{
		*port_logic = *PIN_registers[_port];
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	88 2f       	mov	r24, r24
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	fc 01       	movw	r30, r24
    1e56:	e8 56       	subi	r30, 0x68	; 104
    1e58:	fe 4f       	sbci	r31, 0xFE	; 254
    1e5a:	01 90       	ld	r0, Z+
    1e5c:	f0 81       	ld	r31, Z
    1e5e:	e0 2d       	mov	r30, r0
    1e60:	80 81       	ld	r24, Z
    1e62:	eb 81       	ldd	r30, Y+3	; 0x03
    1e64:	fc 81       	ldd	r31, Y+4	; 0x04
    1e66:	80 83       	st	Z, r24
	}
	return ret;
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <GPIO_port_toggle>:
Std_ReturnType GPIO_port_toggle(gpio_port_t _port)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <GPIO_port_toggle+0x6>
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	84 30       	cpi	r24, 0x04	; 4
    1e8c:	10 f0       	brcs	.+4      	; 0x1e92 <GPIO_port_toggle+0x1a>
	{
		ret = E_NOT_OK;
    1e8e:	19 82       	std	Y+1, r1	; 0x01
    1e90:	18 c0       	rjmp	.+48     	; 0x1ec2 <GPIO_port_toggle+0x4a>
	}
	else
	{
		*PORT_registers[_port] = *PORT_registers[_port] ^ 0xFF;
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	e0 57       	subi	r30, 0x70	; 112
    1ea0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea2:	a0 81       	ld	r26, Z
    1ea4:	b1 81       	ldd	r27, Z+1	; 0x01
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	88 2f       	mov	r24, r24
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	e0 57       	subi	r30, 0x70	; 112
    1eb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb6:	01 90       	ld	r0, Z+
    1eb8:	f0 81       	ld	r31, Z
    1eba:	e0 2d       	mov	r30, r0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	80 95       	com	r24
    1ec0:	8c 93       	st	X, r24
	}
	return ret;
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <GPIO_port_PullUp_Enable>:
Std_ReturnType GPIO_port_PullUp_Enable(gpio_port_t _port)
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <GPIO_port_PullUp_Enable+0x6>
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <GPIO_port_PullUp_Enable+0x8>
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	84 30       	cpi	r24, 0x04	; 4
    1ee4:	10 f0       	brcs	.+4      	; 0x1eea <GPIO_port_PullUp_Enable+0x1c>
	{
		ret = E_NOT_OK;
    1ee6:	19 82       	std	Y+1, r1	; 0x01
    1ee8:	38 c0       	rjmp	.+112    	; 0x1f5a <GPIO_port_PullUp_Enable+0x8c>
	}
	else
	{
		*DDR_registers[_port] = *DDR_registers[_port] & 0x00;
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e8 57       	subi	r30, 0x78	; 120
    1ef8:	fe 4f       	sbci	r31, 0xFE	; 254
    1efa:	01 90       	ld	r0, Z+
    1efc:	f0 81       	ld	r31, Z
    1efe:	e0 2d       	mov	r30, r0
    1f00:	80 81       	ld	r24, Z
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	e8 57       	subi	r30, 0x78	; 120
    1f10:	fe 4f       	sbci	r31, 0xFE	; 254
    1f12:	01 90       	ld	r0, Z+
    1f14:	f0 81       	ld	r31, Z
    1f16:	e0 2d       	mov	r30, r0
    1f18:	10 82       	st	Z, r1
		*PORT_registers[_port] = *PORT_registers[_port] | 0xFF;
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	88 2f       	mov	r24, r24
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	fc 01       	movw	r30, r24
    1f26:	e0 57       	subi	r30, 0x70	; 112
    1f28:	fe 4f       	sbci	r31, 0xFE	; 254
    1f2a:	01 90       	ld	r0, Z+
    1f2c:	f0 81       	ld	r31, Z
    1f2e:	e0 2d       	mov	r30, r0
    1f30:	80 81       	ld	r24, Z
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	88 2f       	mov	r24, r24
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	e0 57       	subi	r30, 0x70	; 112
    1f40:	fe 4f       	sbci	r31, 0xFE	; 254
    1f42:	01 90       	ld	r0, Z+
    1f44:	f0 81       	ld	r31, Z
    1f46:	e0 2d       	mov	r30, r0
    1f48:	8f ef       	ldi	r24, 0xFF	; 255
    1f4a:	80 83       	st	Z, r24
		CLEAR_BIT(SFIOR, PUD);
    1f4c:	a0 e5       	ldi	r26, 0x50	; 80
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e0 e5       	ldi	r30, 0x50	; 80
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	8b 7f       	andi	r24, 0xFB	; 251
    1f58:	8c 93       	st	X, r24
	}
	return ret;
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <GPIO_port_PullUp_Disable>:
Std_ReturnType GPIO_port_PullUp_Disable(gpio_port_t _port)
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <GPIO_port_PullUp_Disable+0x6>
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	84 30       	cpi	r24, 0x04	; 4
    1f7e:	10 f0       	brcs	.+4      	; 0x1f84 <GPIO_port_PullUp_Disable+0x1a>
	{
		ret = E_NOT_OK;
    1f80:	19 82       	std	Y+1, r1	; 0x01
    1f82:	0c c0       	rjmp	.+24     	; 0x1f9c <GPIO_port_PullUp_Disable+0x32>
	}
	else
	{
		*PORT_registers[_port] = 0x00;
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	fc 01       	movw	r30, r24
    1f90:	e0 57       	subi	r30, 0x70	; 112
    1f92:	fe 4f       	sbci	r31, 0xFE	; 254
    1f94:	01 90       	ld	r0, Z+
    1f96:	f0 81       	ld	r31, Z
    1f98:	e0 2d       	mov	r30, r0
    1f9a:	10 82       	st	Z, r1
	}
	return ret;
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <MCAL_init>:
		.timer1Clock=F_CPU_8,
		.icu_interruptHandlerNotify=ICU_callBackNotify
};

Std_ReturnType MCAL_init(void)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
	ret = Interrupt_INTx_Init(&g_int0Obj);
    1fb0:	81 ea       	ldi	r24, 0xA1	; 161
    1fb2:	91 e0       	ldi	r25, 0x01	; 1
    1fb4:	0e 94 17 07 	call	0xe2e	; 0xe2e <Interrupt_INTx_Init>
    1fb8:	80 93 a0 01 	sts	0x01A0, r24
	ret = ICU_init(&g_icuObj);
    1fbc:	84 ea       	ldi	r24, 0xA4	; 164
    1fbe:	91 e0       	ldi	r25, 0x01	; 1
    1fc0:	0e 94 be 09 	call	0x137c	; 0x137c <ICU_init>
    1fc4:	80 93 a0 01 	sts	0x01A0, r24
	return ret;
    1fc8:	80 91 a0 01 	lds	r24, 0x01A0
}
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <lcd_4bit_initialize>:
static void* my_memset(void* str, uint8 ch, uint8 str_size);

/* ---------------------- Function Definitions ----------------------*/
#if (LCD_MODE == CHAR_LCD_4BIT_MODE)
Std_ReturnType lcd_4bit_initialize(const char_lcd_t* lcd_obj)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	e8 97       	sbiw	r28, 0x38	; 56
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	98 af       	std	Y+56, r25	; 0x38
    1fe8:	8f ab       	std	Y+55, r24	; 0x37
   Std_ReturnType ret = E_NOT_OK;
    1fea:	1e aa       	std	Y+54, r1	; 0x36
    uint8 l_pin_counter = ZERO_INIT;
    1fec:	1d aa       	std	Y+53, r1	; 0x35
    if(NULL == lcd_obj)
    1fee:	8f a9       	ldd	r24, Y+55	; 0x37
    1ff0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	11 f4       	brne	.+4      	; 0x1ffa <lcd_4bit_initialize+0x28>
    {
        ret = E_NOT_OK;
    1ff6:	1e aa       	std	Y+54, r1	; 0x36
    1ff8:	04 c2       	rjmp	.+1032   	; 0x2402 <lcd_4bit_initialize+0x430>
    }
    else
    {
        ret = GPIO_pin_initialize(&(lcd_obj->RS_pin));
    1ffa:	8f a9       	ldd	r24, Y+55	; 0x37
    1ffc:	98 ad       	ldd	r25, Y+56	; 0x38
    1ffe:	0e 94 43 0c 	call	0x1886	; 0x1886 <GPIO_pin_initialize>
    2002:	8e ab       	std	Y+54, r24	; 0x36
        ret = GPIO_pin_initialize(&(lcd_obj->E_pin));
    2004:	8f a9       	ldd	r24, Y+55	; 0x37
    2006:	98 ad       	ldd	r25, Y+56	; 0x38
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	0e 94 43 0c 	call	0x1886	; 0x1886 <GPIO_pin_initialize>
    200e:	8e ab       	std	Y+54, r24	; 0x36
        for(l_pin_counter=0; l_pin_counter < 4; l_pin_counter++)
    2010:	1d aa       	std	Y+53, r1	; 0x35
    2012:	10 c0       	rjmp	.+32     	; 0x2034 <lcd_4bit_initialize+0x62>
        {
            ret = GPIO_pin_initialize(&(lcd_obj->lcd_data_pins[l_pin_counter]));
    2014:	8f a9       	ldd	r24, Y+55	; 0x37
    2016:	98 ad       	ldd	r25, Y+56	; 0x38
    2018:	9c 01       	movw	r18, r24
    201a:	2e 5f       	subi	r18, 0xFE	; 254
    201c:	3f 4f       	sbci	r19, 0xFF	; 255
    201e:	8d a9       	ldd	r24, Y+53	; 0x35
    2020:	88 2f       	mov	r24, r24
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	82 0f       	add	r24, r18
    2026:	93 1f       	adc	r25, r19
    2028:	0e 94 43 0c 	call	0x1886	; 0x1886 <GPIO_pin_initialize>
    202c:	8e ab       	std	Y+54, r24	; 0x36
    }
    else
    {
        ret = GPIO_pin_initialize(&(lcd_obj->RS_pin));
        ret = GPIO_pin_initialize(&(lcd_obj->E_pin));
        for(l_pin_counter=0; l_pin_counter < 4; l_pin_counter++)
    202e:	8d a9       	ldd	r24, Y+53	; 0x35
    2030:	8f 5f       	subi	r24, 0xFF	; 255
    2032:	8d ab       	std	Y+53, r24	; 0x35
    2034:	8d a9       	ldd	r24, Y+53	; 0x35
    2036:	84 30       	cpi	r24, 0x04	; 4
    2038:	68 f3       	brcs	.-38     	; 0x2014 <lcd_4bit_initialize+0x42>
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	a0 ea       	ldi	r26, 0xA0	; 160
    2040:	b1 e4       	ldi	r27, 0x41	; 65
    2042:	89 ab       	std	Y+49, r24	; 0x31
    2044:	9a ab       	std	Y+50, r25	; 0x32
    2046:	ab ab       	std	Y+51, r26	; 0x33
    2048:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204a:	69 a9       	ldd	r22, Y+49	; 0x31
    204c:	7a a9       	ldd	r23, Y+50	; 0x32
    204e:	8b a9       	ldd	r24, Y+51	; 0x33
    2050:	9c a9       	ldd	r25, Y+52	; 0x34
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	4a ef       	ldi	r20, 0xFA	; 250
    2058:	54 e4       	ldi	r21, 0x44	; 68
    205a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	8d a7       	std	Y+45, r24	; 0x2d
    2064:	9e a7       	std	Y+46, r25	; 0x2e
    2066:	af a7       	std	Y+47, r26	; 0x2f
    2068:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    206a:	6d a5       	ldd	r22, Y+45	; 0x2d
    206c:	7e a5       	ldd	r23, Y+46	; 0x2e
    206e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2070:	98 a9       	ldd	r25, Y+48	; 0x30
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e8       	ldi	r20, 0x80	; 128
    2078:	5f e3       	ldi	r21, 0x3F	; 63
    207a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    207e:	88 23       	and	r24, r24
    2080:	2c f4       	brge	.+10     	; 0x208c <lcd_4bit_initialize+0xba>
		__ticks = 1;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9c a7       	std	Y+44, r25	; 0x2c
    2088:	8b a7       	std	Y+43, r24	; 0x2b
    208a:	3f c0       	rjmp	.+126    	; 0x210a <lcd_4bit_initialize+0x138>
	else if (__tmp > 65535)
    208c:	6d a5       	ldd	r22, Y+45	; 0x2d
    208e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2090:	8f a5       	ldd	r24, Y+47	; 0x2f
    2092:	98 a9       	ldd	r25, Y+48	; 0x30
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	3f ef       	ldi	r19, 0xFF	; 255
    2098:	4f e7       	ldi	r20, 0x7F	; 127
    209a:	57 e4       	ldi	r21, 0x47	; 71
    209c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a0:	18 16       	cp	r1, r24
    20a2:	4c f5       	brge	.+82     	; 0x20f6 <lcd_4bit_initialize+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a4:	69 a9       	ldd	r22, Y+49	; 0x31
    20a6:	7a a9       	ldd	r23, Y+50	; 0x32
    20a8:	8b a9       	ldd	r24, Y+51	; 0x33
    20aa:	9c a9       	ldd	r25, Y+52	; 0x34
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e2       	ldi	r20, 0x20	; 32
    20b2:	51 e4       	ldi	r21, 0x41	; 65
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9c a7       	std	Y+44, r25	; 0x2c
    20ca:	8b a7       	std	Y+43, r24	; 0x2b
    20cc:	0f c0       	rjmp	.+30     	; 0x20ec <lcd_4bit_initialize+0x11a>
    20ce:	88 ec       	ldi	r24, 0xC8	; 200
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9a a7       	std	Y+42, r25	; 0x2a
    20d4:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20d6:	89 a5       	ldd	r24, Y+41	; 0x29
    20d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <lcd_4bit_initialize+0x108>
    20de:	9a a7       	std	Y+42, r25	; 0x2a
    20e0:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	9c a7       	std	Y+44, r25	; 0x2c
    20ea:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    20ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	69 f7       	brne	.-38     	; 0x20ce <lcd_4bit_initialize+0xfc>
    20f4:	14 c0       	rjmp	.+40     	; 0x211e <lcd_4bit_initialize+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    20f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    20fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    20fc:	98 a9       	ldd	r25, Y+48	; 0x30
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	9c a7       	std	Y+44, r25	; 0x2c
    2108:	8b a7       	std	Y+43, r24	; 0x2b
    210a:	8b a5       	ldd	r24, Y+43	; 0x2b
    210c:	9c a5       	ldd	r25, Y+44	; 0x2c
    210e:	98 a7       	std	Y+40, r25	; 0x28
    2110:	8f a3       	std	Y+39, r24	; 0x27
    2112:	8f a1       	ldd	r24, Y+39	; 0x27
    2114:	98 a5       	ldd	r25, Y+40	; 0x28
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	f1 f7       	brne	.-4      	; 0x2116 <lcd_4bit_initialize+0x144>
    211a:	98 a7       	std	Y+40, r25	; 0x28
    211c:	8f a3       	std	Y+39, r24	; 0x27
        {
            ret = GPIO_pin_initialize(&(lcd_obj->lcd_data_pins[l_pin_counter]));
        }
        _delay_ms(20);
        ret = lcd_4bit_send_command(lcd_obj, _LCD_8BIT_MODE_2LINES_COMMAND);
    211e:	8f a9       	ldd	r24, Y+55	; 0x37
    2120:	98 ad       	ldd	r25, Y+56	; 0x38
    2122:	68 e3       	ldi	r22, 0x38	; 56
    2124:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    2128:	8e ab       	std	Y+54, r24	; 0x36
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a0 ea       	ldi	r26, 0xA0	; 160
    2130:	b0 e4       	ldi	r27, 0x40	; 64
    2132:	8b a3       	std	Y+35, r24	; 0x23
    2134:	9c a3       	std	Y+36, r25	; 0x24
    2136:	ad a3       	std	Y+37, r26	; 0x25
    2138:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	6b a1       	ldd	r22, Y+35	; 0x23
    213c:	7c a1       	ldd	r23, Y+36	; 0x24
    213e:	8d a1       	ldd	r24, Y+37	; 0x25
    2140:	9e a1       	ldd	r25, Y+38	; 0x26
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a ef       	ldi	r20, 0xFA	; 250
    2148:	54 e4       	ldi	r21, 0x44	; 68
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	8f 8f       	std	Y+31, r24	; 0x1f
    2154:	98 a3       	std	Y+32, r25	; 0x20
    2156:	a9 a3       	std	Y+33, r26	; 0x21
    2158:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    215a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    215c:	78 a1       	ldd	r23, Y+32	; 0x20
    215e:	89 a1       	ldd	r24, Y+33	; 0x21
    2160:	9a a1       	ldd	r25, Y+34	; 0x22
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <lcd_4bit_initialize+0x1aa>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9e 8f       	std	Y+30, r25	; 0x1e
    2178:	8d 8f       	std	Y+29, r24	; 0x1d
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <lcd_4bit_initialize+0x228>
	else if (__tmp > 65535)
    217c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    217e:	78 a1       	ldd	r23, Y+32	; 0x20
    2180:	89 a1       	ldd	r24, Y+33	; 0x21
    2182:	9a a1       	ldd	r25, Y+34	; 0x22
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	4c f5       	brge	.+82     	; 0x21e6 <lcd_4bit_initialize+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	6b a1       	ldd	r22, Y+35	; 0x23
    2196:	7c a1       	ldd	r23, Y+36	; 0x24
    2198:	8d a1       	ldd	r24, Y+37	; 0x25
    219a:	9e a1       	ldd	r25, Y+38	; 0x26
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9e 8f       	std	Y+30, r25	; 0x1e
    21ba:	8d 8f       	std	Y+29, r24	; 0x1d
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <lcd_4bit_initialize+0x20a>
    21be:	88 ec       	ldi	r24, 0xC8	; 200
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	9c 8f       	std	Y+28, r25	; 0x1c
    21c4:	8b 8f       	std	Y+27, r24	; 0x1b
    21c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <lcd_4bit_initialize+0x1f8>
    21ce:	9c 8f       	std	Y+28, r25	; 0x1c
    21d0:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9e 8f       	std	Y+30, r25	; 0x1e
    21da:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	69 f7       	brne	.-38     	; 0x21be <lcd_4bit_initialize+0x1ec>
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <lcd_4bit_initialize+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21e8:	78 a1       	ldd	r23, Y+32	; 0x20
    21ea:	89 a1       	ldd	r24, Y+33	; 0x21
    21ec:	9a a1       	ldd	r25, Y+34	; 0x22
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9e 8f       	std	Y+30, r25	; 0x1e
    21f8:	8d 8f       	std	Y+29, r24	; 0x1d
    21fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21fe:	9a 8f       	std	Y+26, r25	; 0x1a
    2200:	89 8f       	std	Y+25, r24	; 0x19
    2202:	89 8d       	ldd	r24, Y+25	; 0x19
    2204:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <lcd_4bit_initialize+0x234>
    220a:	9a 8f       	std	Y+26, r25	; 0x1a
    220c:	89 8f       	std	Y+25, r24	; 0x19
        _delay_ms(5);
        ret = lcd_4bit_send_command(lcd_obj, _LCD_8BIT_MODE_2LINES_COMMAND);
    220e:	8f a9       	ldd	r24, Y+55	; 0x37
    2210:	98 ad       	ldd	r25, Y+56	; 0x38
    2212:	68 e3       	ldi	r22, 0x38	; 56
    2214:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    2218:	8e ab       	std	Y+54, r24	; 0x36
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	a6 e1       	ldi	r26, 0x16	; 22
    2220:	b3 e4       	ldi	r27, 0x43	; 67
    2222:	8d 8b       	std	Y+21, r24	; 0x15
    2224:	9e 8b       	std	Y+22, r25	; 0x16
    2226:	af 8b       	std	Y+23, r26	; 0x17
    2228:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    222a:	6d 89       	ldd	r22, Y+21	; 0x15
    222c:	7e 89       	ldd	r23, Y+22	; 0x16
    222e:	8f 89       	ldd	r24, Y+23	; 0x17
    2230:	98 8d       	ldd	r25, Y+24	; 0x18
    2232:	2b ea       	ldi	r18, 0xAB	; 171
    2234:	3a ea       	ldi	r19, 0xAA	; 170
    2236:	4a e2       	ldi	r20, 0x2A	; 42
    2238:	50 e4       	ldi	r21, 0x40	; 64
    223a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	89 8b       	std	Y+17, r24	; 0x11
    2244:	9a 8b       	std	Y+18, r25	; 0x12
    2246:	ab 8b       	std	Y+19, r26	; 0x13
    2248:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    224a:	69 89       	ldd	r22, Y+17	; 0x11
    224c:	7a 89       	ldd	r23, Y+18	; 0x12
    224e:	8b 89       	ldd	r24, Y+19	; 0x13
    2250:	9c 89       	ldd	r25, Y+20	; 0x14
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e8       	ldi	r20, 0x80	; 128
    2258:	5f e3       	ldi	r21, 0x3F	; 63
    225a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    225e:	88 23       	and	r24, r24
    2260:	1c f4       	brge	.+6      	; 0x2268 <lcd_4bit_initialize+0x296>
		__ticks = 1;
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	88 8b       	std	Y+16, r24	; 0x10
    2266:	91 c0       	rjmp	.+290    	; 0x238a <lcd_4bit_initialize+0x3b8>
	else if (__tmp > 255)
    2268:	69 89       	ldd	r22, Y+17	; 0x11
    226a:	7a 89       	ldd	r23, Y+18	; 0x12
    226c:	8b 89       	ldd	r24, Y+19	; 0x13
    226e:	9c 89       	ldd	r25, Y+20	; 0x14
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	4f e7       	ldi	r20, 0x7F	; 127
    2276:	53 e4       	ldi	r21, 0x43	; 67
    2278:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227c:	18 16       	cp	r1, r24
    227e:	0c f0       	brlt	.+2      	; 0x2282 <lcd_4bit_initialize+0x2b0>
    2280:	7b c0       	rjmp	.+246    	; 0x2378 <lcd_4bit_initialize+0x3a6>
	{
		_delay_ms(__us / 1000.0);
    2282:	6d 89       	ldd	r22, Y+21	; 0x15
    2284:	7e 89       	ldd	r23, Y+22	; 0x16
    2286:	8f 89       	ldd	r24, Y+23	; 0x17
    2288:	98 8d       	ldd	r25, Y+24	; 0x18
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	4a e7       	ldi	r20, 0x7A	; 122
    2290:	54 e4       	ldi	r21, 0x44	; 68
    2292:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	8c 87       	std	Y+12, r24	; 0x0c
    229c:	9d 87       	std	Y+13, r25	; 0x0d
    229e:	ae 87       	std	Y+14, r26	; 0x0e
    22a0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    22a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    22a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    22a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	4a ef       	ldi	r20, 0xFA	; 250
    22b0:	54 e4       	ldi	r21, 0x44	; 68
    22b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	88 87       	std	Y+8, r24	; 0x08
    22bc:	99 87       	std	Y+9, r25	; 0x09
    22be:	aa 87       	std	Y+10, r26	; 0x0a
    22c0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22c2:	68 85       	ldd	r22, Y+8	; 0x08
    22c4:	79 85       	ldd	r23, Y+9	; 0x09
    22c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e8       	ldi	r20, 0x80	; 128
    22d0:	5f e3       	ldi	r21, 0x3F	; 63
    22d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d6:	88 23       	and	r24, r24
    22d8:	2c f4       	brge	.+10     	; 0x22e4 <lcd_4bit_initialize+0x312>
		__ticks = 1;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	9f 83       	std	Y+7, r25	; 0x07
    22e0:	8e 83       	std	Y+6, r24	; 0x06
    22e2:	3f c0       	rjmp	.+126    	; 0x2362 <lcd_4bit_initialize+0x390>
	else if (__tmp > 65535)
    22e4:	68 85       	ldd	r22, Y+8	; 0x08
    22e6:	79 85       	ldd	r23, Y+9	; 0x09
    22e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    22ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	3f ef       	ldi	r19, 0xFF	; 255
    22f0:	4f e7       	ldi	r20, 0x7F	; 127
    22f2:	57 e4       	ldi	r21, 0x47	; 71
    22f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f8:	18 16       	cp	r1, r24
    22fa:	4c f5       	brge	.+82     	; 0x234e <lcd_4bit_initialize+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    22fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2300:	8e 85       	ldd	r24, Y+14	; 0x0e
    2302:	9f 85       	ldd	r25, Y+15	; 0x0f
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e2       	ldi	r20, 0x20	; 32
    230a:	51 e4       	ldi	r21, 0x41	; 65
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	bc 01       	movw	r22, r24
    2316:	cd 01       	movw	r24, r26
    2318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	9f 83       	std	Y+7, r25	; 0x07
    2322:	8e 83       	std	Y+6, r24	; 0x06
    2324:	0f c0       	rjmp	.+30     	; 0x2344 <lcd_4bit_initialize+0x372>
    2326:	88 ec       	ldi	r24, 0xC8	; 200
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9d 83       	std	Y+5, r25	; 0x05
    232c:	8c 83       	std	Y+4, r24	; 0x04
    232e:	8c 81       	ldd	r24, Y+4	; 0x04
    2330:	9d 81       	ldd	r25, Y+5	; 0x05
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <lcd_4bit_initialize+0x360>
    2336:	9d 83       	std	Y+5, r25	; 0x05
    2338:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233a:	8e 81       	ldd	r24, Y+6	; 0x06
    233c:	9f 81       	ldd	r25, Y+7	; 0x07
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	9f 83       	std	Y+7, r25	; 0x07
    2342:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2344:	8e 81       	ldd	r24, Y+6	; 0x06
    2346:	9f 81       	ldd	r25, Y+7	; 0x07
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	69 f7       	brne	.-38     	; 0x2326 <lcd_4bit_initialize+0x354>
    234c:	24 c0       	rjmp	.+72     	; 0x2396 <lcd_4bit_initialize+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234e:	68 85       	ldd	r22, Y+8	; 0x08
    2350:	79 85       	ldd	r23, Y+9	; 0x09
    2352:	8a 85       	ldd	r24, Y+10	; 0x0a
    2354:	9b 85       	ldd	r25, Y+11	; 0x0b
    2356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	9f 83       	std	Y+7, r25	; 0x07
    2360:	8e 83       	std	Y+6, r24	; 0x06
    2362:	8e 81       	ldd	r24, Y+6	; 0x06
    2364:	9f 81       	ldd	r25, Y+7	; 0x07
    2366:	9b 83       	std	Y+3, r25	; 0x03
    2368:	8a 83       	std	Y+2, r24	; 0x02
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	9b 81       	ldd	r25, Y+3	; 0x03
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	f1 f7       	brne	.-4      	; 0x236e <lcd_4bit_initialize+0x39c>
    2372:	9b 83       	std	Y+3, r25	; 0x03
    2374:	8a 83       	std	Y+2, r24	; 0x02
    2376:	0f c0       	rjmp	.+30     	; 0x2396 <lcd_4bit_initialize+0x3c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2378:	69 89       	ldd	r22, Y+17	; 0x11
    237a:	7a 89       	ldd	r23, Y+18	; 0x12
    237c:	8b 89       	ldd	r24, Y+19	; 0x13
    237e:	9c 89       	ldd	r25, Y+20	; 0x14
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	88 8b       	std	Y+16, r24	; 0x10
    238a:	88 89       	ldd	r24, Y+16	; 0x10
    238c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	8a 95       	dec	r24
    2392:	f1 f7       	brne	.-4      	; 0x2390 <lcd_4bit_initialize+0x3be>
    2394:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(150);
        ret = lcd_4bit_send_command(lcd_obj, _LCD_8BIT_MODE_2LINES_COMMAND);
    2396:	8f a9       	ldd	r24, Y+55	; 0x37
    2398:	98 ad       	ldd	r25, Y+56	; 0x38
    239a:	68 e3       	ldi	r22, 0x38	; 56
    239c:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    23a0:	8e ab       	std	Y+54, r24	; 0x36
        
        ret = lcd_send_4bit(lcd_obj, 0x02); // start operation in 4-bit mode
    23a2:	8f a9       	ldd	r24, Y+55	; 0x37
    23a4:	98 ad       	ldd	r25, Y+56	; 0x38
    23a6:	62 e0       	ldi	r22, 0x02	; 2
    23a8:	0e 94 82 15 	call	0x2b04	; 0x2b04 <lcd_send_4bit>
    23ac:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_CURSOR_OFF_DISPLAY_OFF);
    23ae:	8f a9       	ldd	r24, Y+55	; 0x37
    23b0:	98 ad       	ldd	r25, Y+56	; 0x38
    23b2:	68 e0       	ldi	r22, 0x08	; 8
    23b4:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    23b8:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_CLEAR);
    23ba:	8f a9       	ldd	r24, Y+55	; 0x37
    23bc:	98 ad       	ldd	r25, Y+56	; 0x38
    23be:	61 e0       	ldi	r22, 0x01	; 1
    23c0:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    23c4:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_RETURN_HOME);
    23c6:	8f a9       	ldd	r24, Y+55	; 0x37
    23c8:	98 ad       	ldd	r25, Y+56	; 0x38
    23ca:	62 e0       	ldi	r22, 0x02	; 2
    23cc:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    23d0:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_ENTRY_MODE_INC_NO_SHIFT);
    23d2:	8f a9       	ldd	r24, Y+55	; 0x37
    23d4:	98 ad       	ldd	r25, Y+56	; 0x38
    23d6:	66 e0       	ldi	r22, 0x06	; 6
    23d8:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    23dc:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_CURSOR_OFF_DISPLAY_ON);
    23de:	8f a9       	ldd	r24, Y+55	; 0x37
    23e0:	98 ad       	ldd	r25, Y+56	; 0x38
    23e2:	6c e0       	ldi	r22, 0x0C	; 12
    23e4:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    23e8:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS);  // Set DDRAM to address 0, start at row 1 column 1
    23ea:	8f a9       	ldd	r24, Y+55	; 0x37
    23ec:	98 ad       	ldd	r25, Y+56	; 0x38
    23ee:	60 e8       	ldi	r22, 0x80	; 128
    23f0:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    23f4:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_4BIT_MODE_2LINES_COMMAND);    // Set 4bit lcd mode
    23f6:	8f a9       	ldd	r24, Y+55	; 0x37
    23f8:	98 ad       	ldd	r25, Y+56	; 0x38
    23fa:	68 e2       	ldi	r22, 0x28	; 40
    23fc:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    2400:	8e ab       	std	Y+54, r24	; 0x36
    }
    return ret;
    2402:	8e a9       	ldd	r24, Y+54	; 0x36
}
    2404:	e8 96       	adiw	r28, 0x38	; 56
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <lcd_4bit_send_command>:
Std_ReturnType lcd_4bit_send_command(const char_lcd_t* lcd_obj, uint8 lcd_command)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	00 d0       	rcall	.+0      	; 0x241c <lcd_4bit_send_command+0x6>
    241c:	00 d0       	rcall	.+0      	; 0x241e <lcd_4bit_send_command+0x8>
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	9b 83       	std	Y+3, r25	; 0x03
    2424:	8a 83       	std	Y+2, r24	; 0x02
    2426:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType ret = E_NOT_OK;
    2428:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	9b 81       	ldd	r25, Y+3	; 0x03
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	11 f4       	brne	.+4      	; 0x2436 <lcd_4bit_send_command+0x20>
    {
        ret = E_NOT_OK;
    2432:	19 82       	std	Y+1, r1	; 0x01
    2434:	20 c0       	rjmp	.+64     	; 0x2476 <lcd_4bit_send_command+0x60>
    }
    else
    {
        ret = GPIO_pin_write_logic(&(lcd_obj->RS_pin), GPIO_LOW);
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	9b 81       	ldd	r25, Y+3	; 0x03
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	0e 94 ad 0c 	call	0x195a	; 0x195a <GPIO_pin_write_logic>
    2440:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_4bit(lcd_obj, (lcd_command >> 4));    // Send high Nibble
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
    2444:	28 2f       	mov	r18, r24
    2446:	22 95       	swap	r18
    2448:	2f 70       	andi	r18, 0x0F	; 15
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	9b 81       	ldd	r25, Y+3	; 0x03
    244e:	62 2f       	mov	r22, r18
    2450:	0e 94 82 15 	call	0x2b04	; 0x2b04 <lcd_send_4bit>
    2454:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_enable_signal(lcd_obj);               // Send enable signal
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	9b 81       	ldd	r25, Y+3	; 0x03
    245a:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <lcd_send_enable_signal>
    245e:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_4bit(lcd_obj, lcd_command);           // Send low Nibble
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	9b 81       	ldd	r25, Y+3	; 0x03
    2464:	6c 81       	ldd	r22, Y+4	; 0x04
    2466:	0e 94 82 15 	call	0x2b04	; 0x2b04 <lcd_send_4bit>
    246a:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_enable_signal(lcd_obj);               // Send enable signal
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	9b 81       	ldd	r25, Y+3	; 0x03
    2470:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <lcd_send_enable_signal>
    2474:	89 83       	std	Y+1, r24	; 0x01
    }
    
    return ret;
    2476:	89 81       	ldd	r24, Y+1	; 0x01
}
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <lcd_4bit_send_char_data>:
Std_ReturnType lcd_4bit_send_char_data(const char_lcd_t* lcd_obj, uint8 lcd_data)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	00 d0       	rcall	.+0      	; 0x248c <lcd_4bit_send_char_data+0x6>
    248c:	00 d0       	rcall	.+0      	; 0x248e <lcd_4bit_send_char_data+0x8>
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	9b 83       	std	Y+3, r25	; 0x03
    2494:	8a 83       	std	Y+2, r24	; 0x02
    2496:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType ret = E_NOT_OK;
    2498:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    249a:	8a 81       	ldd	r24, Y+2	; 0x02
    249c:	9b 81       	ldd	r25, Y+3	; 0x03
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	11 f4       	brne	.+4      	; 0x24a6 <lcd_4bit_send_char_data+0x20>
    {
        ret = E_NOT_OK;
    24a2:	19 82       	std	Y+1, r1	; 0x01
    24a4:	20 c0       	rjmp	.+64     	; 0x24e6 <lcd_4bit_send_char_data+0x60>
    }
    else
    {
        ret = GPIO_pin_write_logic(&(lcd_obj->RS_pin), GPIO_HIGH);
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	9b 81       	ldd	r25, Y+3	; 0x03
    24aa:	61 e0       	ldi	r22, 0x01	; 1
    24ac:	0e 94 ad 0c 	call	0x195a	; 0x195a <GPIO_pin_write_logic>
    24b0:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_4bit(lcd_obj, (lcd_data >> 4));       // Send high Nibble
    24b2:	8c 81       	ldd	r24, Y+4	; 0x04
    24b4:	28 2f       	mov	r18, r24
    24b6:	22 95       	swap	r18
    24b8:	2f 70       	andi	r18, 0x0F	; 15
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	9b 81       	ldd	r25, Y+3	; 0x03
    24be:	62 2f       	mov	r22, r18
    24c0:	0e 94 82 15 	call	0x2b04	; 0x2b04 <lcd_send_4bit>
    24c4:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_enable_signal(lcd_obj);               // Send enable signal
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ca:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <lcd_send_enable_signal>
    24ce:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_4bit(lcd_obj, lcd_data);              // Send low Nibble
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	9b 81       	ldd	r25, Y+3	; 0x03
    24d4:	6c 81       	ldd	r22, Y+4	; 0x04
    24d6:	0e 94 82 15 	call	0x2b04	; 0x2b04 <lcd_send_4bit>
    24da:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_enable_signal(lcd_obj);               // Send enable signal
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	9b 81       	ldd	r25, Y+3	; 0x03
    24e0:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <lcd_send_enable_signal>
    24e4:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <lcd_4bit_send_char_data_pos>:
Std_ReturnType lcd_4bit_send_char_data_pos(const char_lcd_t* lcd_obj, uint8 row, uint8 col, uint8 lcd_data)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <lcd_4bit_send_char_data_pos+0x6>
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <lcd_4bit_send_char_data_pos+0x8>
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <lcd_4bit_send_char_data_pos+0xa>
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	9b 83       	std	Y+3, r25	; 0x03
    2506:	8a 83       	std	Y+2, r24	; 0x02
    2508:	6c 83       	std	Y+4, r22	; 0x04
    250a:	4d 83       	std	Y+5, r20	; 0x05
    250c:	2e 83       	std	Y+6, r18	; 0x06
    Std_ReturnType ret = E_NOT_OK;
    250e:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	9b 81       	ldd	r25, Y+3	; 0x03
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	11 f4       	brne	.+4      	; 0x251c <lcd_4bit_send_char_data_pos+0x26>
    {
        ret = E_NOT_OK;
    2518:	19 82       	std	Y+1, r1	; 0x01
    251a:	0d c0       	rjmp	.+26     	; 0x2536 <lcd_4bit_send_char_data_pos+0x40>
    }
    else
    {
        ret = lcd_4bit_set_cursor_pos(lcd_obj, row, col);
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	9b 81       	ldd	r25, Y+3	; 0x03
    2520:	6c 81       	ldd	r22, Y+4	; 0x04
    2522:	4d 81       	ldd	r20, Y+5	; 0x05
    2524:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <lcd_4bit_set_cursor_pos>
    2528:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_4bit_send_char_data(lcd_obj, lcd_data);
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	9b 81       	ldd	r25, Y+3	; 0x03
    252e:	6e 81       	ldd	r22, Y+6	; 0x06
    2530:	0e 94 43 12 	call	0x2486	; 0x2486 <lcd_4bit_send_char_data>
    2534:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    2536:	89 81       	ldd	r24, Y+1	; 0x01
}
    2538:	26 96       	adiw	r28, 0x06	; 6
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	cd bf       	out	0x3d, r28	; 61
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	08 95       	ret

0000254a <lcd_4bit_send_string_data>:
Std_ReturnType lcd_4bit_send_string_data(const char_lcd_t* lcd_obj, uint8* str)
{
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	00 d0       	rcall	.+0      	; 0x2550 <lcd_4bit_send_string_data+0x6>
    2550:	00 d0       	rcall	.+0      	; 0x2552 <lcd_4bit_send_string_data+0x8>
    2552:	00 d0       	rcall	.+0      	; 0x2554 <lcd_4bit_send_string_data+0xa>
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	9c 83       	std	Y+4, r25	; 0x04
    255a:	8b 83       	std	Y+3, r24	; 0x03
    255c:	7e 83       	std	Y+6, r23	; 0x06
    255e:	6d 83       	std	Y+5, r22	; 0x05
    Std_ReturnType ret = E_NOT_OK;
    2560:	1a 82       	std	Y+2, r1	; 0x02
    uint8 index = ZERO_INIT;
    2562:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	a1 f4       	brne	.+40     	; 0x2594 <lcd_4bit_send_string_data+0x4a>
    {
        ret = E_NOT_OK;
    256c:	1a 82       	std	Y+2, r1	; 0x02
    256e:	1d c0       	rjmp	.+58     	; 0x25aa <lcd_4bit_send_string_data+0x60>
    }
    else
    {
        while('\0' != *(str+index))
        {
            ret = lcd_4bit_send_char_data(lcd_obj, *(str + index));
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	fc 01       	movw	r30, r24
    257c:	e2 0f       	add	r30, r18
    257e:	f3 1f       	adc	r31, r19
    2580:	20 81       	ld	r18, Z
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	9c 81       	ldd	r25, Y+4	; 0x04
    2586:	62 2f       	mov	r22, r18
    2588:	0e 94 43 12 	call	0x2486	; 0x2486 <lcd_4bit_send_char_data>
    258c:	8a 83       	std	Y+2, r24	; 0x02
            index++;
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	8f 5f       	subi	r24, 0xFF	; 255
    2592:	89 83       	std	Y+1, r24	; 0x01
    {
        ret = E_NOT_OK;
    }
    else
    {
        while('\0' != *(str+index))
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	fc 01       	movw	r30, r24
    25a0:	e2 0f       	add	r30, r18
    25a2:	f3 1f       	adc	r31, r19
    25a4:	80 81       	ld	r24, Z
    25a6:	88 23       	and	r24, r24
    25a8:	19 f7       	brne	.-58     	; 0x2570 <lcd_4bit_send_string_data+0x26>
        {
            ret = lcd_4bit_send_char_data(lcd_obj, *(str + index));
            index++;
        }     
    }
    return ret;
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    25ac:	26 96       	adiw	r28, 0x06	; 6
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	cd bf       	out	0x3d, r28	; 61
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <lcd_4bit_send_string_data_pos>:
Std_ReturnType lcd_4bit_send_string_data_pos(const char_lcd_t* lcd_obj, uint8 row, uint8 col, const uint8* str)
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	28 97       	sbiw	r28, 0x08	; 8
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	9c 83       	std	Y+4, r25	; 0x04
    25d4:	8b 83       	std	Y+3, r24	; 0x03
    25d6:	6d 83       	std	Y+5, r22	; 0x05
    25d8:	4e 83       	std	Y+6, r20	; 0x06
    25da:	38 87       	std	Y+8, r19	; 0x08
    25dc:	2f 83       	std	Y+7, r18	; 0x07
    Std_ReturnType ret = E_NOT_OK;
    25de:	1a 82       	std	Y+2, r1	; 0x02
    uint8 index = ZERO_INIT;
    25e0:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj || NULL == str)
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	9c 81       	ldd	r25, Y+4	; 0x04
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	21 f0       	breq	.+8      	; 0x25f2 <lcd_4bit_send_string_data_pos+0x34>
    25ea:	8f 81       	ldd	r24, Y+7	; 0x07
    25ec:	98 85       	ldd	r25, Y+8	; 0x08
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	11 f4       	brne	.+4      	; 0x25f6 <lcd_4bit_send_string_data_pos+0x38>
    {
        ret = E_NOT_OK;
    25f2:	1a 82       	std	Y+2, r1	; 0x02
    25f4:	25 c0       	rjmp	.+74     	; 0x2640 <lcd_4bit_send_string_data_pos+0x82>
    }
    else
    {
        ret = lcd_4bit_set_cursor_pos(lcd_obj, row, col);
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	9c 81       	ldd	r25, Y+4	; 0x04
    25fa:	6d 81       	ldd	r22, Y+5	; 0x05
    25fc:	4e 81       	ldd	r20, Y+6	; 0x06
    25fe:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <lcd_4bit_set_cursor_pos>
    2602:	8a 83       	std	Y+2, r24	; 0x02
    2604:	12 c0       	rjmp	.+36     	; 0x262a <lcd_4bit_send_string_data_pos+0x6c>
        while('\0' != *(str+index))
        {
            ret = lcd_4bit_send_char_data(lcd_obj, *(str + index));
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	8f 81       	ldd	r24, Y+7	; 0x07
    260e:	98 85       	ldd	r25, Y+8	; 0x08
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	20 81       	ld	r18, Z
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	9c 81       	ldd	r25, Y+4	; 0x04
    261c:	62 2f       	mov	r22, r18
    261e:	0e 94 43 12 	call	0x2486	; 0x2486 <lcd_4bit_send_char_data>
    2622:	8a 83       	std	Y+2, r24	; 0x02
            index++;
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	8f 5f       	subi	r24, 0xFF	; 255
    2628:	89 83       	std	Y+1, r24	; 0x01
        ret = E_NOT_OK;
    }
    else
    {
        ret = lcd_4bit_set_cursor_pos(lcd_obj, row, col);
        while('\0' != *(str+index))
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	8f 81       	ldd	r24, Y+7	; 0x07
    2632:	98 85       	ldd	r25, Y+8	; 0x08
    2634:	fc 01       	movw	r30, r24
    2636:	e2 0f       	add	r30, r18
    2638:	f3 1f       	adc	r31, r19
    263a:	80 81       	ld	r24, Z
    263c:	88 23       	and	r24, r24
    263e:	19 f7       	brne	.-58     	; 0x2606 <lcd_4bit_send_string_data_pos+0x48>
            ret = lcd_4bit_send_char_data(lcd_obj, *(str + index));
            index++;
        }   
    }
    
    return ret;
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2642:	28 96       	adiw	r28, 0x08	; 8
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	f8 94       	cli
    2648:	de bf       	out	0x3e, r29	; 62
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	cd bf       	out	0x3d, r28	; 61
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <lcd_4bit_send_custom_char>:
Std_ReturnType lcd_4bit_send_custom_char(const char_lcd_t* lcd_obj, uint8 row, uint8 col, const uint8 _char[], uint8 mem_pos)
{
    2654:	0f 93       	push	r16
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	29 97       	sbiw	r28, 0x09	; 9
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	f8 94       	cli
    2664:	de bf       	out	0x3e, r29	; 62
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	cd bf       	out	0x3d, r28	; 61
    266a:	9c 83       	std	Y+4, r25	; 0x04
    266c:	8b 83       	std	Y+3, r24	; 0x03
    266e:	6d 83       	std	Y+5, r22	; 0x05
    2670:	4e 83       	std	Y+6, r20	; 0x06
    2672:	38 87       	std	Y+8, r19	; 0x08
    2674:	2f 83       	std	Y+7, r18	; 0x07
    2676:	09 87       	std	Y+9, r16	; 0x09
    Std_ReturnType ret = E_NOT_OK;
    2678:	1a 82       	std	Y+2, r1	; 0x02
    uint8 l_counter = ZERO_INIT;
    267a:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	9c 81       	ldd	r25, Y+4	; 0x04
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	11 f4       	brne	.+4      	; 0x2688 <lcd_4bit_send_custom_char+0x34>
    {
        ret = E_NOT_OK;
    2684:	1a 82       	std	Y+2, r1	; 0x02
    2686:	30 c0       	rjmp	.+96     	; 0x26e8 <lcd_4bit_send_custom_char+0x94>
    }
    else
    {
        // set Address counter to CGRAM 
        ret = lcd_4bit_send_command(lcd_obj, (CGRAM_START_ADDRESS + (mem_pos * 8)));
    2688:	89 85       	ldd	r24, Y+9	; 0x09
    268a:	88 2f       	mov	r24, r24
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	08 96       	adiw	r24, 0x08	; 8
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	28 2f       	mov	r18, r24
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	9c 81       	ldd	r25, Y+4	; 0x04
    26a2:	62 2f       	mov	r22, r18
    26a4:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    26a8:	8a 83       	std	Y+2, r24	; 0x02
        // sending the special character pattern to save in CGRAM
        for(l_counter=0; l_counter < 8; ++l_counter)
    26aa:	19 82       	std	Y+1, r1	; 0x01
    26ac:	12 c0       	rjmp	.+36     	; 0x26d2 <lcd_4bit_send_custom_char+0x7e>
        {
            ret = lcd_4bit_send_char_data(lcd_obj, _char[l_counter]);
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	28 2f       	mov	r18, r24
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	8f 81       	ldd	r24, Y+7	; 0x07
    26b6:	98 85       	ldd	r25, Y+8	; 0x08
    26b8:	fc 01       	movw	r30, r24
    26ba:	e2 0f       	add	r30, r18
    26bc:	f3 1f       	adc	r31, r19
    26be:	20 81       	ld	r18, Z
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	9c 81       	ldd	r25, Y+4	; 0x04
    26c4:	62 2f       	mov	r22, r18
    26c6:	0e 94 43 12 	call	0x2486	; 0x2486 <lcd_4bit_send_char_data>
    26ca:	8a 83       	std	Y+2, r24	; 0x02
    else
    {
        // set Address counter to CGRAM 
        ret = lcd_4bit_send_command(lcd_obj, (CGRAM_START_ADDRESS + (mem_pos * 8)));
        // sending the special character pattern to save in CGRAM
        for(l_counter=0; l_counter < 8; ++l_counter)
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	8f 5f       	subi	r24, 0xFF	; 255
    26d0:	89 83       	std	Y+1, r24	; 0x01
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	88 30       	cpi	r24, 0x08	; 8
    26d6:	58 f3       	brcs	.-42     	; 0x26ae <lcd_4bit_send_custom_char+0x5a>
        {
            ret = lcd_4bit_send_char_data(lcd_obj, _char[l_counter]);
        }
        // Sending the Character Codes (DDRAM) that mapping Character Patterns (CGRAM Data)
        //0x00->1st character pattern, 0x01->2nd character pattern and so on.. until 0x07->eighth char pattern
        ret = lcd_4bit_send_char_data_pos(lcd_obj, row, col, mem_pos);
    26d8:	8b 81       	ldd	r24, Y+3	; 0x03
    26da:	9c 81       	ldd	r25, Y+4	; 0x04
    26dc:	6d 81       	ldd	r22, Y+5	; 0x05
    26de:	4e 81       	ldd	r20, Y+6	; 0x06
    26e0:	29 85       	ldd	r18, Y+9	; 0x09
    26e2:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <lcd_4bit_send_char_data_pos>
    26e6:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret;
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    26ea:	29 96       	adiw	r28, 0x09	; 9
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	0f 91       	pop	r16
    26fc:	08 95       	ret

000026fe <my_memset>:
 * @param ch
 * @param str_size
 * @return pointer to void type
 */
static void* my_memset(void* str, uint8 ch, uint8 str_size)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	00 d0       	rcall	.+0      	; 0x2704 <my_memset+0x6>
    2704:	00 d0       	rcall	.+0      	; 0x2706 <my_memset+0x8>
    2706:	00 d0       	rcall	.+0      	; 0x2708 <my_memset+0xa>
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	9b 83       	std	Y+3, r25	; 0x03
    270e:	8a 83       	std	Y+2, r24	; 0x02
    2710:	6c 83       	std	Y+4, r22	; 0x04
    2712:	4d 83       	std	Y+5, r20	; 0x05
    uint8 counter = 0;
    2714:	19 82       	std	Y+1, r1	; 0x01
    2716:	0d c0       	rjmp	.+26     	; 0x2732 <my_memset+0x34>
    while(str_size--)
    {
        *((uint8*)str + counter) = ch;
    2718:	2a 81       	ldd	r18, Y+2	; 0x02
    271a:	3b 81       	ldd	r19, Y+3	; 0x03
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	88 2f       	mov	r24, r24
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	f9 01       	movw	r30, r18
    2724:	e8 0f       	add	r30, r24
    2726:	f9 1f       	adc	r31, r25
    2728:	8c 81       	ldd	r24, Y+4	; 0x04
    272a:	80 83       	st	Z, r24
        counter++;
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	8f 5f       	subi	r24, 0xFF	; 255
    2730:	89 83       	std	Y+1, r24	; 0x01
 * @return pointer to void type
 */
static void* my_memset(void* str, uint8 ch, uint8 str_size)
{
    uint8 counter = 0;
    while(str_size--)
    2732:	8d 81       	ldd	r24, Y+5	; 0x05
    2734:	8e 83       	std	Y+6, r24	; 0x06
    2736:	8e 81       	ldd	r24, Y+6	; 0x06
    2738:	88 23       	and	r24, r24
    273a:	11 f0       	breq	.+4      	; 0x2740 <my_memset+0x42>
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	8e 83       	std	Y+6, r24	; 0x06
    2740:	8e 81       	ldd	r24, Y+6	; 0x06
    2742:	9d 81       	ldd	r25, Y+5	; 0x05
    2744:	91 50       	subi	r25, 0x01	; 1
    2746:	9d 83       	std	Y+5, r25	; 0x05
    2748:	88 23       	and	r24, r24
    274a:	31 f7       	brne	.-52     	; 0x2718 <my_memset+0x1a>
    {
        *((uint8*)str + counter) = ch;
        counter++;
    }
    return str;
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2750:	26 96       	adiw	r28, 0x06	; 6
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <LCD_convert_byte_to_string>:

Std_ReturnType LCD_convert_byte_to_string(uint8 data, uint8* str)
{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <LCD_convert_byte_to_string+0x6>
    2768:	00 d0       	rcall	.+0      	; 0x276a <LCD_convert_byte_to_string+0x8>
    276a:	00 d0       	rcall	.+0      	; 0x276c <LCD_convert_byte_to_string+0xa>
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	8c 83       	std	Y+4, r24	; 0x04
    2772:	7e 83       	std	Y+6, r23	; 0x06
    2774:	6d 83       	std	Y+5, r22	; 0x05
    // data range = 0:255. max size of the string is set to 4 (3 for data , 1 for '\0')
    Std_ReturnType ret = E_NOT_OK;
    2776:	1b 82       	std	Y+3, r1	; 0x03
    uint8 index = 0;
    2778:	1a 82       	std	Y+2, r1	; 0x02
    uint8 tens = 100;
    277a:	84 e6       	ldi	r24, 0x64	; 100
    277c:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == str)
    277e:	8d 81       	ldd	r24, Y+5	; 0x05
    2780:	9e 81       	ldd	r25, Y+6	; 0x06
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	11 f4       	brne	.+4      	; 0x278a <LCD_convert_byte_to_string+0x28>
    {
        ret = E_NOT_OK;
    2786:	1b 82       	std	Y+3, r1	; 0x03
    2788:	39 c0       	rjmp	.+114    	; 0x27fc <LCD_convert_byte_to_string+0x9a>
    }
    else
    {
        ret = E_OK;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	8b 83       	std	Y+3, r24	; 0x03
        str = (uint8* )my_memset(str, '\0', 4);
    278e:	8d 81       	ldd	r24, Y+5	; 0x05
    2790:	9e 81       	ldd	r25, Y+6	; 0x06
    2792:	60 e0       	ldi	r22, 0x00	; 0
    2794:	44 e0       	ldi	r20, 0x04	; 4
    2796:	0e 94 7f 13 	call	0x26fe	; 0x26fe <my_memset>
    279a:	9e 83       	std	Y+6, r25	; 0x06
    279c:	8d 83       	std	Y+5, r24	; 0x05
        // sprintf(str, "%i", data);    // this function return the number as string
        if (0 == data)
    279e:	8c 81       	ldd	r24, Y+4	; 0x04
    27a0:	88 23       	and	r24, r24
    27a2:	49 f5       	brne	.+82     	; 0x27f6 <LCD_convert_byte_to_string+0x94>
        {
            *(str) = 48;
    27a4:	ed 81       	ldd	r30, Y+5	; 0x05
    27a6:	fe 81       	ldd	r31, Y+6	; 0x06
    27a8:	80 e3       	ldi	r24, 0x30	; 48
    27aa:	80 83       	st	Z, r24
    27ac:	27 c0       	rjmp	.+78     	; 0x27fc <LCD_convert_byte_to_string+0x9a>
        }
        else
        {
             while (tens > 0)
            {
                if ((data / tens) > 0)
    27ae:	8c 81       	ldd	r24, Y+4	; 0x04
    27b0:	99 81       	ldd	r25, Y+1	; 0x01
    27b2:	69 2f       	mov	r22, r25
    27b4:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__udivmodqi4>
    27b8:	88 23       	and	r24, r24
    27ba:	b9 f0       	breq	.+46     	; 0x27ea <LCD_convert_byte_to_string+0x88>
                {
                    *(str + index) = ((data / tens) % 10) + 48;
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
    27be:	28 2f       	mov	r18, r24
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	8d 81       	ldd	r24, Y+5	; 0x05
    27c4:	9e 81       	ldd	r25, Y+6	; 0x06
    27c6:	fc 01       	movw	r30, r24
    27c8:	e2 0f       	add	r30, r18
    27ca:	f3 1f       	adc	r31, r19
    27cc:	8c 81       	ldd	r24, Y+4	; 0x04
    27ce:	99 81       	ldd	r25, Y+1	; 0x01
    27d0:	69 2f       	mov	r22, r25
    27d2:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__udivmodqi4>
    27d6:	9a e0       	ldi	r25, 0x0A	; 10
    27d8:	69 2f       	mov	r22, r25
    27da:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__udivmodqi4>
    27de:	89 2f       	mov	r24, r25
    27e0:	80 5d       	subi	r24, 0xD0	; 208
    27e2:	80 83       	st	Z, r24
                    index++;
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	8f 5f       	subi	r24, 0xFF	; 255
    27e8:	8a 83       	std	Y+2, r24	; 0x02
                }
                tens = tens / 10;
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a e0       	ldi	r25, 0x0A	; 10
    27ee:	69 2f       	mov	r22, r25
    27f0:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__udivmodqi4>
    27f4:	89 83       	std	Y+1, r24	; 0x01
        {
            *(str) = 48;
        }
        else
        {
             while (tens > 0)
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	88 23       	and	r24, r24
    27fa:	c9 f6       	brne	.-78     	; 0x27ae <LCD_convert_byte_to_string+0x4c>
                }
                tens = tens / 10;
            }
        }
    }
    return ret;
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    27fe:	26 96       	adiw	r28, 0x06	; 6
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <LCD_convert_short_to_string>:

Std_ReturnType LCD_convert_short_to_string(uint16 data, uint8* str)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	28 97       	sbiw	r28, 0x08	; 8
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	78 87       	std	Y+8, r23	; 0x08
    282a:	6f 83       	std	Y+7, r22	; 0x07
    // data range = 0:65535 max size of the string is set to 6 (5 for data , 1 for '\0')
    Std_ReturnType ret = E_NOT_OK;
    282c:	1c 82       	std	Y+4, r1	; 0x04
    uint8 index = 0;
    282e:	1b 82       	std	Y+3, r1	; 0x03
    uint16 tens = 10000;
    2830:	80 e1       	ldi	r24, 0x10	; 16
    2832:	97 e2       	ldi	r25, 0x27	; 39
    2834:	9a 83       	std	Y+2, r25	; 0x02
    2836:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == str)
    2838:	8f 81       	ldd	r24, Y+7	; 0x07
    283a:	98 85       	ldd	r25, Y+8	; 0x08
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	11 f4       	brne	.+4      	; 0x2844 <LCD_convert_short_to_string+0x34>
    {
        ret = E_NOT_OK;
    2840:	1c 82       	std	Y+4, r1	; 0x04
    2842:	4a c0       	rjmp	.+148    	; 0x28d8 <LCD_convert_short_to_string+0xc8>
    }
    else
    {
        ret = E_OK;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	8c 83       	std	Y+4, r24	; 0x04
        str = (uint8* )my_memset(str, ' ', 5);
    2848:	8f 81       	ldd	r24, Y+7	; 0x07
    284a:	98 85       	ldd	r25, Y+8	; 0x08
    284c:	60 e2       	ldi	r22, 0x20	; 32
    284e:	45 e0       	ldi	r20, 0x05	; 5
    2850:	0e 94 7f 13 	call	0x26fe	; 0x26fe <my_memset>
    2854:	98 87       	std	Y+8, r25	; 0x08
    2856:	8f 83       	std	Y+7, r24	; 0x07
        str[5] = '\0';
    2858:	8f 81       	ldd	r24, Y+7	; 0x07
    285a:	98 85       	ldd	r25, Y+8	; 0x08
    285c:	fc 01       	movw	r30, r24
    285e:	35 96       	adiw	r30, 0x05	; 5
    2860:	10 82       	st	Z, r1
        // sprintf(str, "%i", data);    // this function return the number as string
        if (0 == data)
    2862:	8d 81       	ldd	r24, Y+5	; 0x05
    2864:	9e 81       	ldd	r25, Y+6	; 0x06
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	99 f5       	brne	.+102    	; 0x28d0 <LCD_convert_short_to_string+0xc0>
        {
            *(str) = 48;
    286a:	ef 81       	ldd	r30, Y+7	; 0x07
    286c:	f8 85       	ldd	r31, Y+8	; 0x08
    286e:	80 e3       	ldi	r24, 0x30	; 48
    2870:	80 83       	st	Z, r24
    2872:	32 c0       	rjmp	.+100    	; 0x28d8 <LCD_convert_short_to_string+0xc8>
        }
        else
        {
             while (tens > 0)
            {
                if ((data / tens) > 0)
    2874:	8d 81       	ldd	r24, Y+5	; 0x05
    2876:	9e 81       	ldd	r25, Y+6	; 0x06
    2878:	29 81       	ldd	r18, Y+1	; 0x01
    287a:	3a 81       	ldd	r19, Y+2	; 0x02
    287c:	b9 01       	movw	r22, r18
    287e:	0e 94 77 18 	call	0x30ee	; 0x30ee <__udivmodhi4>
    2882:	cb 01       	movw	r24, r22
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	d1 f0       	breq	.+52     	; 0x28bc <LCD_convert_short_to_string+0xac>
                {
                    *(str + index) = ((data / tens) % 10) + 48;
    2888:	8b 81       	ldd	r24, Y+3	; 0x03
    288a:	28 2f       	mov	r18, r24
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	8f 81       	ldd	r24, Y+7	; 0x07
    2890:	98 85       	ldd	r25, Y+8	; 0x08
    2892:	fc 01       	movw	r30, r24
    2894:	e2 0f       	add	r30, r18
    2896:	f3 1f       	adc	r31, r19
    2898:	8d 81       	ldd	r24, Y+5	; 0x05
    289a:	9e 81       	ldd	r25, Y+6	; 0x06
    289c:	29 81       	ldd	r18, Y+1	; 0x01
    289e:	3a 81       	ldd	r19, Y+2	; 0x02
    28a0:	b9 01       	movw	r22, r18
    28a2:	0e 94 77 18 	call	0x30ee	; 0x30ee <__udivmodhi4>
    28a6:	cb 01       	movw	r24, r22
    28a8:	2a e0       	ldi	r18, 0x0A	; 10
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	b9 01       	movw	r22, r18
    28ae:	0e 94 77 18 	call	0x30ee	; 0x30ee <__udivmodhi4>
    28b2:	80 5d       	subi	r24, 0xD0	; 208
    28b4:	80 83       	st	Z, r24
                    index++;
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	8f 5f       	subi	r24, 0xFF	; 255
    28ba:	8b 83       	std	Y+3, r24	; 0x03
                }
                tens = tens / 10;
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	2a e0       	ldi	r18, 0x0A	; 10
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	b9 01       	movw	r22, r18
    28c6:	0e 94 77 18 	call	0x30ee	; 0x30ee <__udivmodhi4>
    28ca:	cb 01       	movw	r24, r22
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	89 83       	std	Y+1, r24	; 0x01
        {
            *(str) = 48;
        }
        else
        {
             while (tens > 0)
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	71 f6       	brne	.-100    	; 0x2874 <LCD_convert_short_to_string+0x64>
                }
                tens = tens / 10;
            }
        }
    }
    return ret;
    28d8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    28da:	28 96       	adiw	r28, 0x08	; 8
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <LCD_convert_int_to_string>:
    
Std_ReturnType LCD_convert_int_to_string(uint32 data, uint8* str)
{
    28ec:	0f 93       	push	r16
    28ee:	1f 93       	push	r17
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	2c 97       	sbiw	r28, 0x0c	; 12
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	6f 83       	std	Y+7, r22	; 0x07
    2906:	78 87       	std	Y+8, r23	; 0x08
    2908:	89 87       	std	Y+9, r24	; 0x09
    290a:	9a 87       	std	Y+10, r25	; 0x0a
    290c:	5c 87       	std	Y+12, r21	; 0x0c
    290e:	4b 87       	std	Y+11, r20	; 0x0b
    // data range = 0:4294967296 max size of the string is set to 11 (10 for data , 1 for '\0')
    Std_ReturnType ret = E_NOT_OK;
    2910:	1e 82       	std	Y+6, r1	; 0x06
    uint8 index = 0;
    2912:	1d 82       	std	Y+5, r1	; 0x05
    uint32 tens = 1000000000;
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	9a ec       	ldi	r25, 0xCA	; 202
    2918:	aa e9       	ldi	r26, 0x9A	; 154
    291a:	bb e3       	ldi	r27, 0x3B	; 59
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	9a 83       	std	Y+2, r25	; 0x02
    2920:	ab 83       	std	Y+3, r26	; 0x03
    2922:	bc 83       	std	Y+4, r27	; 0x04
    if (NULL == str)
    2924:	8b 85       	ldd	r24, Y+11	; 0x0b
    2926:	9c 85       	ldd	r25, Y+12	; 0x0c
    2928:	00 97       	sbiw	r24, 0x00	; 0
    292a:	11 f4       	brne	.+4      	; 0x2930 <LCD_convert_int_to_string+0x44>
    {
        ret = E_NOT_OK;
    292c:	1e 82       	std	Y+6, r1	; 0x06
    292e:	6b c0       	rjmp	.+214    	; 0x2a06 <LCD_convert_int_to_string+0x11a>
    }
    else
    {
        ret = E_OK;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	8e 83       	std	Y+6, r24	; 0x06
        str = (uint8* )my_memset(str, '\0', 11);
    2934:	8b 85       	ldd	r24, Y+11	; 0x0b
    2936:	9c 85       	ldd	r25, Y+12	; 0x0c
    2938:	60 e0       	ldi	r22, 0x00	; 0
    293a:	4b e0       	ldi	r20, 0x0B	; 11
    293c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <my_memset>
    2940:	9c 87       	std	Y+12, r25	; 0x0c
    2942:	8b 87       	std	Y+11, r24	; 0x0b
        // sprintf(str, "%i", data);    // this function return the number as string
        if (0 == data)
    2944:	8f 81       	ldd	r24, Y+7	; 0x07
    2946:	98 85       	ldd	r25, Y+8	; 0x08
    2948:	a9 85       	ldd	r26, Y+9	; 0x09
    294a:	ba 85       	ldd	r27, Y+10	; 0x0a
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	a1 05       	cpc	r26, r1
    2950:	b1 05       	cpc	r27, r1
    2952:	09 f0       	breq	.+2      	; 0x2956 <LCD_convert_int_to_string+0x6a>
    2954:	4f c0       	rjmp	.+158    	; 0x29f4 <LCD_convert_int_to_string+0x108>
        {
            *(str) = 48;
    2956:	eb 85       	ldd	r30, Y+11	; 0x0b
    2958:	fc 85       	ldd	r31, Y+12	; 0x0c
    295a:	80 e3       	ldi	r24, 0x30	; 48
    295c:	80 83       	st	Z, r24
    295e:	53 c0       	rjmp	.+166    	; 0x2a06 <LCD_convert_int_to_string+0x11a>
        }
        else
        {
             while (tens > 0)
            {
                if ((data / tens) > 0)
    2960:	8f 81       	ldd	r24, Y+7	; 0x07
    2962:	98 85       	ldd	r25, Y+8	; 0x08
    2964:	a9 85       	ldd	r26, Y+9	; 0x09
    2966:	ba 85       	ldd	r27, Y+10	; 0x0a
    2968:	29 81       	ldd	r18, Y+1	; 0x01
    296a:	3a 81       	ldd	r19, Y+2	; 0x02
    296c:	4b 81       	ldd	r20, Y+3	; 0x03
    296e:	5c 81       	ldd	r21, Y+4	; 0x04
    2970:	bc 01       	movw	r22, r24
    2972:	cd 01       	movw	r24, r26
    2974:	0e 94 8b 18 	call	0x3116	; 0x3116 <__udivmodsi4>
    2978:	da 01       	movw	r26, r20
    297a:	c9 01       	movw	r24, r18
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	a1 05       	cpc	r26, r1
    2980:	b1 05       	cpc	r27, r1
    2982:	31 f1       	breq	.+76     	; 0x29d0 <LCD_convert_int_to_string+0xe4>
                {
                    *(str + index) = ((data / tens) % 10) + 48;
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	8b 85       	ldd	r24, Y+11	; 0x0b
    298c:	9c 85       	ldd	r25, Y+12	; 0x0c
    298e:	8c 01       	movw	r16, r24
    2990:	02 0f       	add	r16, r18
    2992:	13 1f       	adc	r17, r19
    2994:	8f 81       	ldd	r24, Y+7	; 0x07
    2996:	98 85       	ldd	r25, Y+8	; 0x08
    2998:	a9 85       	ldd	r26, Y+9	; 0x09
    299a:	ba 85       	ldd	r27, Y+10	; 0x0a
    299c:	29 81       	ldd	r18, Y+1	; 0x01
    299e:	3a 81       	ldd	r19, Y+2	; 0x02
    29a0:	4b 81       	ldd	r20, Y+3	; 0x03
    29a2:	5c 81       	ldd	r21, Y+4	; 0x04
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	0e 94 8b 18 	call	0x3116	; 0x3116 <__udivmodsi4>
    29ac:	da 01       	movw	r26, r20
    29ae:	c9 01       	movw	r24, r18
    29b0:	2a e0       	ldi	r18, 0x0A	; 10
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 8b 18 	call	0x3116	; 0x3116 <__udivmodsi4>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	80 5d       	subi	r24, 0xD0	; 208
    29c6:	f8 01       	movw	r30, r16
    29c8:	80 83       	st	Z, r24
                    index++;
    29ca:	8d 81       	ldd	r24, Y+5	; 0x05
    29cc:	8f 5f       	subi	r24, 0xFF	; 255
    29ce:	8d 83       	std	Y+5, r24	; 0x05
                }
                tens = tens / 10;
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	9a 81       	ldd	r25, Y+2	; 0x02
    29d4:	ab 81       	ldd	r26, Y+3	; 0x03
    29d6:	bc 81       	ldd	r27, Y+4	; 0x04
    29d8:	2a e0       	ldi	r18, 0x0A	; 10
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	40 e0       	ldi	r20, 0x00	; 0
    29de:	50 e0       	ldi	r21, 0x00	; 0
    29e0:	bc 01       	movw	r22, r24
    29e2:	cd 01       	movw	r24, r26
    29e4:	0e 94 8b 18 	call	0x3116	; 0x3116 <__udivmodsi4>
    29e8:	da 01       	movw	r26, r20
    29ea:	c9 01       	movw	r24, r18
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	9a 83       	std	Y+2, r25	; 0x02
    29f0:	ab 83       	std	Y+3, r26	; 0x03
    29f2:	bc 83       	std	Y+4, r27	; 0x04
        {
            *(str) = 48;
        }
        else
        {
             while (tens > 0)
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	9a 81       	ldd	r25, Y+2	; 0x02
    29f8:	ab 81       	ldd	r26, Y+3	; 0x03
    29fa:	bc 81       	ldd	r27, Y+4	; 0x04
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	a1 05       	cpc	r26, r1
    2a00:	b1 05       	cpc	r27, r1
    2a02:	09 f0       	breq	.+2      	; 0x2a06 <LCD_convert_int_to_string+0x11a>
    2a04:	ad cf       	rjmp	.-166    	; 0x2960 <LCD_convert_int_to_string+0x74>
                }
                tens = tens / 10;
            }
        }
    }
    return ret;
    2a06:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2a08:	2c 96       	adiw	r28, 0x0c	; 12
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	08 95       	ret

00002a1e <lcd_4bit_set_cursor_pos>:
    return ret;
}

#elif (LCD_MODE == CHAR_LCD_4BIT_MODE)
static Std_ReturnType lcd_4bit_set_cursor_pos(const char_lcd_t* lcd_obj, uint8 row, uint8 col)
{
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	2b 97       	sbiw	r28, 0x0b	; 11
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	9f 83       	std	Y+7, r25	; 0x07
    2a34:	8e 83       	std	Y+6, r24	; 0x06
    2a36:	68 87       	std	Y+8, r22	; 0x08
    2a38:	49 87       	std	Y+9, r20	; 0x09
    Std_ReturnType ret = E_OK;
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	8d 83       	std	Y+5, r24	; 0x05
    col--;  // to ensure zero indexing
    2a3e:	89 85       	ldd	r24, Y+9	; 0x09
    2a40:	81 50       	subi	r24, 0x01	; 1
    2a42:	89 87       	std	Y+9, r24	; 0x09
    uint8 row1_offset = 0x00, 
    2a44:	1c 82       	std	Y+4, r1	; 0x04
            row2_offset = 0x40, 
    2a46:	80 e4       	ldi	r24, 0x40	; 64
    2a48:	8b 83       	std	Y+3, r24	; 0x03
            row3_offset = 0x14, 
    2a4a:	84 e1       	ldi	r24, 0x14	; 20
    2a4c:	8a 83       	std	Y+2, r24	; 0x02
            row4_offset = 0x40 + 0x14;
    2a4e:	84 e5       	ldi	r24, 0x54	; 84
    2a50:	89 83       	std	Y+1, r24	; 0x01
    switch(row)
    2a52:	88 85       	ldd	r24, Y+8	; 0x08
    2a54:	28 2f       	mov	r18, r24
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	3b 87       	std	Y+11, r19	; 0x0b
    2a5a:	2a 87       	std	Y+10, r18	; 0x0a
    2a5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a60:	82 30       	cpi	r24, 0x02	; 2
    2a62:	91 05       	cpc	r25, r1
    2a64:	11 f1       	breq	.+68     	; 0x2aaa <lcd_4bit_set_cursor_pos+0x8c>
    2a66:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a68:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a6a:	23 30       	cpi	r18, 0x03	; 3
    2a6c:	31 05       	cpc	r19, r1
    2a6e:	34 f4       	brge	.+12     	; 0x2a7c <lcd_4bit_set_cursor_pos+0x5e>
    2a70:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a72:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a74:	81 30       	cpi	r24, 0x01	; 1
    2a76:	91 05       	cpc	r25, r1
    2a78:	61 f0       	breq	.+24     	; 0x2a92 <lcd_4bit_set_cursor_pos+0x74>
    2a7a:	3a c0       	rjmp	.+116    	; 0x2af0 <lcd_4bit_set_cursor_pos+0xd2>
    2a7c:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a7e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a80:	23 30       	cpi	r18, 0x03	; 3
    2a82:	31 05       	cpc	r19, r1
    2a84:	f1 f0       	breq	.+60     	; 0x2ac2 <lcd_4bit_set_cursor_pos+0xa4>
    2a86:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a88:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a8a:	84 30       	cpi	r24, 0x04	; 4
    2a8c:	91 05       	cpc	r25, r1
    2a8e:	29 f1       	breq	.+74     	; 0x2ada <lcd_4bit_set_cursor_pos+0xbc>
    2a90:	2f c0       	rjmp	.+94     	; 0x2af0 <lcd_4bit_set_cursor_pos+0xd2>
    {
        case ROW1:
            ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS + row1_offset + col);    // 0x80 + col
    2a92:	9c 81       	ldd	r25, Y+4	; 0x04
    2a94:	89 85       	ldd	r24, Y+9	; 0x09
    2a96:	89 0f       	add	r24, r25
    2a98:	28 2f       	mov	r18, r24
    2a9a:	20 58       	subi	r18, 0x80	; 128
    2a9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a9e:	9f 81       	ldd	r25, Y+7	; 0x07
    2aa0:	62 2f       	mov	r22, r18
    2aa2:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    2aa6:	8d 83       	std	Y+5, r24	; 0x05
    2aa8:	23 c0       	rjmp	.+70     	; 0x2af0 <lcd_4bit_set_cursor_pos+0xd2>
            break;
        case ROW2:
            ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS + row2_offset + col);   // 0xC0 + col
    2aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    2aac:	89 85       	ldd	r24, Y+9	; 0x09
    2aae:	89 0f       	add	r24, r25
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	20 58       	subi	r18, 0x80	; 128
    2ab4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ab8:	62 2f       	mov	r22, r18
    2aba:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    2abe:	8d 83       	std	Y+5, r24	; 0x05
    2ac0:	17 c0       	rjmp	.+46     	; 0x2af0 <lcd_4bit_set_cursor_pos+0xd2>
            break;
        case ROW3:
            ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS + row3_offset + col); // 0x94 + col
    2ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac4:	89 85       	ldd	r24, Y+9	; 0x09
    2ac6:	89 0f       	add	r24, r25
    2ac8:	28 2f       	mov	r18, r24
    2aca:	20 58       	subi	r18, 0x80	; 128
    2acc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ace:	9f 81       	ldd	r25, Y+7	; 0x07
    2ad0:	62 2f       	mov	r22, r18
    2ad2:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    2ad6:	8d 83       	std	Y+5, r24	; 0x05
    2ad8:	0b c0       	rjmp	.+22     	; 0x2af0 <lcd_4bit_set_cursor_pos+0xd2>
            break;
        case ROW4:
            ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS + row4_offset + col); // 0xD4 + col
    2ada:	99 81       	ldd	r25, Y+1	; 0x01
    2adc:	89 85       	ldd	r24, Y+9	; 0x09
    2ade:	89 0f       	add	r24, r25
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	20 58       	subi	r18, 0x80	; 128
    2ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ae8:	62 2f       	mov	r22, r18
    2aea:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    2aee:	8d 83       	std	Y+5, r24	; 0x05
            break;
        default:
            break;
    }
    return ret;
    2af0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2af2:	2b 96       	adiw	r28, 0x0b	; 11
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	f8 94       	cli
    2af8:	de bf       	out	0x3e, r29	; 62
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	cd bf       	out	0x3d, r28	; 61
    2afe:	cf 91       	pop	r28
    2b00:	df 91       	pop	r29
    2b02:	08 95       	ret

00002b04 <lcd_send_4bit>:

static Std_ReturnType lcd_send_4bit(const char_lcd_t* lcd_obj, uint8 _data_command)
{
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	00 d0       	rcall	.+0      	; 0x2b0a <lcd_send_4bit+0x6>
    2b0a:	00 d0       	rcall	.+0      	; 0x2b0c <lcd_send_4bit+0x8>
    2b0c:	0f 92       	push	r0
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
    2b12:	9c 83       	std	Y+4, r25	; 0x04
    2b14:	8b 83       	std	Y+3, r24	; 0x03
    2b16:	6d 83       	std	Y+5, r22	; 0x05
    Std_ReturnType ret = E_NOT_OK;
    2b18:	1a 82       	std	Y+2, r1	; 0x02
    uint8 l_pin_counter = ZERO_INIT;
    2b1a:	19 82       	std	Y+1, r1	; 0x01
    for (l_pin_counter = 0; l_pin_counter < 4; l_pin_counter++)
    2b1c:	19 82       	std	Y+1, r1	; 0x01
    2b1e:	22 c0       	rjmp	.+68     	; 0x2b64 <lcd_send_4bit+0x60>
    {
        ret = GPIO_pin_write_logic(&(lcd_obj->lcd_data_pins[l_pin_counter]), ((_data_command >> l_pin_counter) & BIT_MASK));
    2b20:	8b 81       	ldd	r24, Y+3	; 0x03
    2b22:	9c 81       	ldd	r25, Y+4	; 0x04
    2b24:	9c 01       	movw	r18, r24
    2b26:	2e 5f       	subi	r18, 0xFE	; 254
    2b28:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	88 2f       	mov	r24, r24
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	a9 01       	movw	r20, r18
    2b32:	48 0f       	add	r20, r24
    2b34:	59 1f       	adc	r21, r25
    2b36:	8d 81       	ldd	r24, Y+5	; 0x05
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	88 2f       	mov	r24, r24
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	b9 01       	movw	r22, r18
    2b44:	02 c0       	rjmp	.+4      	; 0x2b4a <lcd_send_4bit+0x46>
    2b46:	75 95       	asr	r23
    2b48:	67 95       	ror	r22
    2b4a:	8a 95       	dec	r24
    2b4c:	e2 f7       	brpl	.-8      	; 0x2b46 <lcd_send_4bit+0x42>
    2b4e:	cb 01       	movw	r24, r22
    2b50:	28 2f       	mov	r18, r24
    2b52:	21 70       	andi	r18, 0x01	; 1
    2b54:	ca 01       	movw	r24, r20
    2b56:	62 2f       	mov	r22, r18
    2b58:	0e 94 ad 0c 	call	0x195a	; 0x195a <GPIO_pin_write_logic>
    2b5c:	8a 83       	std	Y+2, r24	; 0x02

static Std_ReturnType lcd_send_4bit(const char_lcd_t* lcd_obj, uint8 _data_command)
{
    Std_ReturnType ret = E_NOT_OK;
    uint8 l_pin_counter = ZERO_INIT;
    for (l_pin_counter = 0; l_pin_counter < 4; l_pin_counter++)
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	8f 5f       	subi	r24, 0xFF	; 255
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	84 30       	cpi	r24, 0x04	; 4
    2b68:	d8 f2       	brcs	.-74     	; 0x2b20 <lcd_send_4bit+0x1c>
    {
        ret = GPIO_pin_write_logic(&(lcd_obj->lcd_data_pins[l_pin_counter]), ((_data_command >> l_pin_counter) & BIT_MASK));
    }
    return ret;
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	0f 90       	pop	r0
    2b76:	cf 91       	pop	r28
    2b78:	df 91       	pop	r29
    2b7a:	08 95       	ret

00002b7c <lcd_send_enable_signal>:
#endif

static Std_ReturnType lcd_send_enable_signal(const char_lcd_t* lcd_obj)
{
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
    2b84:	6b 97       	sbiw	r28, 0x1b	; 27
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	9b 8f       	std	Y+27, r25	; 0x1b
    2b92:	8a 8f       	std	Y+26, r24	; 0x1a
    Std_ReturnType ret = E_OK;
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	89 8f       	std	Y+25, r24	; 0x19
    ret = GPIO_pin_write_logic(&(lcd_obj->E_pin), GPIO_HIGH);
    2b98:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b9a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b9c:	01 96       	adiw	r24, 0x01	; 1
    2b9e:	61 e0       	ldi	r22, 0x01	; 1
    2ba0:	0e 94 ad 0c 	call	0x195a	; 0x195a <GPIO_pin_write_logic>
    2ba4:	89 8f       	std	Y+25, r24	; 0x19
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	a0 ea       	ldi	r26, 0xA0	; 160
    2bac:	b0 e4       	ldi	r27, 0x40	; 64
    2bae:	8d 8b       	std	Y+21, r24	; 0x15
    2bb0:	9e 8b       	std	Y+22, r25	; 0x16
    2bb2:	af 8b       	std	Y+23, r26	; 0x17
    2bb4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2bba:	8f 89       	ldd	r24, Y+23	; 0x17
    2bbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2bbe:	2b ea       	ldi	r18, 0xAB	; 171
    2bc0:	3a ea       	ldi	r19, 0xAA	; 170
    2bc2:	4a e2       	ldi	r20, 0x2A	; 42
    2bc4:	50 e4       	ldi	r21, 0x40	; 64
    2bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	89 8b       	std	Y+17, r24	; 0x11
    2bd0:	9a 8b       	std	Y+18, r25	; 0x12
    2bd2:	ab 8b       	std	Y+19, r26	; 0x13
    2bd4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2bd6:	69 89       	ldd	r22, Y+17	; 0x11
    2bd8:	7a 89       	ldd	r23, Y+18	; 0x12
    2bda:	8b 89       	ldd	r24, Y+19	; 0x13
    2bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e8       	ldi	r20, 0x80	; 128
    2be4:	5f e3       	ldi	r21, 0x3F	; 63
    2be6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bea:	88 23       	and	r24, r24
    2bec:	1c f4       	brge	.+6      	; 0x2bf4 <lcd_send_enable_signal+0x78>
		__ticks = 1;
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	88 8b       	std	Y+16, r24	; 0x10
    2bf2:	91 c0       	rjmp	.+290    	; 0x2d16 <lcd_send_enable_signal+0x19a>
	else if (__tmp > 255)
    2bf4:	69 89       	ldd	r22, Y+17	; 0x11
    2bf6:	7a 89       	ldd	r23, Y+18	; 0x12
    2bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	4f e7       	ldi	r20, 0x7F	; 127
    2c02:	53 e4       	ldi	r21, 0x43	; 67
    2c04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c08:	18 16       	cp	r1, r24
    2c0a:	0c f0       	brlt	.+2      	; 0x2c0e <lcd_send_enable_signal+0x92>
    2c0c:	7b c0       	rjmp	.+246    	; 0x2d04 <lcd_send_enable_signal+0x188>
	{
		_delay_ms(__us / 1000.0);
    2c0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c10:	7e 89       	ldd	r23, Y+22	; 0x16
    2c12:	8f 89       	ldd	r24, Y+23	; 0x17
    2c14:	98 8d       	ldd	r25, Y+24	; 0x18
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	4a e7       	ldi	r20, 0x7A	; 122
    2c1c:	54 e4       	ldi	r21, 0x44	; 68
    2c1e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	8c 87       	std	Y+12, r24	; 0x0c
    2c28:	9d 87       	std	Y+13, r25	; 0x0d
    2c2a:	ae 87       	std	Y+14, r26	; 0x0e
    2c2c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c30:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c32:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c34:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	4a ef       	ldi	r20, 0xFA	; 250
    2c3c:	54 e4       	ldi	r21, 0x44	; 68
    2c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	88 87       	std	Y+8, r24	; 0x08
    2c48:	99 87       	std	Y+9, r25	; 0x09
    2c4a:	aa 87       	std	Y+10, r26	; 0x0a
    2c4c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c4e:	68 85       	ldd	r22, Y+8	; 0x08
    2c50:	79 85       	ldd	r23, Y+9	; 0x09
    2c52:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c54:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e8       	ldi	r20, 0x80	; 128
    2c5c:	5f e3       	ldi	r21, 0x3F	; 63
    2c5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c62:	88 23       	and	r24, r24
    2c64:	2c f4       	brge	.+10     	; 0x2c70 <lcd_send_enable_signal+0xf4>
		__ticks = 1;
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9f 83       	std	Y+7, r25	; 0x07
    2c6c:	8e 83       	std	Y+6, r24	; 0x06
    2c6e:	3f c0       	rjmp	.+126    	; 0x2cee <lcd_send_enable_signal+0x172>
	else if (__tmp > 65535)
    2c70:	68 85       	ldd	r22, Y+8	; 0x08
    2c72:	79 85       	ldd	r23, Y+9	; 0x09
    2c74:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c76:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	3f ef       	ldi	r19, 0xFF	; 255
    2c7c:	4f e7       	ldi	r20, 0x7F	; 127
    2c7e:	57 e4       	ldi	r21, 0x47	; 71
    2c80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c84:	18 16       	cp	r1, r24
    2c86:	4c f5       	brge	.+82     	; 0x2cda <lcd_send_enable_signal+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c88:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c8a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e2       	ldi	r20, 0x20	; 32
    2c96:	51 e4       	ldi	r21, 0x41	; 65
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	bc 01       	movw	r22, r24
    2ca2:	cd 01       	movw	r24, r26
    2ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	9f 83       	std	Y+7, r25	; 0x07
    2cae:	8e 83       	std	Y+6, r24	; 0x06
    2cb0:	0f c0       	rjmp	.+30     	; 0x2cd0 <lcd_send_enable_signal+0x154>
    2cb2:	88 ec       	ldi	r24, 0xC8	; 200
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	9d 83       	std	Y+5, r25	; 0x05
    2cb8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cba:	8c 81       	ldd	r24, Y+4	; 0x04
    2cbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	f1 f7       	brne	.-4      	; 0x2cbe <lcd_send_enable_signal+0x142>
    2cc2:	9d 83       	std	Y+5, r25	; 0x05
    2cc4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc6:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc8:	9f 81       	ldd	r25, Y+7	; 0x07
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	9f 83       	std	Y+7, r25	; 0x07
    2cce:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd0:	8e 81       	ldd	r24, Y+6	; 0x06
    2cd2:	9f 81       	ldd	r25, Y+7	; 0x07
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	69 f7       	brne	.-38     	; 0x2cb2 <lcd_send_enable_signal+0x136>
    2cd8:	24 c0       	rjmp	.+72     	; 0x2d22 <lcd_send_enable_signal+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cda:	68 85       	ldd	r22, Y+8	; 0x08
    2cdc:	79 85       	ldd	r23, Y+9	; 0x09
    2cde:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ce0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	9f 83       	std	Y+7, r25	; 0x07
    2cec:	8e 83       	std	Y+6, r24	; 0x06
    2cee:	8e 81       	ldd	r24, Y+6	; 0x06
    2cf0:	9f 81       	ldd	r25, Y+7	; 0x07
    2cf2:	9b 83       	std	Y+3, r25	; 0x03
    2cf4:	8a 83       	std	Y+2, r24	; 0x02
    2cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <lcd_send_enable_signal+0x17e>
    2cfe:	9b 83       	std	Y+3, r25	; 0x03
    2d00:	8a 83       	std	Y+2, r24	; 0x02
    2d02:	0f c0       	rjmp	.+30     	; 0x2d22 <lcd_send_enable_signal+0x1a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d04:	69 89       	ldd	r22, Y+17	; 0x11
    2d06:	7a 89       	ldd	r23, Y+18	; 0x12
    2d08:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	88 8b       	std	Y+16, r24	; 0x10
    2d16:	88 89       	ldd	r24, Y+16	; 0x10
    2d18:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	8a 95       	dec	r24
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <lcd_send_enable_signal+0x1a0>
    2d20:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
    ret = GPIO_pin_write_logic(&(lcd_obj->E_pin), GPIO_LOW);
    2d22:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d24:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d26:	01 96       	adiw	r24, 0x01	; 1
    2d28:	60 e0       	ldi	r22, 0x00	; 0
    2d2a:	0e 94 ad 0c 	call	0x195a	; 0x195a <GPIO_pin_write_logic>
    2d2e:	89 8f       	std	Y+25, r24	; 0x19
    return ret;
    2d30:	89 8d       	ldd	r24, Y+25	; 0x19
}
    2d32:	6b 96       	adiw	r28, 0x1b	; 27
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	08 95       	ret

00002d44 <Ultrasonic_Init>:

#include "Ultrasonic.h"

Std_ReturnType Ultrasonic_Init(const ultrasonic_t *_config){
    2d44:	df 93       	push	r29
    2d46:	cf 93       	push	r28
    2d48:	00 d0       	rcall	.+0      	; 0x2d4a <Ultrasonic_Init+0x6>
    2d4a:	0f 92       	push	r0
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	9b 83       	std	Y+3, r25	; 0x03
    2d52:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType ret = E_OK;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	89 83       	std	Y+1, r24	; 0x01
    
    if(NULL == _config){
    2d58:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5c:	00 97       	sbiw	r24, 0x00	; 0
    2d5e:	11 f4       	brne	.+4      	; 0x2d64 <Ultrasonic_Init+0x20>
        ret = E_NOT_OK;
    2d60:	19 82       	std	Y+1, r1	; 0x01
    2d62:	0e c0       	rjmp	.+28     	; 0x2d80 <Ultrasonic_Init+0x3c>
    }
    else{
        ret = GPIO_pin_initialize(&(_config->Trigger_Pin));
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	9b 81       	ldd	r25, Y+3	; 0x03
    2d68:	0e 94 43 0c 	call	0x1886	; 0x1886 <GPIO_pin_initialize>
    2d6c:	89 83       	std	Y+1, r24	; 0x01
        ret &= GPIO_pin_initialize(&(_config->Echo_Pin));
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	9b 81       	ldd	r25, Y+3	; 0x03
    2d72:	01 96       	adiw	r24, 0x01	; 1
    2d74:	0e 94 43 0c 	call	0x1886	; 0x1886 <GPIO_pin_initialize>
    2d78:	98 2f       	mov	r25, r24
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	89 23       	and	r24, r25
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    }
    
    return ret;
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d82:	0f 90       	pop	r0
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	cf 91       	pop	r28
    2d8a:	df 91       	pop	r29
    2d8c:	08 95       	ret

00002d8e <Ultrasonic_TriggerPin>:

Std_ReturnType Ultrasonic_TriggerPin(const ultrasonic_t *_config){
    2d8e:	df 93       	push	r29
    2d90:	cf 93       	push	r28
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	6b 97       	sbiw	r28, 0x1b	; 27
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	de bf       	out	0x3e, r29	; 62
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	cd bf       	out	0x3d, r28	; 61
    2da2:	9b 8f       	std	Y+27, r25	; 0x1b
    2da4:	8a 8f       	std	Y+26, r24	; 0x1a
    Std_ReturnType ret = E_OK;
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	89 8f       	std	Y+25, r24	; 0x19
    if(NULL == _config){
    2daa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dac:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2dae:	00 97       	sbiw	r24, 0x00	; 0
    2db0:	11 f4       	brne	.+4      	; 0x2db6 <Ultrasonic_TriggerPin+0x28>
        ret = E_NOT_OK;
    2db2:	19 8e       	std	Y+25, r1	; 0x19
    2db4:	ca c0       	rjmp	.+404    	; 0x2f4a <Ultrasonic_TriggerPin+0x1bc>
    }
    else{
        /* Send Trigger Signal to the Ultrasonic Trigger Pin */
        ret = GPIO_pin_write_logic(&(_config->Trigger_Pin), GPIO_HIGH);
    2db6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2db8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2dba:	61 e0       	ldi	r22, 0x01	; 1
    2dbc:	0e 94 ad 0c 	call	0x195a	; 0x195a <GPIO_pin_write_logic>
    2dc0:	89 8f       	std	Y+25, r24	; 0x19
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	a0 e2       	ldi	r26, 0x20	; 32
    2dc8:	b1 e4       	ldi	r27, 0x41	; 65
    2dca:	8d 8b       	std	Y+21, r24	; 0x15
    2dcc:	9e 8b       	std	Y+22, r25	; 0x16
    2dce:	af 8b       	std	Y+23, r26	; 0x17
    2dd0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2dd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2dd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dda:	2b ea       	ldi	r18, 0xAB	; 171
    2ddc:	3a ea       	ldi	r19, 0xAA	; 170
    2dde:	4a e2       	ldi	r20, 0x2A	; 42
    2de0:	50 e4       	ldi	r21, 0x40	; 64
    2de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	89 8b       	std	Y+17, r24	; 0x11
    2dec:	9a 8b       	std	Y+18, r25	; 0x12
    2dee:	ab 8b       	std	Y+19, r26	; 0x13
    2df0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2df2:	69 89       	ldd	r22, Y+17	; 0x11
    2df4:	7a 89       	ldd	r23, Y+18	; 0x12
    2df6:	8b 89       	ldd	r24, Y+19	; 0x13
    2df8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e8       	ldi	r20, 0x80	; 128
    2e00:	5f e3       	ldi	r21, 0x3F	; 63
    2e02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e06:	88 23       	and	r24, r24
    2e08:	1c f4       	brge	.+6      	; 0x2e10 <Ultrasonic_TriggerPin+0x82>
		__ticks = 1;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	88 8b       	std	Y+16, r24	; 0x10
    2e0e:	91 c0       	rjmp	.+290    	; 0x2f32 <Ultrasonic_TriggerPin+0x1a4>
	else if (__tmp > 255)
    2e10:	69 89       	ldd	r22, Y+17	; 0x11
    2e12:	7a 89       	ldd	r23, Y+18	; 0x12
    2e14:	8b 89       	ldd	r24, Y+19	; 0x13
    2e16:	9c 89       	ldd	r25, Y+20	; 0x14
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	4f e7       	ldi	r20, 0x7F	; 127
    2e1e:	53 e4       	ldi	r21, 0x43	; 67
    2e20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e24:	18 16       	cp	r1, r24
    2e26:	0c f0       	brlt	.+2      	; 0x2e2a <Ultrasonic_TriggerPin+0x9c>
    2e28:	7b c0       	rjmp	.+246    	; 0x2f20 <Ultrasonic_TriggerPin+0x192>
	{
		_delay_ms(__us / 1000.0);
    2e2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e30:	98 8d       	ldd	r25, Y+24	; 0x18
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	4a e7       	ldi	r20, 0x7A	; 122
    2e38:	54 e4       	ldi	r21, 0x44	; 68
    2e3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	8c 87       	std	Y+12, r24	; 0x0c
    2e44:	9d 87       	std	Y+13, r25	; 0x0d
    2e46:	ae 87       	std	Y+14, r26	; 0x0e
    2e48:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e4c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e50:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	4a ef       	ldi	r20, 0xFA	; 250
    2e58:	54 e4       	ldi	r21, 0x44	; 68
    2e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	88 87       	std	Y+8, r24	; 0x08
    2e64:	99 87       	std	Y+9, r25	; 0x09
    2e66:	aa 87       	std	Y+10, r26	; 0x0a
    2e68:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e6a:	68 85       	ldd	r22, Y+8	; 0x08
    2e6c:	79 85       	ldd	r23, Y+9	; 0x09
    2e6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e70:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e8       	ldi	r20, 0x80	; 128
    2e78:	5f e3       	ldi	r21, 0x3F	; 63
    2e7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e7e:	88 23       	and	r24, r24
    2e80:	2c f4       	brge	.+10     	; 0x2e8c <Ultrasonic_TriggerPin+0xfe>
		__ticks = 1;
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	9f 83       	std	Y+7, r25	; 0x07
    2e88:	8e 83       	std	Y+6, r24	; 0x06
    2e8a:	3f c0       	rjmp	.+126    	; 0x2f0a <Ultrasonic_TriggerPin+0x17c>
	else if (__tmp > 65535)
    2e8c:	68 85       	ldd	r22, Y+8	; 0x08
    2e8e:	79 85       	ldd	r23, Y+9	; 0x09
    2e90:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e92:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	3f ef       	ldi	r19, 0xFF	; 255
    2e98:	4f e7       	ldi	r20, 0x7F	; 127
    2e9a:	57 e4       	ldi	r21, 0x47	; 71
    2e9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ea0:	18 16       	cp	r1, r24
    2ea2:	4c f5       	brge	.+82     	; 0x2ef6 <Ultrasonic_TriggerPin+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea4:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ea6:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ea8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eaa:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	40 e2       	ldi	r20, 0x20	; 32
    2eb2:	51 e4       	ldi	r21, 0x41	; 65
    2eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	bc 01       	movw	r22, r24
    2ebe:	cd 01       	movw	r24, r26
    2ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	9f 83       	std	Y+7, r25	; 0x07
    2eca:	8e 83       	std	Y+6, r24	; 0x06
    2ecc:	0f c0       	rjmp	.+30     	; 0x2eec <Ultrasonic_TriggerPin+0x15e>
    2ece:	88 ec       	ldi	r24, 0xC8	; 200
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	9d 83       	std	Y+5, r25	; 0x05
    2ed4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	f1 f7       	brne	.-4      	; 0x2eda <Ultrasonic_TriggerPin+0x14c>
    2ede:	9d 83       	std	Y+5, r25	; 0x05
    2ee0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ee4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	9f 83       	std	Y+7, r25	; 0x07
    2eea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eec:	8e 81       	ldd	r24, Y+6	; 0x06
    2eee:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef0:	00 97       	sbiw	r24, 0x00	; 0
    2ef2:	69 f7       	brne	.-38     	; 0x2ece <Ultrasonic_TriggerPin+0x140>
    2ef4:	24 c0       	rjmp	.+72     	; 0x2f3e <Ultrasonic_TriggerPin+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef6:	68 85       	ldd	r22, Y+8	; 0x08
    2ef8:	79 85       	ldd	r23, Y+9	; 0x09
    2efa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2efc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	9f 83       	std	Y+7, r25	; 0x07
    2f08:	8e 83       	std	Y+6, r24	; 0x06
    2f0a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f0c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f0e:	9b 83       	std	Y+3, r25	; 0x03
    2f10:	8a 83       	std	Y+2, r24	; 0x02
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	9b 81       	ldd	r25, Y+3	; 0x03
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	f1 f7       	brne	.-4      	; 0x2f16 <Ultrasonic_TriggerPin+0x188>
    2f1a:	9b 83       	std	Y+3, r25	; 0x03
    2f1c:	8a 83       	std	Y+2, r24	; 0x02
    2f1e:	0f c0       	rjmp	.+30     	; 0x2f3e <Ultrasonic_TriggerPin+0x1b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f20:	69 89       	ldd	r22, Y+17	; 0x11
    2f22:	7a 89       	ldd	r23, Y+18	; 0x12
    2f24:	8b 89       	ldd	r24, Y+19	; 0x13
    2f26:	9c 89       	ldd	r25, Y+20	; 0x14
    2f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	88 8b       	std	Y+16, r24	; 0x10
    2f32:	88 89       	ldd	r24, Y+16	; 0x10
    2f34:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	8a 95       	dec	r24
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <Ultrasonic_TriggerPin+0x1aa>
    2f3c:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(10);
        ret = GPIO_pin_write_logic(&(_config->Trigger_Pin), GPIO_LOW);
    2f3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f40:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f42:	60 e0       	ldi	r22, 0x00	; 0
    2f44:	0e 94 ad 0c 	call	0x195a	; 0x195a <GPIO_pin_write_logic>
    2f48:	89 8f       	std	Y+25, r24	; 0x19
    }
    
    return ret;
    2f4a:	89 8d       	ldd	r24, Y+25	; 0x19
}
    2f4c:	6b 96       	adiw	r28, 0x1b	; 27
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	cf 91       	pop	r28
    2f5a:	df 91       	pop	r29
    2f5c:	08 95       	ret

00002f5e <Ultrasonic_getDistance>:

uint16 Ultrasonic_getDistance(const uint16 a_pulseLength)
{	//(SOUND_SPEED_CM_SECOND/2000000.0)
    2f5e:	df 93       	push	r29
    2f60:	cf 93       	push	r28
    2f62:	00 d0       	rcall	.+0      	; 0x2f64 <Ultrasonic_getDistance+0x6>
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	9a 83       	std	Y+2, r25	; 0x02
    2f6a:	89 83       	std	Y+1, r24	; 0x01
	return (uint16)(a_pulseLength / 58.8f);
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
    2f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f70:	cc 01       	movw	r24, r24
    2f72:	a0 e0       	ldi	r26, 0x00	; 0
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	bc 01       	movw	r22, r24
    2f84:	cd 01       	movw	r24, r26
    2f86:	23 e3       	ldi	r18, 0x33	; 51
    2f88:	33 e3       	ldi	r19, 0x33	; 51
    2f8a:	4b e6       	ldi	r20, 0x6B	; 107
    2f8c:	52 e4       	ldi	r21, 0x42	; 66
    2f8e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	bc 01       	movw	r22, r24
    2f98:	cd 01       	movw	r24, r26
    2f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
}
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	08 95       	ret

00002fac <HAL_init>:
		.Trigger_Pin={PORT_C, GPIO_PIN0, GPIO_DIRECTION_OUTPUT, GPIO_LOW},
		.Echo_Pin={PORT_C, GPIO_PIN1, GPIO_DIRECTION_INPUT}
};

Std_ReturnType HAL_init(void)
{
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
	ret = lcd_4bit_initialize(&g_lcdObj_4bitMode);
    2fb4:	89 ea       	ldi	r24, 0xA9	; 169
    2fb6:	91 e0       	ldi	r25, 0x01	; 1
    2fb8:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <lcd_4bit_initialize>
    2fbc:	80 93 a0 01 	sts	0x01A0, r24
	ret = Ultrasonic_Init(&g_ultrasonicObj);
    2fc0:	8f ea       	ldi	r24, 0xAF	; 175
    2fc2:	91 e0       	ldi	r25, 0x01	; 1
    2fc4:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <Ultrasonic_Init>
    2fc8:	80 93 a0 01 	sts	0x01A0, r24

	/* display welcome message */
	ret = lcd_4bit_send_string_data(&g_lcdObj_4bitMode, "Distance Measurement");
    2fcc:	89 ea       	ldi	r24, 0xA9	; 169
    2fce:	91 e0       	ldi	r25, 0x01	; 1
    2fd0:	20 e6       	ldi	r18, 0x60	; 96
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	b9 01       	movw	r22, r18
    2fd6:	0e 94 a5 12 	call	0x254a	; 0x254a <lcd_4bit_send_string_data>
    2fda:	80 93 a0 01 	sts	0x01A0, r24
	// move cursor to start from second line
	ret = lcd_4bit_send_command(&g_lcdObj_4bitMode, DDRAM_START_ADDRESS+ROW2_OFFSET);
    2fde:	89 ea       	ldi	r24, 0xA9	; 169
    2fe0:	91 e0       	ldi	r25, 0x01	; 1
    2fe2:	60 ec       	ldi	r22, 0xC0	; 192
    2fe4:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcd_4bit_send_command>
    2fe8:	80 93 a0 01 	sts	0x01A0, r24
	ret = lcd_4bit_send_string_data(&g_lcdObj_4bitMode, "Distance= ");
    2fec:	89 ea       	ldi	r24, 0xA9	; 169
    2fee:	91 e0       	ldi	r25, 0x01	; 1
    2ff0:	25 e7       	ldi	r18, 0x75	; 117
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	b9 01       	movw	r22, r18
    2ff6:	0e 94 a5 12 	call	0x254a	; 0x254a <lcd_4bit_send_string_data>
    2ffa:	80 93 a0 01 	sts	0x01A0, r24
	return ret;
    2ffe:	80 91 a0 01 	lds	r24, 0x01A0
}
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <main>:

uint16 distance;
uint8 distance_str[6] = {0};

int main(void)
{
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
	application_initialize();
    3010:	0e 94 2a 18 	call	0x3054	; 0x3054 <application_initialize>

	while(1)
	{
		distance = Ultrasonic_getDistance(g_icuTimeLaps);
    3014:	80 91 bb 01 	lds	r24, 0x01BB
    3018:	90 91 bc 01 	lds	r25, 0x01BC
    301c:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <Ultrasonic_getDistance>
    3020:	90 93 c4 01 	sts	0x01C4, r25
    3024:	80 93 c3 01 	sts	0x01C3, r24
		ret = LCD_convert_short_to_string(distance, &(distance_str[0]));
    3028:	80 91 c3 01 	lds	r24, 0x01C3
    302c:	90 91 c4 01 	lds	r25, 0x01C4
    3030:	2d eb       	ldi	r18, 0xBD	; 189
    3032:	31 e0       	ldi	r19, 0x01	; 1
    3034:	b9 01       	movw	r22, r18
    3036:	0e 94 08 14 	call	0x2810	; 0x2810 <LCD_convert_short_to_string>
    303a:	80 93 a0 01 	sts	0x01A0, r24
		ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 2, 11, &(distance_str[0]));
    303e:	89 ea       	ldi	r24, 0xA9	; 169
    3040:	91 e0       	ldi	r25, 0x01	; 1
    3042:	2d eb       	ldi	r18, 0xBD	; 189
    3044:	31 e0       	ldi	r19, 0x01	; 1
    3046:	62 e0       	ldi	r22, 0x02	; 2
    3048:	4b e0       	ldi	r20, 0x0B	; 11
    304a:	0e 94 df 12 	call	0x25be	; 0x25be <lcd_4bit_send_string_data_pos>
    304e:	80 93 a0 01 	sts	0x01A0, r24
    3052:	e0 cf       	rjmp	.-64     	; 0x3014 <main+0xc>

00003054 <application_initialize>:
	return 0;
}


void application_initialize(void)
{
    3054:	df 93       	push	r29
    3056:	cf 93       	push	r28
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
	ret = HAL_init();
    305c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <HAL_init>
    3060:	80 93 a0 01 	sts	0x01A0, r24
	ret = MCAL_init();
    3064:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <MCAL_init>
    3068:	80 93 a0 01 	sts	0x01A0, r24
}
    306c:	cf 91       	pop	r28
    306e:	df 91       	pop	r29
    3070:	08 95       	ret

00003072 <interrupt_callBackNotify>:


void interrupt_callBackNotify(void)
{
    3072:	df 93       	push	r29
    3074:	cf 93       	push	r28
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
	ret = Ultrasonic_TriggerPin(&g_ultrasonicObj);
    307a:	8f ea       	ldi	r24, 0xAF	; 175
    307c:	91 e0       	ldi	r25, 0x01	; 1
    307e:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <Ultrasonic_TriggerPin>
    3082:	80 93 a0 01 	sts	0x01A0, r24
}
    3086:	cf 91       	pop	r28
    3088:	df 91       	pop	r29
    308a:	08 95       	ret

0000308c <ICU_callBackNotify>:

void ICU_callBackNotify(void)
{
    308c:	df 93       	push	r29
    308e:	cf 93       	push	r28
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
	g_signalCaptureFlag++;
    3094:	80 91 ba 01 	lds	r24, 0x01BA
    3098:	8f 5f       	subi	r24, 0xFF	; 255
    309a:	80 93 ba 01 	sts	0x01BA, r24
	if(2 == g_signalCaptureFlag)
    309e:	80 91 ba 01 	lds	r24, 0x01BA
    30a2:	82 30       	cpi	r24, 0x02	; 2
    30a4:	61 f4       	brne	.+24     	; 0x30be <ICU_callBackNotify+0x32>
	{
		// take time lapse
		ret = ICU_getInputCaptureValue(&g_icuTimeLaps);
    30a6:	8b eb       	ldi	r24, 0xBB	; 187
    30a8:	91 e0       	ldi	r25, 0x01	; 1
    30aa:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <ICU_getInputCaptureValue>
    30ae:	80 93 a0 01 	sts	0x01A0, r24
		// convert edge to detect the next measurement
		ICU_setEdgeDetectionType(ICU_RISING_EDGE_DETECT);
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <ICU_setEdgeDetectionType>
		g_signalCaptureFlag = 0;
    30b8:	10 92 ba 01 	sts	0x01BA, r1
    30bc:	09 c0       	rjmp	.+18     	; 0x30d0 <ICU_callBackNotify+0x44>
	}
	else if(1 == g_signalCaptureFlag)
    30be:	80 91 ba 01 	lds	r24, 0x01BA
    30c2:	81 30       	cpi	r24, 0x01	; 1
    30c4:	29 f4       	brne	.+10     	; 0x30d0 <ICU_callBackNotify+0x44>
	{
		ICU_clearTimerValue();
    30c6:	0e 94 a9 0a 	call	0x1552	; 0x1552 <ICU_clearTimerValue>
		// convert edge detection to get a shot at signal falling edge
		ICU_setEdgeDetectionType(ICU_FALLING_EDGE_DETECT);
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	0e 94 4c 0a 	call	0x1498	; 0x1498 <ICU_setEdgeDetectionType>
	}
}
    30d0:	cf 91       	pop	r28
    30d2:	df 91       	pop	r29
    30d4:	08 95       	ret

000030d6 <__udivmodqi4>:
    30d6:	99 1b       	sub	r25, r25
    30d8:	79 e0       	ldi	r23, 0x09	; 9
    30da:	04 c0       	rjmp	.+8      	; 0x30e4 <__udivmodqi4_ep>

000030dc <__udivmodqi4_loop>:
    30dc:	99 1f       	adc	r25, r25
    30de:	96 17       	cp	r25, r22
    30e0:	08 f0       	brcs	.+2      	; 0x30e4 <__udivmodqi4_ep>
    30e2:	96 1b       	sub	r25, r22

000030e4 <__udivmodqi4_ep>:
    30e4:	88 1f       	adc	r24, r24
    30e6:	7a 95       	dec	r23
    30e8:	c9 f7       	brne	.-14     	; 0x30dc <__udivmodqi4_loop>
    30ea:	80 95       	com	r24
    30ec:	08 95       	ret

000030ee <__udivmodhi4>:
    30ee:	aa 1b       	sub	r26, r26
    30f0:	bb 1b       	sub	r27, r27
    30f2:	51 e1       	ldi	r21, 0x11	; 17
    30f4:	07 c0       	rjmp	.+14     	; 0x3104 <__udivmodhi4_ep>

000030f6 <__udivmodhi4_loop>:
    30f6:	aa 1f       	adc	r26, r26
    30f8:	bb 1f       	adc	r27, r27
    30fa:	a6 17       	cp	r26, r22
    30fc:	b7 07       	cpc	r27, r23
    30fe:	10 f0       	brcs	.+4      	; 0x3104 <__udivmodhi4_ep>
    3100:	a6 1b       	sub	r26, r22
    3102:	b7 0b       	sbc	r27, r23

00003104 <__udivmodhi4_ep>:
    3104:	88 1f       	adc	r24, r24
    3106:	99 1f       	adc	r25, r25
    3108:	5a 95       	dec	r21
    310a:	a9 f7       	brne	.-22     	; 0x30f6 <__udivmodhi4_loop>
    310c:	80 95       	com	r24
    310e:	90 95       	com	r25
    3110:	bc 01       	movw	r22, r24
    3112:	cd 01       	movw	r24, r26
    3114:	08 95       	ret

00003116 <__udivmodsi4>:
    3116:	a1 e2       	ldi	r26, 0x21	; 33
    3118:	1a 2e       	mov	r1, r26
    311a:	aa 1b       	sub	r26, r26
    311c:	bb 1b       	sub	r27, r27
    311e:	fd 01       	movw	r30, r26
    3120:	0d c0       	rjmp	.+26     	; 0x313c <__udivmodsi4_ep>

00003122 <__udivmodsi4_loop>:
    3122:	aa 1f       	adc	r26, r26
    3124:	bb 1f       	adc	r27, r27
    3126:	ee 1f       	adc	r30, r30
    3128:	ff 1f       	adc	r31, r31
    312a:	a2 17       	cp	r26, r18
    312c:	b3 07       	cpc	r27, r19
    312e:	e4 07       	cpc	r30, r20
    3130:	f5 07       	cpc	r31, r21
    3132:	20 f0       	brcs	.+8      	; 0x313c <__udivmodsi4_ep>
    3134:	a2 1b       	sub	r26, r18
    3136:	b3 0b       	sbc	r27, r19
    3138:	e4 0b       	sbc	r30, r20
    313a:	f5 0b       	sbc	r31, r21

0000313c <__udivmodsi4_ep>:
    313c:	66 1f       	adc	r22, r22
    313e:	77 1f       	adc	r23, r23
    3140:	88 1f       	adc	r24, r24
    3142:	99 1f       	adc	r25, r25
    3144:	1a 94       	dec	r1
    3146:	69 f7       	brne	.-38     	; 0x3122 <__udivmodsi4_loop>
    3148:	60 95       	com	r22
    314a:	70 95       	com	r23
    314c:	80 95       	com	r24
    314e:	90 95       	com	r25
    3150:	9b 01       	movw	r18, r22
    3152:	ac 01       	movw	r20, r24
    3154:	bd 01       	movw	r22, r26
    3156:	cf 01       	movw	r24, r30
    3158:	08 95       	ret

0000315a <__prologue_saves__>:
    315a:	2f 92       	push	r2
    315c:	3f 92       	push	r3
    315e:	4f 92       	push	r4
    3160:	5f 92       	push	r5
    3162:	6f 92       	push	r6
    3164:	7f 92       	push	r7
    3166:	8f 92       	push	r8
    3168:	9f 92       	push	r9
    316a:	af 92       	push	r10
    316c:	bf 92       	push	r11
    316e:	cf 92       	push	r12
    3170:	df 92       	push	r13
    3172:	ef 92       	push	r14
    3174:	ff 92       	push	r15
    3176:	0f 93       	push	r16
    3178:	1f 93       	push	r17
    317a:	cf 93       	push	r28
    317c:	df 93       	push	r29
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    3182:	ca 1b       	sub	r28, r26
    3184:	db 0b       	sbc	r29, r27
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	f8 94       	cli
    318a:	de bf       	out	0x3e, r29	; 62
    318c:	0f be       	out	0x3f, r0	; 63
    318e:	cd bf       	out	0x3d, r28	; 61
    3190:	09 94       	ijmp

00003192 <__epilogue_restores__>:
    3192:	2a 88       	ldd	r2, Y+18	; 0x12
    3194:	39 88       	ldd	r3, Y+17	; 0x11
    3196:	48 88       	ldd	r4, Y+16	; 0x10
    3198:	5f 84       	ldd	r5, Y+15	; 0x0f
    319a:	6e 84       	ldd	r6, Y+14	; 0x0e
    319c:	7d 84       	ldd	r7, Y+13	; 0x0d
    319e:	8c 84       	ldd	r8, Y+12	; 0x0c
    31a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    31a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    31a4:	b9 84       	ldd	r11, Y+9	; 0x09
    31a6:	c8 84       	ldd	r12, Y+8	; 0x08
    31a8:	df 80       	ldd	r13, Y+7	; 0x07
    31aa:	ee 80       	ldd	r14, Y+6	; 0x06
    31ac:	fd 80       	ldd	r15, Y+5	; 0x05
    31ae:	0c 81       	ldd	r16, Y+4	; 0x04
    31b0:	1b 81       	ldd	r17, Y+3	; 0x03
    31b2:	aa 81       	ldd	r26, Y+2	; 0x02
    31b4:	b9 81       	ldd	r27, Y+1	; 0x01
    31b6:	ce 0f       	add	r28, r30
    31b8:	d1 1d       	adc	r29, r1
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	ed 01       	movw	r28, r26
    31c6:	08 95       	ret

000031c8 <_exit>:
    31c8:	f8 94       	cli

000031ca <__stop_program>:
    31ca:	ff cf       	rjmp	.-2      	; 0x31ca <__stop_program>
