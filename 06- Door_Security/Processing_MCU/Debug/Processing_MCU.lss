
Processing_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  00002b5c  00002bf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008001a8  008001a8  00002d38  2**0
                  ALLOC
  3 .stab         00003af8  00000000  00000000  00002d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000029c4  00000000  00000000  00006830  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000091f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00009354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  0000950a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  0000b417  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000c4e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d51c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000d69c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000d982  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e278  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__vector_17>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3b       	cpi	r26, 0xB8	; 184
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8b 13 	call	0x2716	; 0x2716 <main>
      8a:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 85 15 	jmp	0x2b0a	; 0x2b0a <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__fixsfsi+0x80>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__fixsfsi+0x80>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__fixsfsi+0x8a>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__fixsfsi+0x94>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__fixsfsi+0x80>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__fixsfsi+0x8a>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__fixsfsi+0x94>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__fixsfsi+0x9c>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__fixsfsi+0x9c>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__fixsfsi+0x9c>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__fixsfsi+0x9c>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <USART_Init>:

static void set_baudRate(uint32 baudRate, uint8 usart_mode);
static void set_frame_size(uint8 char_size, uint8 parity);
/* ------------------------------ SW Functions Definitions ------------------------------ */
Std_ReturnType USART_Init(const usart_t* _obj)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <USART_Init+0x6>
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	9b 83       	std	Y+3, r25	; 0x03
     d7c:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _obj)
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	9b 81       	ldd	r25, Y+3	; 0x03
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	11 f4       	brne	.+4      	; 0xd8e <USART_Init+0x20>
	{
		ret = E_NOT_OK;
     d8a:	19 82       	std	Y+1, r1	; 0x01
     d8c:	3e c0       	rjmp	.+124    	; 0xe0a <USART_Init+0x9c>
	}
	else
	{
		// Disable RX and TX
		UCSRB = 0;
     d8e:	ea e2       	ldi	r30, 0x2A	; 42
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	10 82       	st	Z, r1
			USART_TX_INTERUPT_ENABLE();
			TX_interruptHandler = _obj->USART_TxInterruptHandler;
		}
#endif
		// BaudRate Configuration
		set_baudRate(_obj->baudrate, _obj->usart_mode);
     d94:	ea 81       	ldd	r30, Y+2	; 0x02
     d96:	fb 81       	ldd	r31, Y+3	; 0x03
     d98:	27 81       	ldd	r18, Z+7	; 0x07
     d9a:	30 85       	ldd	r19, Z+8	; 0x08
     d9c:	41 85       	ldd	r20, Z+9	; 0x09
     d9e:	52 85       	ldd	r21, Z+10	; 0x0a
     da0:	ea 81       	ldd	r30, Y+2	; 0x02
     da2:	fb 81       	ldd	r31, Y+3	; 0x03
     da4:	85 81       	ldd	r24, Z+5	; 0x05
     da6:	83 70       	andi	r24, 0x03	; 3
     da8:	e8 2f       	mov	r30, r24
     daa:	ca 01       	movw	r24, r20
     dac:	b9 01       	movw	r22, r18
     dae:	4e 2f       	mov	r20, r30
     db0:	0e 94 07 08 	call	0x100e	; 0x100e <set_baudRate>
		// Construct Frame Size
		set_frame_size(_obj->usart_character_size, _obj->usart_parity);
     db4:	ea 81       	ldd	r30, Y+2	; 0x02
     db6:	fb 81       	ldd	r31, Y+3	; 0x03
     db8:	84 81       	ldd	r24, Z+4	; 0x04
     dba:	82 95       	swap	r24
     dbc:	8f 70       	andi	r24, 0x0F	; 15
     dbe:	28 2f       	mov	r18, r24
     dc0:	ea 81       	ldd	r30, Y+2	; 0x02
     dc2:	fb 81       	ldd	r31, Y+3	; 0x03
     dc4:	85 81       	ldd	r24, Z+5	; 0x05
     dc6:	86 95       	lsr	r24
     dc8:	86 95       	lsr	r24
     dca:	83 70       	andi	r24, 0x03	; 3
     dcc:	98 2f       	mov	r25, r24
     dce:	82 2f       	mov	r24, r18
     dd0:	69 2f       	mov	r22, r25
     dd2:	0e 94 cd 08 	call	0x119a	; 0x119a <set_frame_size>
		// Enable USART Module
		if (_obj->usart_rx_enable == USART_RX_ENABLE)
     dd6:	ea 81       	ldd	r30, Y+2	; 0x02
     dd8:	fb 81       	ldd	r31, Y+3	; 0x03
     dda:	84 81       	ldd	r24, Z+4	; 0x04
     ddc:	81 70       	andi	r24, 0x01	; 1
     dde:	88 23       	and	r24, r24
     de0:	39 f0       	breq	.+14     	; 0xdf0 <USART_Init+0x82>
		{
			SET_BIT(UCSRB, RXEN);
     de2:	aa e2       	ldi	r26, 0x2A	; 42
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	ea e2       	ldi	r30, 0x2A	; 42
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	80 61       	ori	r24, 0x10	; 16
     dee:	8c 93       	st	X, r24
		}
		if(_obj->usart_tx_enable == USART_TX_ENABLE)
     df0:	ea 81       	ldd	r30, Y+2	; 0x02
     df2:	fb 81       	ldd	r31, Y+3	; 0x03
     df4:	84 81       	ldd	r24, Z+4	; 0x04
     df6:	84 70       	andi	r24, 0x04	; 4
     df8:	88 23       	and	r24, r24
     dfa:	39 f0       	breq	.+14     	; 0xe0a <USART_Init+0x9c>
		{
			SET_BIT(UCSRB, TXEN);
     dfc:	aa e2       	ldi	r26, 0x2A	; 42
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	ea e2       	ldi	r30, 0x2A	; 42
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	88 60       	ori	r24, 0x08	; 8
     e08:	8c 93       	st	X, r24
		}
	}
	return ret;
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <USART_Send_Byte_Blocking>:
Std_ReturnType USART_Send_Byte_Blocking(const uint8 _data_byte)
{
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <USART_Send_Byte_Blocking+0x6>
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	89 83       	std	Y+1, r24	; 0x01
	/* wait until TX buffer (UDR) is empty */
	while(!READ_BIT(UCSRA, UDRE));
     e28:	eb e2       	ldi	r30, 0x2B	; 43
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	82 95       	swap	r24
     e30:	86 95       	lsr	r24
     e32:	87 70       	andi	r24, 0x07	; 7
     e34:	88 2f       	mov	r24, r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	81 70       	andi	r24, 0x01	; 1
     e3a:	90 70       	andi	r25, 0x00	; 0
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	a1 f3       	breq	.-24     	; 0xe28 <USART_Send_Byte_Blocking+0x10>
	UDR = _data_byte;
     e40:	ec e2       	ldi	r30, 0x2C	; 44
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	80 83       	st	Z, r24
	/* wait until TX shift register is empty (Transmission complete) */
	while(!READ_BIT(UCSRA, TXC));
     e48:	eb e2       	ldi	r30, 0x2B	; 43
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	82 95       	swap	r24
     e50:	86 95       	lsr	r24
     e52:	86 95       	lsr	r24
     e54:	83 70       	andi	r24, 0x03	; 3
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	81 70       	andi	r24, 0x01	; 1
     e5c:	90 70       	andi	r25, 0x00	; 0
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	99 f3       	breq	.-26     	; 0xe48 <USART_Send_Byte_Blocking+0x30>
	/* Clear USART Transmit Complete flag */
	SET_BIT(UCSRA, TXC);
     e62:	ab e2       	ldi	r26, 0x2B	; 43
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	eb e2       	ldi	r30, 0x2B	; 43
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	80 64       	ori	r24, 0x40	; 64
     e6e:	8c 93       	st	X, r24
	return ret;
     e70:	89 81       	ldd	r24, Y+1	; 0x01
}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <USART_Receive_Byte_Blocking>:
Std_ReturnType USART_Receive_Byte_Blocking(usart_t* _obj, uint8* _data_byte)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <USART_Receive_Byte_Blocking+0x6>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <USART_Receive_Byte_Blocking+0x8>
     e84:	0f 92       	push	r0
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	9b 83       	std	Y+3, r25	; 0x03
     e8c:	8a 83       	std	Y+2, r24	; 0x02
     e8e:	7d 83       	std	Y+5, r23	; 0x05
     e90:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _obj || NULL == _data_byte)
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	9b 81       	ldd	r25, Y+3	; 0x03
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	21 f0       	breq	.+8      	; 0xea6 <USART_Receive_Byte_Blocking+0x2a>
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	9d 81       	ldd	r25, Y+5	; 0x05
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	11 f4       	brne	.+4      	; 0xeaa <USART_Receive_Byte_Blocking+0x2e>
	{
		ret = E_NOT_OK;
     ea6:	19 82       	std	Y+1, r1	; 0x01
     ea8:	25 c0       	rjmp	.+74     	; 0xef4 <USART_Receive_Byte_Blocking+0x78>
	}
	else
	{
		/* wait until received byte loaded in RX buffer (UDR) */
		while(!READ_BIT(UCSRA, RXC));
     eaa:	eb e2       	ldi	r30, 0x2B	; 43
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 23       	and	r24, r24
     eb2:	dc f7       	brge	.-10     	; 0xeaa <USART_Receive_Byte_Blocking+0x2e>
		/* Reading flags for error checking */
		_obj->error_status.flag_status = UCSRA;
     eb4:	eb e2       	ldi	r30, 0x2B	; 43
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	ea 81       	ldd	r30, Y+2	; 0x02
     ebc:	fb 81       	ldd	r31, Y+3	; 0x03
     ebe:	86 83       	std	Z+6, r24	; 0x06
		if(_obj->error_status.usart_dov || _obj->error_status.usart_ferr || _obj->error_status.usart_pe)
     ec0:	ea 81       	ldd	r30, Y+2	; 0x02
     ec2:	fb 81       	ldd	r31, Y+3	; 0x03
     ec4:	86 81       	ldd	r24, Z+6	; 0x06
     ec6:	88 70       	andi	r24, 0x08	; 8
     ec8:	88 23       	and	r24, r24
     eca:	61 f4       	brne	.+24     	; 0xee4 <USART_Receive_Byte_Blocking+0x68>
     ecc:	ea 81       	ldd	r30, Y+2	; 0x02
     ece:	fb 81       	ldd	r31, Y+3	; 0x03
     ed0:	86 81       	ldd	r24, Z+6	; 0x06
     ed2:	80 71       	andi	r24, 0x10	; 16
     ed4:	88 23       	and	r24, r24
     ed6:	31 f4       	brne	.+12     	; 0xee4 <USART_Receive_Byte_Blocking+0x68>
     ed8:	ea 81       	ldd	r30, Y+2	; 0x02
     eda:	fb 81       	ldd	r31, Y+3	; 0x03
     edc:	86 81       	ldd	r24, Z+6	; 0x06
     ede:	84 70       	andi	r24, 0x04	; 4
     ee0:	88 23       	and	r24, r24
     ee2:	11 f0       	breq	.+4      	; 0xee8 <USART_Receive_Byte_Blocking+0x6c>
		{	// some error occur
			ret = E_NOT_OK;
     ee4:	19 82       	std	Y+1, r1	; 0x01
     ee6:	06 c0       	rjmp	.+12     	; 0xef4 <USART_Receive_Byte_Blocking+0x78>
		}
		else
		{	// no error detected.
			*_data_byte = UDR;
     ee8:	ec e2       	ldi	r30, 0x2C	; 44
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	ec 81       	ldd	r30, Y+4	; 0x04
     ef0:	fd 81       	ldd	r31, Y+5	; 0x05
     ef2:	80 83       	st	Z, r24
		}
	}
	return ret;
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <USART_sendString_Blocking>:
Std_ReturnType USART_sendString_Blocking(const uint8 *Str)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <USART_sendString_Blocking+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <USART_sendString_Blocking+0x8>
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	9c 83       	std	Y+4, r25	; 0x04
     f14:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType ret = E_OK;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	8a 83       	std	Y+2, r24	; 0x02
	uint8 str_index = 0;
     f1a:	19 82       	std	Y+1, r1	; 0x01
     f1c:	0e c0       	rjmp	.+28     	; 0xf3a <USART_sendString_Blocking+0x34>
	while('\0' != Str[str_index])
	{
		USART_Send_Byte_Blocking(Str[str_index]);
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	9c 81       	ldd	r25, Y+4	; 0x04
     f28:	fc 01       	movw	r30, r24
     f2a:	e2 0f       	add	r30, r18
     f2c:	f3 1f       	adc	r31, r19
     f2e:	80 81       	ld	r24, Z
     f30:	0e 94 0c 07 	call	0xe18	; 0xe18 <USART_Send_Byte_Blocking>
		str_index++;
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	89 83       	std	Y+1, r24	; 0x01
}
Std_ReturnType USART_sendString_Blocking(const uint8 *Str)
{
	Std_ReturnType ret = E_OK;
	uint8 str_index = 0;
	while('\0' != Str[str_index])
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	fc 01       	movw	r30, r24
     f46:	e2 0f       	add	r30, r18
     f48:	f3 1f       	adc	r31, r19
     f4a:	80 81       	ld	r24, Z
     f4c:	88 23       	and	r24, r24
     f4e:	39 f7       	brne	.-50     	; 0xf1e <USART_sendString_Blocking+0x18>
	{
		USART_Send_Byte_Blocking(Str[str_index]);
		str_index++;
	}
	return ret;
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <USART_receiveString_Blocking>:
Std_ReturnType USART_receiveString_Blocking(usart_t* _obj, uint8 *Str)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <USART_receiveString_Blocking+0x6>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <USART_receiveString_Blocking+0x8>
     f68:	00 d0       	rcall	.+0      	; 0xf6a <USART_receiveString_Blocking+0xa>
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	9c 83       	std	Y+4, r25	; 0x04
     f70:	8b 83       	std	Y+3, r24	; 0x03
     f72:	7e 83       	std	Y+6, r23	; 0x06
     f74:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType ret = E_OK;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	8a 83       	std	Y+2, r24	; 0x02
	uint8 str_index = 0;
     f7a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == _obj || NULL == Str)
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	9c 81       	ldd	r25, Y+4	; 0x04
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	21 f0       	breq	.+8      	; 0xf8c <USART_receiveString_Blocking+0x2c>
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	11 f4       	brne	.+4      	; 0xf90 <USART_receiveString_Blocking+0x30>
	{
		ret = E_NOT_OK;
     f8c:	1a 82       	std	Y+2, r1	; 0x02
     f8e:	35 c0       	rjmp	.+106    	; 0xffa <USART_receiveString_Blocking+0x9a>
	}
	else
	{
		ret = USART_Receive_Byte_Blocking(_obj, &Str[str_index]);
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	28 0f       	add	r18, r24
     f9c:	39 1f       	adc	r19, r25
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	b9 01       	movw	r22, r18
     fa4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <USART_Receive_Byte_Blocking>
     fa8:	8a 83       	std	Y+2, r24	; 0x02
     faa:	13 c0       	rjmp	.+38     	; 0xfd2 <USART_receiveString_Blocking+0x72>
		while('#' != Str[str_index])
		{
			str_index++;
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	8f 5f       	subi	r24, 0xFF	; 255
     fb0:	89 83       	std	Y+1, r24	; 0x01
			ret = USART_Receive_Byte_Blocking(_obj, &Str[str_index]);
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	8d 81       	ldd	r24, Y+5	; 0x05
     fba:	9e 81       	ldd	r25, Y+6	; 0x06
     fbc:	28 0f       	add	r18, r24
     fbe:	39 1f       	adc	r19, r25
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	b9 01       	movw	r22, r18
     fc6:	0e 94 3e 07 	call	0xe7c	; 0xe7c <USART_Receive_Byte_Blocking>
     fca:	8a 83       	std	Y+2, r24	; 0x02
			if(E_NOT_OK == ret)
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 23       	and	r24, r24
     fd0:	59 f0       	breq	.+22     	; 0xfe8 <USART_receiveString_Blocking+0x88>
		ret = E_NOT_OK;
	}
	else
	{
		ret = USART_Receive_Byte_Blocking(_obj, &Str[str_index]);
		while('#' != Str[str_index])
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	fc 01       	movw	r30, r24
     fde:	e2 0f       	add	r30, r18
     fe0:	f3 1f       	adc	r31, r19
     fe2:	80 81       	ld	r24, Z
     fe4:	83 32       	cpi	r24, 0x23	; 35
     fe6:	11 f7       	brne	.-60     	; 0xfac <USART_receiveString_Blocking+0x4c>
			if(E_NOT_OK == ret)
			{
				break;
			}
		}
		Str[str_index] = '\0';
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	9e 81       	ldd	r25, Y+6	; 0x06
     ff2:	fc 01       	movw	r30, r24
     ff4:	e2 0f       	add	r30, r18
     ff6:	f3 1f       	adc	r31, r19
     ff8:	10 82       	st	Z, r1
	}
	return ret;
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ffc:	26 96       	adiw	r28, 0x06	; 6
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <set_baudRate>:
		TX_interruptHandler();
}
#endif	//

static void set_baudRate(uint32 baudRate, uint8 usart_mode)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	29 97       	sbiw	r28, 0x09	; 9
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	6b 83       	std	Y+3, r22	; 0x03
    1024:	7c 83       	std	Y+4, r23	; 0x04
    1026:	8d 83       	std	Y+5, r24	; 0x05
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	4f 83       	std	Y+7, r20	; 0x07
	uint16 baud_reg = 0;
    102c:	1a 82       	std	Y+2, r1	; 0x02
    102e:	19 82       	std	Y+1, r1	; 0x01
	switch(usart_mode)
    1030:	8f 81       	ldd	r24, Y+7	; 0x07
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	39 87       	std	Y+9, r19	; 0x09
    1038:	28 87       	std	Y+8, r18	; 0x08
    103a:	88 85       	ldd	r24, Y+8	; 0x08
    103c:	99 85       	ldd	r25, Y+9	; 0x09
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	91 05       	cpc	r25, r1
    1042:	79 f1       	breq	.+94     	; 0x10a2 <set_baudRate+0x94>
    1044:	28 85       	ldd	r18, Y+8	; 0x08
    1046:	39 85       	ldd	r19, Y+9	; 0x09
    1048:	22 30       	cpi	r18, 0x02	; 2
    104a:	31 05       	cpc	r19, r1
    104c:	09 f0       	breq	.+2      	; 0x1050 <set_baudRate+0x42>
    104e:	5d c0       	rjmp	.+186    	; 0x110a <set_baudRate+0xfc>
	{
	case USART_SYNC_MODE:	UCSRC |= ((1 << URSEL) | (1 << UMSEL));
    1050:	a0 e4       	ldi	r26, 0x40	; 64
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e0 e4       	ldi	r30, 0x40	; 64
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 6c       	ori	r24, 0xC0	; 192
    105c:	8c 93       	st	X, r24
		baud_reg = (uint16)(F_CPU / (2.0*baudRate)) -1;
    105e:	6b 81       	ldd	r22, Y+3	; 0x03
    1060:	7c 81       	ldd	r23, Y+4	; 0x04
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    106a:	9b 01       	movw	r18, r22
    106c:	ac 01       	movw	r20, r24
    106e:	ca 01       	movw	r24, r20
    1070:	b9 01       	movw	r22, r18
    1072:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	9c 01       	movw	r18, r24
    107c:	ad 01       	movw	r20, r26
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	74 e2       	ldi	r23, 0x24	; 36
    1082:	84 ef       	ldi	r24, 0xF4	; 244
    1084:	9a e4       	ldi	r25, 0x4A	; 74
    1086:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	9a 83       	std	Y+2, r25	; 0x02
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	67 c0       	rjmp	.+206    	; 0x1170 <set_baudRate+0x162>
		break;
	case USART_ASYNC_DOUBLE_SPEED_MODE:	UCSRC |= ((1 << URSEL) & ~(1 << UMSEL));
    10a2:	a0 e4       	ldi	r26, 0x40	; 64
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e0 e4       	ldi	r30, 0x40	; 64
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	80 68       	ori	r24, 0x80	; 128
    10ae:	8c 93       	st	X, r24
		SET_BIT(UCSRA, U2X);						// ASYNC in Double Speed
    10b0:	ab e2       	ldi	r26, 0x2B	; 43
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	eb e2       	ldi	r30, 0x2B	; 43
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	82 60       	ori	r24, 0x02	; 2
    10bc:	8c 93       	st	X, r24
		baud_reg = (uint16)(F_CPU / (8.0*baudRate)) -1;
    10be:	6b 81       	ldd	r22, Y+3	; 0x03
    10c0:	7c 81       	ldd	r23, Y+4	; 0x04
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
    10c4:	9e 81       	ldd	r25, Y+6	; 0x06
    10c6:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	bc 01       	movw	r22, r24
    10d0:	cd 01       	movw	r24, r26
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	51 e4       	ldi	r21, 0x41	; 65
    10da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	9c 01       	movw	r18, r24
    10e4:	ad 01       	movw	r20, r26
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	74 e2       	ldi	r23, 0x24	; 36
    10ea:	84 ef       	ldi	r24, 0xF4	; 244
    10ec:	9a e4       	ldi	r25, 0x4A	; 74
    10ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	9a 83       	std	Y+2, r25	; 0x02
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	33 c0       	rjmp	.+102    	; 0x1170 <set_baudRate+0x162>
		break;
	default:	UCSRC |= ((1 << URSEL) & ~(1 << UMSEL));
    110a:	a0 e4       	ldi	r26, 0x40	; 64
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e0 e4       	ldi	r30, 0x40	; 64
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	80 68       	ori	r24, 0x80	; 128
    1116:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRA, U2X);						// ASYNC Normal Mode
    1118:	ab e2       	ldi	r26, 0x2B	; 43
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	eb e2       	ldi	r30, 0x2B	; 43
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8d 7f       	andi	r24, 0xFD	; 253
    1124:	8c 93       	st	X, r24
		baud_reg = (uint16)(F_CPU / (16.0*baudRate)) -1;
    1126:	6b 81       	ldd	r22, Y+3	; 0x03
    1128:	7c 81       	ldd	r23, Y+4	; 0x04
    112a:	8d 81       	ldd	r24, Y+5	; 0x05
    112c:	9e 81       	ldd	r25, Y+6	; 0x06
    112e:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e8       	ldi	r20, 0x80	; 128
    1140:	51 e4       	ldi	r21, 0x41	; 65
    1142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	9c 01       	movw	r18, r24
    114c:	ad 01       	movw	r20, r26
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	74 e2       	ldi	r23, 0x24	; 36
    1152:	84 ef       	ldi	r24, 0xF4	; 244
    1154:	9a e4       	ldi	r25, 0x4A	; 74
    1156:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	bc 01       	movw	r22, r24
    1160:	cd 01       	movw	r24, r26
    1162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	UBRRL = (uint8)baud_reg;
    1170:	e9 e2       	ldi	r30, 0x29	; 41
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	80 83       	st	Z, r24
	UBRRH = (baud_reg >> 8) & 0x0F;	// lowest 4-bits only to be masked.
    1178:	e0 e4       	ldi	r30, 0x40	; 64
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	9a 81       	ldd	r25, Y+2	; 0x02
    1180:	89 2f       	mov	r24, r25
    1182:	99 27       	eor	r25, r25
    1184:	8f 70       	andi	r24, 0x0F	; 15
    1186:	80 83       	st	Z, r24
}
    1188:	29 96       	adiw	r28, 0x09	; 9
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <set_frame_size>:
static void set_frame_size(uint8 char_size, uint8 parity)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <set_frame_size+0x6>
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <set_frame_size+0x8>
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <set_frame_size+0xa>
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	6a 83       	std	Y+2, r22	; 0x02
	// use 1-stop bit
	UCSRC |= (1<<URSEL) & ~(1<<USBS);
    11ac:	a0 e4       	ldi	r26, 0x40	; 64
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e0 e4       	ldi	r30, 0x40	; 64
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	80 68       	ori	r24, 0x80	; 128
    11b8:	8c 93       	st	X, r24
	// configure parity bit
	switch(parity)
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	3e 83       	std	Y+6, r19	; 0x06
    11c2:	2d 83       	std	Y+5, r18	; 0x05
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	82 30       	cpi	r24, 0x02	; 2
    11ca:	91 05       	cpc	r25, r1
    11cc:	31 f0       	breq	.+12     	; 0x11da <set_frame_size+0x40>
    11ce:	2d 81       	ldd	r18, Y+5	; 0x05
    11d0:	3e 81       	ldd	r19, Y+6	; 0x06
    11d2:	23 30       	cpi	r18, 0x03	; 3
    11d4:	31 05       	cpc	r19, r1
    11d6:	49 f0       	breq	.+18     	; 0x11ea <set_frame_size+0x50>
    11d8:	10 c0       	rjmp	.+32     	; 0x11fa <set_frame_size+0x60>
	{
	case EVEN_PARITY:	UCSRC |= ((1<<URSEL) & ~(1<<UPM0)) | (1<<UPM1);
    11da:	a0 e4       	ldi	r26, 0x40	; 64
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e0 e4       	ldi	r30, 0x40	; 64
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	80 6a       	ori	r24, 0xA0	; 160
    11e6:	8c 93       	st	X, r24
    11e8:	0f c0       	rjmp	.+30     	; 0x1208 <set_frame_size+0x6e>
		break;
	case ODD_PARITY:	UCSRC |= (1<<URSEL) | (1<<UPM0) | (1<<UPM1);
    11ea:	a0 e4       	ldi	r26, 0x40	; 64
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e0 e4       	ldi	r30, 0x40	; 64
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	80 6b       	ori	r24, 0xB0	; 176
    11f6:	8c 93       	st	X, r24
    11f8:	07 c0       	rjmp	.+14     	; 0x1208 <set_frame_size+0x6e>
		break;
	default:	UCSRC |= (1<<URSEL) & ~(1<<UPM0) & ~(1<<UPM1);		// No Parity
    11fa:	a0 e4       	ldi	r26, 0x40	; 64
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e0 e4       	ldi	r30, 0x40	; 64
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	80 68       	ori	r24, 0x80	; 128
    1206:	8c 93       	st	X, r24
	break;
	}
	// configure data size
	switch(char_size)
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	3c 83       	std	Y+4, r19	; 0x04
    1210:	2b 83       	std	Y+3, r18	; 0x03
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	86 30       	cpi	r24, 0x06	; 6
    1218:	91 05       	cpc	r25, r1
    121a:	29 f1       	breq	.+74     	; 0x1266 <set_frame_size+0xcc>
    121c:	2b 81       	ldd	r18, Y+3	; 0x03
    121e:	3c 81       	ldd	r19, Y+4	; 0x04
    1220:	27 30       	cpi	r18, 0x07	; 7
    1222:	31 05       	cpc	r19, r1
    1224:	34 f4       	brge	.+12     	; 0x1232 <set_frame_size+0x98>
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	85 30       	cpi	r24, 0x05	; 5
    122c:	91 05       	cpc	r25, r1
    122e:	61 f0       	breq	.+24     	; 0x1248 <set_frame_size+0xae>
    1230:	47 c0       	rjmp	.+142    	; 0x12c0 <set_frame_size+0x126>
    1232:	2b 81       	ldd	r18, Y+3	; 0x03
    1234:	3c 81       	ldd	r19, Y+4	; 0x04
    1236:	27 30       	cpi	r18, 0x07	; 7
    1238:	31 05       	cpc	r19, r1
    123a:	21 f1       	breq	.+72     	; 0x1284 <set_frame_size+0xea>
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	89 30       	cpi	r24, 0x09	; 9
    1242:	91 05       	cpc	r25, r1
    1244:	71 f1       	breq	.+92     	; 0x12a2 <set_frame_size+0x108>
    1246:	3c c0       	rjmp	.+120    	; 0x12c0 <set_frame_size+0x126>
	{
	case 5:	UCSRC |= ((1<<URSEL) & ~(1<<UCSZ0)) & ~(1<<UCSZ1);			// # of data bits = 5
    1248:	a0 e4       	ldi	r26, 0x40	; 64
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e0 e4       	ldi	r30, 0x40	; 64
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 68       	ori	r24, 0x80	; 128
    1254:	8c 93       	st	X, r24
			UCSRB &= ~(1<<UCSZ2);
    1256:	aa e2       	ldi	r26, 0x2A	; 42
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	ea e2       	ldi	r30, 0x2A	; 42
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	8b 7f       	andi	r24, 0xFB	; 251
    1262:	8c 93       	st	X, r24
    1264:	3b c0       	rjmp	.+118    	; 0x12dc <set_frame_size+0x142>
		break;
	case 6:	UCSRC |= ((1<<URSEL) | (1<<UCSZ0)) & (~(1<<UCSZ1));			// # of data bits = 6
    1266:	a0 e4       	ldi	r26, 0x40	; 64
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e0 e4       	ldi	r30, 0x40	; 64
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	82 68       	ori	r24, 0x82	; 130
    1272:	8c 93       	st	X, r24
			UCSRB &= ~(1<<UCSZ2);
    1274:	aa e2       	ldi	r26, 0x2A	; 42
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ea e2       	ldi	r30, 0x2A	; 42
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	8b 7f       	andi	r24, 0xFB	; 251
    1280:	8c 93       	st	X, r24
    1282:	2c c0       	rjmp	.+88     	; 0x12dc <set_frame_size+0x142>
		break;
	case 7:	UCSRC |= ((1<<URSEL) & ~(1<<UCSZ0)) | (1<<UCSZ1);			// # of data bits = 7
    1284:	a0 e4       	ldi	r26, 0x40	; 64
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e0 e4       	ldi	r30, 0x40	; 64
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	84 68       	ori	r24, 0x84	; 132
    1290:	8c 93       	st	X, r24
			UCSRB &= ~(1<<UCSZ2);
    1292:	aa e2       	ldi	r26, 0x2A	; 42
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ea e2       	ldi	r30, 0x2A	; 42
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8b 7f       	andi	r24, 0xFB	; 251
    129e:	8c 93       	st	X, r24
    12a0:	1d c0       	rjmp	.+58     	; 0x12dc <set_frame_size+0x142>
		break;
	case 9:	UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);				// # of data bits = 9
    12a2:	a0 e4       	ldi	r26, 0x40	; 64
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e0 e4       	ldi	r30, 0x40	; 64
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	86 68       	ori	r24, 0x86	; 134
    12ae:	8c 93       	st	X, r24
			UCSRB |= (1<<UCSZ2);
    12b0:	aa e2       	ldi	r26, 0x2A	; 42
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	ea e2       	ldi	r30, 0x2A	; 42
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	84 60       	ori	r24, 0x04	; 4
    12bc:	8c 93       	st	X, r24
    12be:	0e c0       	rjmp	.+28     	; 0x12dc <set_frame_size+0x142>
		break;
	default:UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);				// # of data bits = 8
    12c0:	a0 e4       	ldi	r26, 0x40	; 64
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e0 e4       	ldi	r30, 0x40	; 64
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	86 68       	ori	r24, 0x86	; 134
    12cc:	8c 93       	st	X, r24
			UCSRB &= ~(1<<UCSZ2);
    12ce:	aa e2       	ldi	r26, 0x2A	; 42
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ea e2       	ldi	r30, 0x2A	; 42
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	8b 7f       	andi	r24, 0xFB	; 251
    12da:	8c 93       	st	X, r24
	}
}
    12dc:	26 96       	adiw	r28, 0x06	; 6
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <timer1_init>:
static Std_ReturnType set_pwm_set_duty_cycle(const timer1_t* tmr_obj, uint8 output_pin, uint8 duty);
static Std_ReturnType set_pwm_freq(const timer1_t* tmr_obj, uint32 freq);
#endif
/* ------------------------------ SW Functions Definitions ------------------------------ */
Std_ReturnType timer1_init(const timer1_t* tmr_obj)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <timer1_init+0x6>
    12f4:	0f 92       	push	r0
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	9b 83       	std	Y+3, r25	; 0x03
    12fc:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	89 83       	std	Y+1, r24	; 0x01
	if(tmr_obj == NULL)
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	9b 81       	ldd	r25, Y+3	; 0x03
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	11 f4       	brne	.+4      	; 0x130e <timer1_init+0x20>
	{
		ret  = E_NOT_OK;
    130a:	19 82       	std	Y+1, r1	; 0x01
    130c:	24 c0       	rjmp	.+72     	; 0x1356 <timer1_init+0x68>
	}
	else
	{
		// Disable timer1 module
		TCCR1A = 0;
    130e:	ef e4       	ldi	r30, 0x4F	; 79
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	10 82       	st	Z, r1
		TCCR1B = 0;
    1314:	ee e4       	ldi	r30, 0x4E	; 78
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	10 82       	st	Z, r1
		/* Set Interrupts Configurations */
#if TIMER1_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
		INTERRUPT_GLOBAL_ENABLE();
    131a:	af e5       	ldi	r26, 0x5F	; 95
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	ef e5       	ldi	r30, 0x5F	; 95
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	80 68       	ori	r24, 0x80	; 128
    1326:	8c 93       	st	X, r24
#if TIMER1_OV1_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
		TIMER1_OVERFLOW_INTERRUPT_ENABLE();
    1328:	a9 e5       	ldi	r26, 0x59	; 89
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e9 e5       	ldi	r30, 0x59	; 89
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	84 60       	ori	r24, 0x04	; 4
    1334:	8c 93       	st	X, r24
		tmr1_IRQHandller_OVF = tmr_obj->tmr1_IRQHandller_OVF;
    1336:	ea 81       	ldd	r30, Y+2	; 0x02
    1338:	fb 81       	ldd	r31, Y+3	; 0x03
    133a:	80 81       	ld	r24, Z
    133c:	91 81       	ldd	r25, Z+1	; 0x01
    133e:	90 93 a9 01 	sts	0x01A9, r25
    1342:	80 93 a8 01 	sts	0x01A8, r24
#if	TIMER1_IC1_INTERRRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
		TIMER1_IC1_INTERRUPT_ENABLE();
#endif
#endif
		/*Set Timer1 General Mode */
		timer1_set_general_mode(tmr_obj);
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	9b 81       	ldd	r25, Y+3	; 0x03
    134a:	0e 94 37 0a 	call	0x146e	; 0x146e <timer1_set_general_mode>
		OCR1AL = (uint8)(tmr_obj->tmr1_OCR1A_preload_value);
		ICR1H = (uint8)(tmr_obj->tmr1_ICR1_preload_value >> 8);
		ICR1L = (uint8)(tmr_obj->tmr1_ICR1_preload_value);
#endif
		/* Enable Timer1 Module */
		timer1_set_clock_source(tmr_obj);
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	9b 81       	ldd	r25, Y+3	; 0x03
    1352:	0e 94 29 0b 	call	0x1652	; 0x1652 <timer1_set_clock_source>
	}
	return ret;
    1356:	89 81       	ldd	r24, Y+1	; 0x01
}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <timer1_Deinit>:
Std_ReturnType timer1_Deinit(const timer1_t* tmr_obj)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	00 d0       	rcall	.+0      	; 0x136a <timer1_Deinit+0x6>
    136a:	0f 92       	push	r0
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	9b 83       	std	Y+3, r25	; 0x03
    1372:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	89 83       	std	Y+1, r24	; 0x01
	if(tmr_obj == NULL)
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	9b 81       	ldd	r25, Y+3	; 0x03
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	11 f4       	brne	.+4      	; 0x1384 <timer1_Deinit+0x20>
	{
		ret  = E_NOT_OK;
    1380:	19 82       	std	Y+1, r1	; 0x01
    1382:	0d c0       	rjmp	.+26     	; 0x139e <timer1_Deinit+0x3a>
	}
	else
	{
		// Disable Timer1 Module
		TCCR1B = 0x00;
    1384:	ee e4       	ldi	r30, 0x4E	; 78
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	10 82       	st	Z, r1
		TCCR1A = 0x00;
    138a:	ef e4       	ldi	r30, 0x4F	; 79
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	10 82       	st	Z, r1
		// Disable all Timer1 interrupt sources if defined
#if TIMER1_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
#if TIMER1_OV1_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
		TIMER1_OVERFLOW_INTERRUPT_DISABLE();
    1390:	a9 e5       	ldi	r26, 0x59	; 89
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e9 e5       	ldi	r30, 0x59	; 89
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	8b 7f       	andi	r24, 0xFB	; 251
    139c:	8c 93       	st	X, r24
#if	TIMER1_IC1_INTERRRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
		TIMER1_IC1_INTERRUPT_DISABLE();
#endif
#endif
	}
	return ret;
    139e:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <timer1_write_counter_value>:
Std_ReturnType timer1_write_counter_value(const timer1_t* tmr_obj, uint16 value)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <timer1_write_counter_value+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <timer1_write_counter_value+0x8>
    13b4:	0f 92       	push	r0
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	9b 83       	std	Y+3, r25	; 0x03
    13bc:	8a 83       	std	Y+2, r24	; 0x02
    13be:	7d 83       	std	Y+5, r23	; 0x05
    13c0:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	89 83       	std	Y+1, r24	; 0x01
	if(tmr_obj == NULL)
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	11 f4       	brne	.+4      	; 0x13d2 <timer1_write_counter_value+0x26>
	{
		ret  = E_NOT_OK;
    13ce:	19 82       	std	Y+1, r1	; 0x01
    13d0:	0b c0       	rjmp	.+22     	; 0x13e8 <timer1_write_counter_value+0x3c>
	{
		/** write sequence in 16-bit register for 8-bit architecture is as following:
		 * 1- write first the new value in High byte of the intended register
		 * 2- write second the new value in Low byte of the intended register
		 * */
		TCNT1H = (uint8)(value >> 8);
    13d2:	ed e4       	ldi	r30, 0x4D	; 77
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9d 81       	ldd	r25, Y+5	; 0x05
    13da:	89 2f       	mov	r24, r25
    13dc:	99 27       	eor	r25, r25
    13de:	80 83       	st	Z, r24
		TCNT1L = (uint8)(value);
    13e0:	ec e4       	ldi	r30, 0x4C	; 76
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	80 83       	st	Z, r24
	}
	return ret;
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <timer1_read_counter_value>:
Std_ReturnType timer1_read_counter_value(const timer1_t* tmr_obj, uint16* ret_value)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <timer1_read_counter_value+0x6>
    1400:	00 d0       	rcall	.+0      	; 0x1402 <timer1_read_counter_value+0x8>
    1402:	0f 92       	push	r0
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	9b 83       	std	Y+3, r25	; 0x03
    140a:	8a 83       	std	Y+2, r24	; 0x02
    140c:	7d 83       	std	Y+5, r23	; 0x05
    140e:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	89 83       	std	Y+1, r24	; 0x01
	if(tmr_obj == NULL || NULL == ret_value)
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	9b 81       	ldd	r25, Y+3	; 0x03
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	21 f0       	breq	.+8      	; 0x1424 <timer1_read_counter_value+0x2a>
    141c:	8c 81       	ldd	r24, Y+4	; 0x04
    141e:	9d 81       	ldd	r25, Y+5	; 0x05
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	11 f4       	brne	.+4      	; 0x1428 <timer1_read_counter_value+0x2e>
	{
		ret  = E_NOT_OK;
    1424:	19 82       	std	Y+1, r1	; 0x01
    1426:	1a c0       	rjmp	.+52     	; 0x145c <timer1_read_counter_value+0x62>
	{
		/** read sequence in 16-bit register for 8-bit architecture is as following:
		 * 1- read first the new value in Low byte of the intended register
		 * 2- read second the new value in High byte of the intended register
		 * */
		*ret_value = TCNT1L;
    1428:	ec e4       	ldi	r30, 0x4C	; 76
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	ec 81       	ldd	r30, Y+4	; 0x04
    1434:	fd 81       	ldd	r31, Y+5	; 0x05
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	80 83       	st	Z, r24
		*ret_value |= (((uint16)TCNT1H) << 8);
    143a:	ec 81       	ldd	r30, Y+4	; 0x04
    143c:	fd 81       	ldd	r31, Y+5	; 0x05
    143e:	20 81       	ld	r18, Z
    1440:	31 81       	ldd	r19, Z+1	; 0x01
    1442:	ed e4       	ldi	r30, 0x4D	; 77
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	98 2f       	mov	r25, r24
    144e:	88 27       	eor	r24, r24
    1450:	82 2b       	or	r24, r18
    1452:	93 2b       	or	r25, r19
    1454:	ec 81       	ldd	r30, Y+4	; 0x04
    1456:	fd 81       	ldd	r31, Y+5	; 0x05
    1458:	91 83       	std	Z+1, r25	; 0x01
    145a:	80 83       	st	Z, r24
	}
	return ret;
    145c:	89 81       	ldd	r24, Y+1	; 0x01
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <timer1_set_general_mode>:
}
#endif

/* ------------------------------ Helper Functions Definitions ------------------------------ */
static Std_ReturnType timer1_set_general_mode(const timer1_t* tmr_obj)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <timer1_set_general_mode+0x6>
    1474:	00 d0       	rcall	.+0      	; 0x1476 <timer1_set_general_mode+0x8>
    1476:	0f 92       	push	r0
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	9b 83       	std	Y+3, r25	; 0x03
    147e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	89 83       	std	Y+1, r24	; 0x01
	switch(tmr_obj->timer1_general_mode)
    1484:	ea 81       	ldd	r30, Y+2	; 0x02
    1486:	fb 81       	ldd	r31, Y+3	; 0x03
    1488:	82 81       	ldd	r24, Z+2	; 0x02
    148a:	8f 70       	andi	r24, 0x0F	; 15
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	3d 83       	std	Y+5, r19	; 0x05
    1492:	2c 83       	std	Y+4, r18	; 0x04
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	9d 81       	ldd	r25, Y+5	; 0x05
    1498:	87 30       	cpi	r24, 0x07	; 7
    149a:	91 05       	cpc	r25, r1
    149c:	09 f4       	brne	.+2      	; 0x14a0 <timer1_set_general_mode+0x32>
    149e:	74 c0       	rjmp	.+232    	; 0x1588 <timer1_set_general_mode+0x11a>
    14a0:	2c 81       	ldd	r18, Y+4	; 0x04
    14a2:	3d 81       	ldd	r19, Y+5	; 0x05
    14a4:	28 30       	cpi	r18, 0x08	; 8
    14a6:	31 05       	cpc	r19, r1
    14a8:	2c f5       	brge	.+74     	; 0x14f4 <timer1_set_general_mode+0x86>
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	9d 81       	ldd	r25, Y+5	; 0x05
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	91 05       	cpc	r25, r1
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <timer1_set_general_mode+0x48>
    14b4:	94 c0       	rjmp	.+296    	; 0x15de <timer1_set_general_mode+0x170>
    14b6:	2c 81       	ldd	r18, Y+4	; 0x04
    14b8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ba:	24 30       	cpi	r18, 0x04	; 4
    14bc:	31 05       	cpc	r19, r1
    14be:	6c f4       	brge	.+26     	; 0x14da <timer1_set_general_mode+0x6c>
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	9d 81       	ldd	r25, Y+5	; 0x05
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	91 05       	cpc	r25, r1
    14c8:	09 f4       	brne	.+2      	; 0x14cc <timer1_set_general_mode+0x5e>
    14ca:	79 c0       	rjmp	.+242    	; 0x15be <timer1_set_general_mode+0x150>
    14cc:	2c 81       	ldd	r18, Y+4	; 0x04
    14ce:	3d 81       	ldd	r19, Y+5	; 0x05
    14d0:	22 30       	cpi	r18, 0x02	; 2
    14d2:	31 05       	cpc	r19, r1
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <timer1_set_general_mode+0x6a>
    14d6:	7b c0       	rjmp	.+246    	; 0x15ce <timer1_set_general_mode+0x160>
    14d8:	ad c0       	rjmp	.+346    	; 0x1634 <timer1_set_general_mode+0x1c6>
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	9d 81       	ldd	r25, Y+5	; 0x05
    14de:	85 30       	cpi	r24, 0x05	; 5
    14e0:	91 05       	cpc	r25, r1
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <timer1_set_general_mode+0x78>
    14e4:	3f c0       	rjmp	.+126    	; 0x1564 <timer1_set_general_mode+0xf6>
    14e6:	2c 81       	ldd	r18, Y+4	; 0x04
    14e8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ea:	26 30       	cpi	r18, 0x06	; 6
    14ec:	31 05       	cpc	r19, r1
    14ee:	0c f0       	brlt	.+2      	; 0x14f2 <timer1_set_general_mode+0x84>
    14f0:	42 c0       	rjmp	.+132    	; 0x1576 <timer1_set_general_mode+0x108>
    14f2:	28 c0       	rjmp	.+80     	; 0x1544 <timer1_set_general_mode+0xd6>
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	9d 81       	ldd	r25, Y+5	; 0x05
    14f8:	8b 30       	cpi	r24, 0x0B	; 11
    14fa:	91 05       	cpc	r25, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <timer1_set_general_mode+0x92>
    14fe:	80 c0       	rjmp	.+256    	; 0x1600 <timer1_set_general_mode+0x192>
    1500:	2c 81       	ldd	r18, Y+4	; 0x04
    1502:	3d 81       	ldd	r19, Y+5	; 0x05
    1504:	2c 30       	cpi	r18, 0x0C	; 12
    1506:	31 05       	cpc	r19, r1
    1508:	6c f4       	brge	.+26     	; 0x1524 <timer1_set_general_mode+0xb6>
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	89 30       	cpi	r24, 0x09	; 9
    1510:	91 05       	cpc	r25, r1
    1512:	09 f4       	brne	.+2      	; 0x1516 <timer1_set_general_mode+0xa8>
    1514:	86 c0       	rjmp	.+268    	; 0x1622 <timer1_set_general_mode+0x1b4>
    1516:	2c 81       	ldd	r18, Y+4	; 0x04
    1518:	3d 81       	ldd	r19, Y+5	; 0x05
    151a:	2a 30       	cpi	r18, 0x0A	; 10
    151c:	31 05       	cpc	r19, r1
    151e:	0c f0       	brlt	.+2      	; 0x1522 <timer1_set_general_mode+0xb4>
    1520:	66 c0       	rjmp	.+204    	; 0x15ee <timer1_set_general_mode+0x180>
    1522:	77 c0       	rjmp	.+238    	; 0x1612 <timer1_set_general_mode+0x1a4>
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	9d 81       	ldd	r25, Y+5	; 0x05
    1528:	8e 30       	cpi	r24, 0x0E	; 14
    152a:	91 05       	cpc	r25, r1
    152c:	b1 f1       	breq	.+108    	; 0x159a <timer1_set_general_mode+0x12c>
    152e:	2c 81       	ldd	r18, Y+4	; 0x04
    1530:	3d 81       	ldd	r19, Y+5	; 0x05
    1532:	2f 30       	cpi	r18, 0x0F	; 15
    1534:	31 05       	cpc	r19, r1
    1536:	d1 f1       	breq	.+116    	; 0x15ac <timer1_set_general_mode+0x13e>
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	9d 81       	ldd	r25, Y+5	; 0x05
    153c:	8c 30       	cpi	r24, 0x0C	; 12
    153e:	91 05       	cpc	r25, r1
    1540:	49 f0       	breq	.+18     	; 0x1554 <timer1_set_general_mode+0xe6>
    1542:	78 c0       	rjmp	.+240    	; 0x1634 <timer1_set_general_mode+0x1c6>
	{
	case TIMER1_CLEAR_TIMER_COMPARE_ICR1_MODE:	TCCR1A = 0; TCCR1B = 0x18;
    1544:	ef e4       	ldi	r30, 0x4F	; 79
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	10 82       	st	Z, r1
    154a:	ee e4       	ldi	r30, 0x4E	; 78
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	88 e1       	ldi	r24, 0x18	; 24
    1550:	80 83       	st	Z, r24
    1552:	76 c0       	rjmp	.+236    	; 0x1640 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_CLEAR_TIMER_COMPARE_OCR1A_MODE:	TCCR1A = 0; TCCR1B = 0x08;
    1554:	ef e4       	ldi	r30, 0x4F	; 79
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	10 82       	st	Z, r1
    155a:	ee e4       	ldi	r30, 0x4E	; 78
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	88 e0       	ldi	r24, 0x08	; 8
    1560:	80 83       	st	Z, r24
    1562:	6e c0       	rjmp	.+220    	; 0x1640 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_FAST_PWM_TOP_FIXED_FF_MODE:		TCCR1A = 1; TCCR1B = 0x08;
    1564:	ef e4       	ldi	r30, 0x4F	; 79
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	80 83       	st	Z, r24
    156c:	ee e4       	ldi	r30, 0x4E	; 78
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	88 e0       	ldi	r24, 0x08	; 8
    1572:	80 83       	st	Z, r24
    1574:	65 c0       	rjmp	.+202    	; 0x1640 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_FAST_PWM_TOP_FIXED_1FF_MODE:	TCCR1A = 2; TCCR1B = 0x08;
    1576:	ef e4       	ldi	r30, 0x4F	; 79
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	80 83       	st	Z, r24
    157e:	ee e4       	ldi	r30, 0x4E	; 78
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	88 e0       	ldi	r24, 0x08	; 8
    1584:	80 83       	st	Z, r24
    1586:	5c c0       	rjmp	.+184    	; 0x1640 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_FAST_PWM_TOP_FIXED_3FF_MODE:	TCCR1A = 3; TCCR1B = 0x08;
    1588:	ef e4       	ldi	r30, 0x4F	; 79
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	83 e0       	ldi	r24, 0x03	; 3
    158e:	80 83       	st	Z, r24
    1590:	ee e4       	ldi	r30, 0x4E	; 78
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	88 e0       	ldi	r24, 0x08	; 8
    1596:	80 83       	st	Z, r24
    1598:	53 c0       	rjmp	.+166    	; 0x1640 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_FAST_PWM_TOP_ICR_MODE:			TCCR1A = 2; TCCR1B = 0x18;
    159a:	ef e4       	ldi	r30, 0x4F	; 79
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	82 e0       	ldi	r24, 0x02	; 2
    15a0:	80 83       	st	Z, r24
    15a2:	ee e4       	ldi	r30, 0x4E	; 78
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	88 e1       	ldi	r24, 0x18	; 24
    15a8:	80 83       	st	Z, r24
    15aa:	4a c0       	rjmp	.+148    	; 0x1640 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_FAST_PWM_TOP_OCR1A_MODE:		TCCR1A = 3; TCCR1B = 0x18;
    15ac:	ef e4       	ldi	r30, 0x4F	; 79
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	83 e0       	ldi	r24, 0x03	; 3
    15b2:	80 83       	st	Z, r24
    15b4:	ee e4       	ldi	r30, 0x4E	; 78
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	88 e1       	ldi	r24, 0x18	; 24
    15ba:	80 83       	st	Z, r24
    15bc:	41 c0       	rjmp	.+130    	; 0x1640 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_PC_PWM_TOP_FIXED_FF_MODE:		TCCR1A = 1; TCCR1B = 0x00;
    15be:	ef e4       	ldi	r30, 0x4F	; 79
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	80 83       	st	Z, r24
    15c6:	ee e4       	ldi	r30, 0x4E	; 78
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	10 82       	st	Z, r1
    15cc:	39 c0       	rjmp	.+114    	; 0x1640 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_PC_PWM_TOP_FIXED_1FF_MODE:		TCCR1A = 2; TCCR1B = 0x00;
    15ce:	ef e4       	ldi	r30, 0x4F	; 79
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	82 e0       	ldi	r24, 0x02	; 2
    15d4:	80 83       	st	Z, r24
    15d6:	ee e4       	ldi	r30, 0x4E	; 78
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	10 82       	st	Z, r1
    15dc:	31 c0       	rjmp	.+98     	; 0x1640 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_PC_PWM_TOP_FIXED_3FF_MODE:		TCCR1A = 3; TCCR1B = 0x00;
    15de:	ef e4       	ldi	r30, 0x4F	; 79
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	83 e0       	ldi	r24, 0x03	; 3
    15e4:	80 83       	st	Z, r24
    15e6:	ee e4       	ldi	r30, 0x4E	; 78
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	10 82       	st	Z, r1
    15ec:	29 c0       	rjmp	.+82     	; 0x1640 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_PC_PWM_TOP_ICR_MODE:			TCCR1A = 2; TCCR1B = 0x10;
    15ee:	ef e4       	ldi	r30, 0x4F	; 79
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	80 83       	st	Z, r24
    15f6:	ee e4       	ldi	r30, 0x4E	; 78
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 e1       	ldi	r24, 0x10	; 16
    15fc:	80 83       	st	Z, r24
    15fe:	20 c0       	rjmp	.+64     	; 0x1640 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_PC_PWM_TOP_OCR1A_MODE:			TCCR1A = 3; TCCR1B = 0x10;
    1600:	ef e4       	ldi	r30, 0x4F	; 79
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	80 83       	st	Z, r24
    1608:	ee e4       	ldi	r30, 0x4E	; 78
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 e1       	ldi	r24, 0x10	; 16
    160e:	80 83       	st	Z, r24
    1610:	17 c0       	rjmp	.+46     	; 0x1640 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_PFC_PWM_TOP_ICR_MODE:			TCCR1A = 0; TCCR1B = 0x10;
    1612:	ef e4       	ldi	r30, 0x4F	; 79
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	10 82       	st	Z, r1
    1618:	ee e4       	ldi	r30, 0x4E	; 78
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 e1       	ldi	r24, 0x10	; 16
    161e:	80 83       	st	Z, r24
    1620:	0f c0       	rjmp	.+30     	; 0x1640 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_PFC_PWM_TOP_OCR1A_MODE:			TCCR1A = 1; TCCR1B = 0x10;
    1622:	ef e4       	ldi	r30, 0x4F	; 79
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	80 83       	st	Z, r24
    162a:	ee e4       	ldi	r30, 0x4E	; 78
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 e1       	ldi	r24, 0x10	; 16
    1630:	80 83       	st	Z, r24
    1632:	06 c0       	rjmp	.+12     	; 0x1640 <timer1_set_general_mode+0x1d2>
		break;
	default:									TCCR1A = 0; TCCR1B = 0;	// NORMAL Mode
    1634:	ef e4       	ldi	r30, 0x4F	; 79
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	10 82       	st	Z, r1
    163a:	ee e4       	ldi	r30, 0x4E	; 78
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	10 82       	st	Z, r1
		break;
	}
	return ret;
    1640:	89 81       	ldd	r24, Y+1	; 0x01
}
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <timer1_set_clock_source>:
static void timer1_set_clock_source(const timer1_t* tmr_obj)
{
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	00 d0       	rcall	.+0      	; 0x1658 <timer1_set_clock_source+0x6>
    1658:	00 d0       	rcall	.+0      	; 0x165a <timer1_set_clock_source+0x8>
    165a:	00 d0       	rcall	.+0      	; 0x165c <timer1_set_clock_source+0xa>
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01
	if (tmr_obj->timer1_clk_src == TIMER1_INTERNAL_CLK_SOURCE)
    1664:	e9 81       	ldd	r30, Y+1	; 0x01
    1666:	fa 81       	ldd	r31, Y+2	; 0x02
    1668:	82 81       	ldd	r24, Z+2	; 0x02
    166a:	80 71       	andi	r24, 0x10	; 16
    166c:	88 23       	and	r24, r24
    166e:	09 f0       	breq	.+2      	; 0x1672 <timer1_set_clock_source+0x20>
    1670:	83 c0       	rjmp	.+262    	; 0x1778 <timer1_set_clock_source+0x126>
	{
		switch(tmr_obj->timer1_prescaler_value)
    1672:	e9 81       	ldd	r30, Y+1	; 0x01
    1674:	fa 81       	ldd	r31, Y+2	; 0x02
    1676:	82 81       	ldd	r24, Z+2	; 0x02
    1678:	82 95       	swap	r24
    167a:	86 95       	lsr	r24
    167c:	87 70       	andi	r24, 0x07	; 7
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	3e 83       	std	Y+6, r19	; 0x06
    1684:	2d 83       	std	Y+5, r18	; 0x05
    1686:	8d 81       	ldd	r24, Y+5	; 0x05
    1688:	9e 81       	ldd	r25, Y+6	; 0x06
    168a:	82 30       	cpi	r24, 0x02	; 2
    168c:	91 05       	cpc	r25, r1
    168e:	c1 f1       	breq	.+112    	; 0x1700 <timer1_set_clock_source+0xae>
    1690:	2d 81       	ldd	r18, Y+5	; 0x05
    1692:	3e 81       	ldd	r19, Y+6	; 0x06
    1694:	23 30       	cpi	r18, 0x03	; 3
    1696:	31 05       	cpc	r19, r1
    1698:	54 f4       	brge	.+20     	; 0x16ae <timer1_set_clock_source+0x5c>
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	89 f0       	breq	.+34     	; 0x16c4 <timer1_set_clock_source+0x72>
    16a2:	2d 81       	ldd	r18, Y+5	; 0x05
    16a4:	3e 81       	ldd	r19, Y+6	; 0x06
    16a6:	21 30       	cpi	r18, 0x01	; 1
    16a8:	31 05       	cpc	r19, r1
    16aa:	d9 f0       	breq	.+54     	; 0x16e2 <timer1_set_clock_source+0x90>
    16ac:	56 c0       	rjmp	.+172    	; 0x175a <timer1_set_clock_source+0x108>
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	83 30       	cpi	r24, 0x03	; 3
    16b4:	91 05       	cpc	r25, r1
    16b6:	99 f1       	breq	.+102    	; 0x171e <timer1_set_clock_source+0xcc>
    16b8:	2d 81       	ldd	r18, Y+5	; 0x05
    16ba:	3e 81       	ldd	r19, Y+6	; 0x06
    16bc:	24 30       	cpi	r18, 0x04	; 4
    16be:	31 05       	cpc	r19, r1
    16c0:	e9 f1       	breq	.+122    	; 0x173c <timer1_set_clock_source+0xea>
    16c2:	4b c0       	rjmp	.+150    	; 0x175a <timer1_set_clock_source+0x108>
		{
		case TIMER1_PRESCALER_VALUE_DIV_BY_1:		SET_BIT(TCCR1B, CS10);
    16c4:	ae e4       	ldi	r26, 0x4E	; 78
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	ee e4       	ldi	r30, 0x4E	; 78
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	81 60       	ori	r24, 0x01	; 1
    16d0:	8c 93       	st	X, r24
													TCCR1B &= 0xF9;
    16d2:	ae e4       	ldi	r26, 0x4E	; 78
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ee e4       	ldi	r30, 0x4E	; 78
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	89 7f       	andi	r24, 0xF9	; 249
    16de:	8c 93       	st	X, r24
    16e0:	96 c0       	rjmp	.+300    	; 0x180e <timer1_set_clock_source+0x1bc>
			break;
		case TIMER1_PRESCALER_VALUE_DIV_BY_8:		TCCR1B &= 0xFA;
    16e2:	ae e4       	ldi	r26, 0x4E	; 78
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	ee e4       	ldi	r30, 0x4E	; 78
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8a 7f       	andi	r24, 0xFA	; 250
    16ee:	8c 93       	st	X, r24
													SET_BIT(TCCR1B, CS11);
    16f0:	ae e4       	ldi	r26, 0x4E	; 78
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	ee e4       	ldi	r30, 0x4E	; 78
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	82 60       	ori	r24, 0x02	; 2
    16fc:	8c 93       	st	X, r24
    16fe:	87 c0       	rjmp	.+270    	; 0x180e <timer1_set_clock_source+0x1bc>
			break;
		case TIMER1_PRESCALER_VALUE_DIV_BY_64:		TCCR1B |= 0x03;
    1700:	ae e4       	ldi	r26, 0x4E	; 78
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	ee e4       	ldi	r30, 0x4E	; 78
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	83 60       	ori	r24, 0x03	; 3
    170c:	8c 93       	st	X, r24
													CLEAR_BIT(TCCR1B, CS12);
    170e:	ae e4       	ldi	r26, 0x4E	; 78
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	ee e4       	ldi	r30, 0x4E	; 78
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	8b 7f       	andi	r24, 0xFB	; 251
    171a:	8c 93       	st	X, r24
    171c:	78 c0       	rjmp	.+240    	; 0x180e <timer1_set_clock_source+0x1bc>
			break;
		case TIMER1_PRESCALER_VALUE_DIV_BY_256:		TCCR1B &= 0xFC;
    171e:	ae e4       	ldi	r26, 0x4E	; 78
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	ee e4       	ldi	r30, 0x4E	; 78
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8c 7f       	andi	r24, 0xFC	; 252
    172a:	8c 93       	st	X, r24
													SET_BIT(TCCR1B, CS12);
    172c:	ae e4       	ldi	r26, 0x4E	; 78
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	ee e4       	ldi	r30, 0x4E	; 78
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	84 60       	ori	r24, 0x04	; 4
    1738:	8c 93       	st	X, r24
    173a:	69 c0       	rjmp	.+210    	; 0x180e <timer1_set_clock_source+0x1bc>
			break;
		case TIMER1_PRESCALER_VALUE_DIV_BY_1024:	TCCR1B |= 0x05;
    173c:	ae e4       	ldi	r26, 0x4E	; 78
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ee e4       	ldi	r30, 0x4E	; 78
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	85 60       	ori	r24, 0x05	; 5
    1748:	8c 93       	st	X, r24
													CLEAR_BIT(TCCR1B, CS11);
    174a:	ae e4       	ldi	r26, 0x4E	; 78
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	ee e4       	ldi	r30, 0x4E	; 78
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	8d 7f       	andi	r24, 0xFD	; 253
    1756:	8c 93       	st	X, r24
    1758:	5a c0       	rjmp	.+180    	; 0x180e <timer1_set_clock_source+0x1bc>
			break;
		default: 	SET_BIT(TCCR1B, CS10);
    175a:	ae e4       	ldi	r26, 0x4E	; 78
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	ee e4       	ldi	r30, 0x4E	; 78
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	81 60       	ori	r24, 0x01	; 1
    1766:	8c 93       	st	X, r24
					TCCR1B &= 0xF9;
    1768:	ae e4       	ldi	r26, 0x4E	; 78
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	ee e4       	ldi	r30, 0x4E	; 78
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	89 7f       	andi	r24, 0xF9	; 249
    1774:	8c 93       	st	X, r24
    1776:	4b c0       	rjmp	.+150    	; 0x180e <timer1_set_clock_source+0x1bc>
			break;
		}
	}
	else if(tmr_obj->timer1_clk_src == TIMER1_EXTERNAL_CLK_SOURCE)
    1778:	e9 81       	ldd	r30, Y+1	; 0x01
    177a:	fa 81       	ldd	r31, Y+2	; 0x02
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	80 71       	andi	r24, 0x10	; 16
    1780:	88 23       	and	r24, r24
    1782:	b9 f1       	breq	.+110    	; 0x17f2 <timer1_set_clock_source+0x1a0>
	{
		switch(tmr_obj->timer1_edge_detect)
    1784:	e9 81       	ldd	r30, Y+1	; 0x01
    1786:	fa 81       	ldd	r31, Y+2	; 0x02
    1788:	83 81       	ldd	r24, Z+3	; 0x03
    178a:	81 70       	andi	r24, 0x01	; 1
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	3c 83       	std	Y+4, r19	; 0x04
    1792:	2b 83       	std	Y+3, r18	; 0x03
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	69 f0       	breq	.+26     	; 0x17b6 <timer1_set_clock_source+0x164>
    179c:	2b 81       	ldd	r18, Y+3	; 0x03
    179e:	3c 81       	ldd	r19, Y+4	; 0x04
    17a0:	21 30       	cpi	r18, 0x01	; 1
    17a2:	31 05       	cpc	r19, r1
    17a4:	b9 f4       	brne	.+46     	; 0x17d4 <timer1_set_clock_source+0x182>
		{
		case TIMER1_EXTERNAL_CLK_RISING_EDGE:		TCCR1B |= 0x07;
    17a6:	ae e4       	ldi	r26, 0x4E	; 78
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	ee e4       	ldi	r30, 0x4E	; 78
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	87 60       	ori	r24, 0x07	; 7
    17b2:	8c 93       	st	X, r24
    17b4:	16 c0       	rjmp	.+44     	; 0x17e2 <timer1_set_clock_source+0x190>
			break;
		case TIMER1_EXTERNAL_CLK_FALLING_EDGE:		CLEAR_BIT(TCCR1B, CS10);
    17b6:	ae e4       	ldi	r26, 0x4E	; 78
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	ee e4       	ldi	r30, 0x4E	; 78
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	8e 7f       	andi	r24, 0xFE	; 254
    17c2:	8c 93       	st	X, r24
													TCCR1B |= 0x06;
    17c4:	ae e4       	ldi	r26, 0x4E	; 78
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	ee e4       	ldi	r30, 0x4E	; 78
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	86 60       	ori	r24, 0x06	; 6
    17d0:	8c 93       	st	X, r24
    17d2:	07 c0       	rjmp	.+14     	; 0x17e2 <timer1_set_clock_source+0x190>
			break;
		default:	TCCR1B |= 0x07;
    17d4:	ae e4       	ldi	r26, 0x4E	; 78
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	ee e4       	ldi	r30, 0x4E	; 78
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	87 60       	ori	r24, 0x07	; 7
    17e0:	8c 93       	st	X, r24
			break;
		}
		CLEAR_BIT(DDRB, DDB1);	// set T1 pin as Digital i/p for Counter mode
    17e2:	a7 e3       	ldi	r26, 0x37	; 55
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e7 e3       	ldi	r30, 0x37	; 55
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	8d 7f       	andi	r24, 0xFD	; 253
    17ee:	8c 93       	st	X, r24
    17f0:	0e c0       	rjmp	.+28     	; 0x180e <timer1_set_clock_source+0x1bc>
	}
	else
	{
		SET_BIT(TCCR1B, CS10);\
    17f2:	ae e4       	ldi	r26, 0x4E	; 78
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	ee e4       	ldi	r30, 0x4E	; 78
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	81 60       	ori	r24, 0x01	; 1
    17fe:	8c 93       	st	X, r24
													TCCR1B &= 0xF9;
    1800:	ae e4       	ldi	r26, 0x4E	; 78
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	ee e4       	ldi	r30, 0x4E	; 78
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	89 7f       	andi	r24, 0xF9	; 249
    180c:	8c 93       	st	X, r24
	}
}
    180e:	26 96       	adiw	r28, 0x06	; 6
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <__vector_8>:
#endif
/* Implement ISRs for the four Sources Interrupts related to TIMER1 */
#if TIMER1_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
#if TIMER1_OV1_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
ISR(TIMER1_OVF_vect)
{
    1820:	1f 92       	push	r1
    1822:	0f 92       	push	r0
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	0f 92       	push	r0
    1828:	11 24       	eor	r1, r1
    182a:	2f 93       	push	r18
    182c:	3f 93       	push	r19
    182e:	4f 93       	push	r20
    1830:	5f 93       	push	r21
    1832:	6f 93       	push	r22
    1834:	7f 93       	push	r23
    1836:	8f 93       	push	r24
    1838:	9f 93       	push	r25
    183a:	af 93       	push	r26
    183c:	bf 93       	push	r27
    183e:	ef 93       	push	r30
    1840:	ff 93       	push	r31
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
	/* ISR code */
	if(tmr1_IRQHandller_OVF)
    184a:	80 91 a8 01 	lds	r24, 0x01A8
    184e:	90 91 a9 01 	lds	r25, 0x01A9
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	29 f0       	breq	.+10     	; 0x1860 <__vector_8+0x40>
		tmr1_IRQHandller_OVF();
    1856:	e0 91 a8 01 	lds	r30, 0x01A8
    185a:	f0 91 a9 01 	lds	r31, 0x01A9
    185e:	09 95       	icall
	// clear TIMER0_COMP flag happen automatically
}
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	ff 91       	pop	r31
    1866:	ef 91       	pop	r30
    1868:	bf 91       	pop	r27
    186a:	af 91       	pop	r26
    186c:	9f 91       	pop	r25
    186e:	8f 91       	pop	r24
    1870:	7f 91       	pop	r23
    1872:	6f 91       	pop	r22
    1874:	5f 91       	pop	r21
    1876:	4f 91       	pop	r20
    1878:	3f 91       	pop	r19
    187a:	2f 91       	pop	r18
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	0f 90       	pop	r0
    1882:	1f 90       	pop	r1
    1884:	18 95       	reti

00001886 <TWI_init>:
#if TWI_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
static void (*TWI_callBackNotify)(void) = NULL;
#endif
/* ------------------------------ SW Functions Definitions ------------------------------ */
void TWI_init(void)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
/* initialize the TWi module with pre-scaler = 0 and SCL frequency (for master) = 100KHz */
	TWBR = F_CPU/(2.0*100000);		// Pre-scaler bits = 0,0 and SCL Frequency = 100KHz
    188e:	e0 e2       	ldi	r30, 0x20	; 32
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	88 e2       	ldi	r24, 0x28	; 40
    1894:	80 83       	st	Z, r24
	TWSR = 0x00;
    1896:	e1 e2       	ldi	r30, 0x21	; 33
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	10 82       	st	Z, r1
	/* Two Wire Bus address my address if any master device want to call me: 0x01 (used in case this MC is a slave device)
	   General Call Recognition: Off */
	TWAR = 0b00000010;
    189c:	e2 e2       	ldi	r30, 0x22	; 34
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	80 83       	st	Z, r24
	TWCR = (1<<TWEN); /* enable TWI */
    18a4:	e6 e5       	ldi	r30, 0x56	; 86
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	84 e0       	ldi	r24, 0x04	; 4
    18aa:	80 83       	st	Z, r24
}
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <TWI_deInit>:
void TWI_deInit(void)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
	// Clear all TWI module registers
	TWCR = 0x00;
    18ba:	e6 e5       	ldi	r30, 0x56	; 86
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	10 82       	st	Z, r1
	TWBR = 0x00;
    18c0:	e0 e2       	ldi	r30, 0x20	; 32
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	10 82       	st	Z, r1
	TWSR = 0x00;
    18c6:	e1 e2       	ldi	r30, 0x21	; 33
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	10 82       	st	Z, r1
}
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <TWI_start>:


void TWI_start(void)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR |= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    18da:	a6 e5       	ldi	r26, 0x56	; 86
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e6 e5       	ldi	r30, 0x56	; 86
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	84 6a       	ori	r24, 0xA4	; 164
    18e6:	8c 93       	st	X, r24
	// wait for Start condition occurs on the TWI BUS
	while(!READ_BIT(TWCR, TWINT));
    18e8:	e6 e5       	ldi	r30, 0x56	; 86
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	88 23       	and	r24, r24
    18f0:	dc f7       	brge	.-10     	; 0x18e8 <TWI_start+0x16>
}
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <TWI_stop>:
void TWI_stop(void)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR |= (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    1900:	a6 e5       	ldi	r26, 0x56	; 86
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e6 e5       	ldi	r30, 0x56	; 86
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	84 69       	ori	r24, 0x94	; 148
    190c:	8c 93       	st	X, r24
	// TWSTO is cleared by HW automatically when Stop condition occurs on the TWI bus
}
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <TWI_write>:
void TWI_write(uint8 AddressData)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	0f 92       	push	r0
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = AddressData;
    1920:	e3 e2       	ldi	r30, 0x23	; 35
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1928:	e6 e5       	ldi	r30, 0x56	; 86
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	84 e8       	ldi	r24, 0x84	; 132
    192e:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(!READ_BIT(TWCR,TWINT));
    1930:	e6 e5       	ldi	r30, 0x56	; 86
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	88 23       	and	r24, r24
    1938:	dc f7       	brge	.-10     	; 0x1930 <TWI_write+0x1c>
}
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <TWI_readWithACK>:
uint8 TWI_readWithACK(void)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    194a:	e6 e5       	ldi	r30, 0x56	; 86
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	84 ec       	ldi	r24, 0xC4	; 196
    1950:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(!READ_BIT(TWCR,TWINT));
    1952:	e6 e5       	ldi	r30, 0x56	; 86
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	88 23       	and	r24, r24
    195a:	dc f7       	brge	.-10     	; 0x1952 <TWI_readWithACK+0x10>
	/* Read Data */
	return TWDR;
    195c:	e3 e2       	ldi	r30, 0x23	; 35
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
}
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <TWI_readWithNACK>:
uint8 TWI_readWithNACK(void)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending NACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1970:	e6 e5       	ldi	r30, 0x56	; 86
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	84 e8       	ldi	r24, 0x84	; 132
    1976:	80 83       	st	Z, r24
	CLEAR_BIT(TWCR, TWEA);
    1978:	a6 e5       	ldi	r26, 0x56	; 86
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e6 e5       	ldi	r30, 0x56	; 86
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8f 7b       	andi	r24, 0xBF	; 191
    1984:	8c 93       	st	X, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(!READ_BIT(TWCR,TWINT));
    1986:	e6 e5       	ldi	r30, 0x56	; 86
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	88 23       	and	r24, r24
    198e:	dc f7       	brge	.-10     	; 0x1986 <TWI_readWithNACK+0x1e>
	/* Read Data */
	return TWDR;
    1990:	e3 e2       	ldi	r30, 0x23	; 35
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <TWI_getStatus>:
uint8 TWI_getStatus(void)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	0f 92       	push	r0
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits (pre-scaler and unused bits) and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    19a6:	e1 e2       	ldi	r30, 0x21	; 33
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	88 7f       	andi	r24, 0xF8	; 248
    19ae:	89 83       	std	Y+1, r24	; 0x01
	return status;
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <TWI_setCallBack>:

#if TWI_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
Std_ReturnType TWI_setCallBack(void (*ptr_func)(void))
{
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <TWI_setCallBack+0x6>
    19c0:	0f 92       	push	r0
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	9b 83       	std	Y+3, r25	; 0x03
    19c8:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	89 83       	std	Y+1, r24	; 0x01
	if(ptr_func)
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	9b 81       	ldd	r25, Y+3	; 0x03
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	71 f0       	breq	.+28     	; 0x19f2 <TWI_setCallBack+0x38>
	{
		TWI_callBackNotify = ptr_func;
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	9b 81       	ldd	r25, Y+3	; 0x03
    19da:	90 93 ab 01 	sts	0x01AB, r25
    19de:	80 93 aa 01 	sts	0x01AA, r24
		// enable TWI interrupt
		SET_BIT(TWCR, TWIE);
    19e2:	a6 e5       	ldi	r26, 0x56	; 86
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e6 e5       	ldi	r30, 0x56	; 86
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	81 60       	ori	r24, 0x01	; 1
    19ee:	8c 93       	st	X, r24
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <TWI_setCallBack+0x42>
	}
	else if(NULL == ptr_func)
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	9b 81       	ldd	r25, Y+3	; 0x03
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	09 f4       	brne	.+2      	; 0x19fc <TWI_setCallBack+0x42>
	{
		ret = E_NOT_OK;
    19fa:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <__vector_17>:
#endif
// ISR code
#if TWI_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
ISR(TWI_vect)
{
    1a0a:	1f 92       	push	r1
    1a0c:	0f 92       	push	r0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	0f 92       	push	r0
    1a12:	11 24       	eor	r1, r1
    1a14:	2f 93       	push	r18
    1a16:	3f 93       	push	r19
    1a18:	4f 93       	push	r20
    1a1a:	5f 93       	push	r21
    1a1c:	6f 93       	push	r22
    1a1e:	7f 93       	push	r23
    1a20:	8f 93       	push	r24
    1a22:	9f 93       	push	r25
    1a24:	af 93       	push	r26
    1a26:	bf 93       	push	r27
    1a28:	ef 93       	push	r30
    1a2a:	ff 93       	push	r31
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
	if(TWI_callBackNotify)
    1a34:	80 91 aa 01 	lds	r24, 0x01AA
    1a38:	90 91 ab 01 	lds	r25, 0x01AB
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	29 f0       	breq	.+10     	; 0x1a4a <__vector_17+0x40>
		TWI_callBackNotify();
    1a40:	e0 91 aa 01 	lds	r30, 0x01AA
    1a44:	f0 91 ab 01 	lds	r31, 0x01AB
    1a48:	09 95       	icall
	// TWI interrupt flag must be Cleared at end of ISR
	SET_BIT(TWCR, TWINT);
    1a4a:	a6 e5       	ldi	r26, 0x56	; 86
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e6 e5       	ldi	r30, 0x56	; 86
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	80 68       	ori	r24, 0x80	; 128
    1a56:	8c 93       	st	X, r24
}
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	ff 91       	pop	r31
    1a5e:	ef 91       	pop	r30
    1a60:	bf 91       	pop	r27
    1a62:	af 91       	pop	r26
    1a64:	9f 91       	pop	r25
    1a66:	8f 91       	pop	r24
    1a68:	7f 91       	pop	r23
    1a6a:	6f 91       	pop	r22
    1a6c:	5f 91       	pop	r21
    1a6e:	4f 91       	pop	r20
    1a70:	3f 91       	pop	r19
    1a72:	2f 91       	pop	r18
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	0f 90       	pop	r0
    1a7a:	1f 90       	pop	r1
    1a7c:	18 95       	reti

00001a7e <GPIO_pin_direction_initialize>:
volatile uint8 *PORT_registers[4] = {&PORTA, &PORTB, &PORTC, &PORTD};
volatile uint8 *PIN_registers[4] = {&PINA, &PINB, &PINC, &PIND};


Std_ReturnType GPIO_pin_direction_initialize(const gpio_config_pin_t* gpio_obj)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <GPIO_pin_direction_initialize+0x6>
    1a84:	0f 92       	push	r0
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	9b 83       	std	Y+3, r25	; 0x03
    1a8c:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	9b 81       	ldd	r25, Y+3	; 0x03
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	11 f4       	brne	.+4      	; 0x1a9e <GPIO_pin_direction_initialize+0x20>
	{
		ret = E_NOT_OK;
    1a9a:	19 82       	std	Y+1, r1	; 0x01
    1a9c:	6e c0       	rjmp	.+220    	; 0x1b7a <GPIO_pin_direction_initialize+0xfc>
	}
	else
	{
		ret = E_OK;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	89 83       	std	Y+1, r24	; 0x01
		if(gpio_obj->direction == GPIO_DIRECTION_INPUT)
    1aa2:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa4:	fb 81       	ldd	r31, Y+3	; 0x03
    1aa6:	80 81       	ld	r24, Z
    1aa8:	80 74       	andi	r24, 0x40	; 64
    1aaa:	88 23       	and	r24, r24
    1aac:	89 f5       	brne	.+98     	; 0x1b10 <GPIO_pin_direction_initialize+0x92>
		{
			CLEAR_BIT(*DDR_registers[gpio_obj->port], gpio_obj->pin);
    1aae:	ea 81       	ldd	r30, Y+2	; 0x02
    1ab0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab2:	80 81       	ld	r24, Z
    1ab4:	87 70       	andi	r24, 0x07	; 7
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	fc 01       	movw	r30, r24
    1ac0:	e8 59       	subi	r30, 0x98	; 152
    1ac2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac4:	a0 81       	ld	r26, Z
    1ac6:	b1 81       	ldd	r27, Z+1	; 0x01
    1ac8:	ea 81       	ldd	r30, Y+2	; 0x02
    1aca:	fb 81       	ldd	r31, Y+3	; 0x03
    1acc:	80 81       	ld	r24, Z
    1ace:	87 70       	andi	r24, 0x07	; 7
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	fc 01       	movw	r30, r24
    1ada:	e8 59       	subi	r30, 0x98	; 152
    1adc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ade:	01 90       	ld	r0, Z+
    1ae0:	f0 81       	ld	r31, Z
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	40 81       	ld	r20, Z
    1ae6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae8:	fb 81       	ldd	r31, Y+3	; 0x03
    1aea:	80 81       	ld	r24, Z
    1aec:	86 95       	lsr	r24
    1aee:	86 95       	lsr	r24
    1af0:	86 95       	lsr	r24
    1af2:	87 70       	andi	r24, 0x07	; 7
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	02 2e       	mov	r0, r18
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <GPIO_pin_direction_initialize+0x86>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	0a 94       	dec	r0
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <GPIO_pin_direction_initialize+0x82>
    1b08:	80 95       	com	r24
    1b0a:	84 23       	and	r24, r20
    1b0c:	8c 93       	st	X, r24
    1b0e:	35 c0       	rjmp	.+106    	; 0x1b7a <GPIO_pin_direction_initialize+0xfc>
		}
		else if(gpio_obj->direction == GPIO_DIRECTION_OUTPUT)
    1b10:	ea 81       	ldd	r30, Y+2	; 0x02
    1b12:	fb 81       	ldd	r31, Y+3	; 0x03
    1b14:	80 81       	ld	r24, Z
    1b16:	80 74       	andi	r24, 0x40	; 64
    1b18:	88 23       	and	r24, r24
    1b1a:	79 f1       	breq	.+94     	; 0x1b7a <GPIO_pin_direction_initialize+0xfc>
		{
			SET_BIT(*DDR_registers[gpio_obj->port], gpio_obj->pin);
    1b1c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b1e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b20:	80 81       	ld	r24, Z
    1b22:	87 70       	andi	r24, 0x07	; 7
    1b24:	88 2f       	mov	r24, r24
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	e8 59       	subi	r30, 0x98	; 152
    1b30:	fe 4f       	sbci	r31, 0xFE	; 254
    1b32:	a0 81       	ld	r26, Z
    1b34:	b1 81       	ldd	r27, Z+1	; 0x01
    1b36:	ea 81       	ldd	r30, Y+2	; 0x02
    1b38:	fb 81       	ldd	r31, Y+3	; 0x03
    1b3a:	80 81       	ld	r24, Z
    1b3c:	87 70       	andi	r24, 0x07	; 7
    1b3e:	88 2f       	mov	r24, r24
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	fc 01       	movw	r30, r24
    1b48:	e8 59       	subi	r30, 0x98	; 152
    1b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b4c:	01 90       	ld	r0, Z+
    1b4e:	f0 81       	ld	r31, Z
    1b50:	e0 2d       	mov	r30, r0
    1b52:	40 81       	ld	r20, Z
    1b54:	ea 81       	ldd	r30, Y+2	; 0x02
    1b56:	fb 81       	ldd	r31, Y+3	; 0x03
    1b58:	80 81       	ld	r24, Z
    1b5a:	86 95       	lsr	r24
    1b5c:	86 95       	lsr	r24
    1b5e:	86 95       	lsr	r24
    1b60:	87 70       	andi	r24, 0x07	; 7
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <GPIO_pin_direction_initialize+0xf4>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <GPIO_pin_direction_initialize+0xf0>
    1b76:	84 2b       	or	r24, r20
    1b78:	8c 93       	st	X, r24
		}
	}
	return ret;
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <GPIO_pin_initialize>:
Std_ReturnType GPIO_pin_initialize(const gpio_config_pin_t* gpio_obj)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <GPIO_pin_initialize+0x6>
    1b8e:	0f 92       	push	r0
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	9b 83       	std	Y+3, r25	; 0x03
    1b96:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	89 83       	std	Y+1, r24	; 0x01
		if (NULL == gpio_obj)
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	11 f4       	brne	.+4      	; 0x1ba8 <GPIO_pin_initialize+0x20>
		{
			ret = E_NOT_OK;
    1ba4:	19 82       	std	Y+1, r1	; 0x01
    1ba6:	12 c0       	rjmp	.+36     	; 0x1bcc <GPIO_pin_initialize+0x44>
		}
		else
		{
			ret = GPIO_pin_direction_initialize(gpio_obj);
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	9b 81       	ldd	r25, Y+3	; 0x03
    1bac:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_pin_direction_initialize>
    1bb0:	89 83       	std	Y+1, r24	; 0x01
			ret = GPIO_pin_write_logic(gpio_obj, gpio_obj->logic);
    1bb2:	ea 81       	ldd	r30, Y+2	; 0x02
    1bb4:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb6:	80 81       	ld	r24, Z
    1bb8:	88 1f       	adc	r24, r24
    1bba:	88 27       	eor	r24, r24
    1bbc:	88 1f       	adc	r24, r24
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc4:	62 2f       	mov	r22, r18
    1bc6:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_pin_write_logic>
    1bca:	89 83       	std	Y+1, r24	; 0x01
		}
		return ret;
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <GPIO_pin_read_direction>:
Std_ReturnType GPIO_pin_read_direction(const gpio_config_pin_t* gpio_obj, uint8* Direction_read)
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <GPIO_pin_read_direction+0x6>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <GPIO_pin_read_direction+0x8>
    1be2:	0f 92       	push	r0
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	9b 83       	std	Y+3, r25	; 0x03
    1bea:	8a 83       	std	Y+2, r24	; 0x02
    1bec:	7d 83       	std	Y+5, r23	; 0x05
    1bee:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	11 f4       	brne	.+4      	; 0x1c00 <GPIO_pin_read_direction+0x26>
	{
		ret = E_NOT_OK;
    1bfc:	19 82       	std	Y+1, r1	; 0x01
    1bfe:	25 c0       	rjmp	.+74     	; 0x1c4a <GPIO_pin_read_direction+0x70>
	}
	else
	{
		*Direction_read = READ_BIT(*DDR_registers[gpio_obj->port], gpio_obj->pin);
    1c00:	ea 81       	ldd	r30, Y+2	; 0x02
    1c02:	fb 81       	ldd	r31, Y+3	; 0x03
    1c04:	80 81       	ld	r24, Z
    1c06:	87 70       	andi	r24, 0x07	; 7
    1c08:	88 2f       	mov	r24, r24
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	fc 01       	movw	r30, r24
    1c12:	e8 59       	subi	r30, 0x98	; 152
    1c14:	fe 4f       	sbci	r31, 0xFE	; 254
    1c16:	01 90       	ld	r0, Z+
    1c18:	f0 81       	ld	r31, Z
    1c1a:	e0 2d       	mov	r30, r0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	ea 81       	ldd	r30, Y+2	; 0x02
    1c24:	fb 81       	ldd	r31, Y+3	; 0x03
    1c26:	80 81       	ld	r24, Z
    1c28:	86 95       	lsr	r24
    1c2a:	86 95       	lsr	r24
    1c2c:	86 95       	lsr	r24
    1c2e:	87 70       	andi	r24, 0x07	; 7
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a9 01       	movw	r20, r18
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <GPIO_pin_read_direction+0x62>
    1c38:	55 95       	asr	r21
    1c3a:	47 95       	ror	r20
    1c3c:	8a 95       	dec	r24
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <GPIO_pin_read_direction+0x5e>
    1c40:	ca 01       	movw	r24, r20
    1c42:	81 70       	andi	r24, 0x01	; 1
    1c44:	ec 81       	ldd	r30, Y+4	; 0x04
    1c46:	fd 81       	ldd	r31, Y+5	; 0x05
    1c48:	80 83       	st	Z, r24
	}
	return ret;
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <GPIO_pin_write_logic>:
Std_ReturnType GPIO_pin_write_logic(const gpio_config_pin_t* gpio_obj, uint8 logic)
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <GPIO_pin_write_logic+0x6>
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <GPIO_pin_write_logic+0x8>
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	9b 83       	std	Y+3, r25	; 0x03
    1c6a:	8a 83       	std	Y+2, r24	; 0x02
    1c6c:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	9b 81       	ldd	r25, Y+3	; 0x03
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	11 f4       	brne	.+4      	; 0x1c7e <GPIO_pin_write_logic+0x22>
	{
		ret = E_NOT_OK;
    1c7a:	19 82       	std	Y+1, r1	; 0x01
    1c7c:	66 c0       	rjmp	.+204    	; 0x1d4a <GPIO_pin_write_logic+0xee>
	}
	else
	{
		if(logic == GPIO_HIGH)
    1c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	81 f5       	brne	.+96     	; 0x1ce4 <GPIO_pin_write_logic+0x88>
		{
			SET_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    1c84:	ea 81       	ldd	r30, Y+2	; 0x02
    1c86:	fb 81       	ldd	r31, Y+3	; 0x03
    1c88:	80 81       	ld	r24, Z
    1c8a:	87 70       	andi	r24, 0x07	; 7
    1c8c:	88 2f       	mov	r24, r24
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	fc 01       	movw	r30, r24
    1c96:	e0 59       	subi	r30, 0x90	; 144
    1c98:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9a:	a0 81       	ld	r26, Z
    1c9c:	b1 81       	ldd	r27, Z+1	; 0x01
    1c9e:	ea 81       	ldd	r30, Y+2	; 0x02
    1ca0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ca2:	80 81       	ld	r24, Z
    1ca4:	87 70       	andi	r24, 0x07	; 7
    1ca6:	88 2f       	mov	r24, r24
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	fc 01       	movw	r30, r24
    1cb0:	e0 59       	subi	r30, 0x90	; 144
    1cb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb4:	01 90       	ld	r0, Z+
    1cb6:	f0 81       	ld	r31, Z
    1cb8:	e0 2d       	mov	r30, r0
    1cba:	40 81       	ld	r20, Z
    1cbc:	ea 81       	ldd	r30, Y+2	; 0x02
    1cbe:	fb 81       	ldd	r31, Y+3	; 0x03
    1cc0:	80 81       	ld	r24, Z
    1cc2:	86 95       	lsr	r24
    1cc4:	86 95       	lsr	r24
    1cc6:	86 95       	lsr	r24
    1cc8:	87 70       	andi	r24, 0x07	; 7
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <GPIO_pin_write_logic+0x7e>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <GPIO_pin_write_logic+0x7a>
    1cde:	84 2b       	or	r24, r20
    1ce0:	8c 93       	st	X, r24
    1ce2:	33 c0       	rjmp	.+102    	; 0x1d4a <GPIO_pin_write_logic+0xee>
		}
		else if(logic == GPIO_LOW)
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	88 23       	and	r24, r24
    1ce8:	81 f5       	brne	.+96     	; 0x1d4a <GPIO_pin_write_logic+0xee>
		{
			CLEAR_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    1cea:	ea 81       	ldd	r30, Y+2	; 0x02
    1cec:	fb 81       	ldd	r31, Y+3	; 0x03
    1cee:	80 81       	ld	r24, Z
    1cf0:	87 70       	andi	r24, 0x07	; 7
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	e0 59       	subi	r30, 0x90	; 144
    1cfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1d00:	a0 81       	ld	r26, Z
    1d02:	b1 81       	ldd	r27, Z+1	; 0x01
    1d04:	ea 81       	ldd	r30, Y+2	; 0x02
    1d06:	fb 81       	ldd	r31, Y+3	; 0x03
    1d08:	80 81       	ld	r24, Z
    1d0a:	87 70       	andi	r24, 0x07	; 7
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	fc 01       	movw	r30, r24
    1d16:	e0 59       	subi	r30, 0x90	; 144
    1d18:	fe 4f       	sbci	r31, 0xFE	; 254
    1d1a:	01 90       	ld	r0, Z+
    1d1c:	f0 81       	ld	r31, Z
    1d1e:	e0 2d       	mov	r30, r0
    1d20:	40 81       	ld	r20, Z
    1d22:	ea 81       	ldd	r30, Y+2	; 0x02
    1d24:	fb 81       	ldd	r31, Y+3	; 0x03
    1d26:	80 81       	ld	r24, Z
    1d28:	86 95       	lsr	r24
    1d2a:	86 95       	lsr	r24
    1d2c:	86 95       	lsr	r24
    1d2e:	87 70       	andi	r24, 0x07	; 7
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	02 2e       	mov	r0, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <GPIO_pin_write_logic+0xe4>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	0a 94       	dec	r0
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <GPIO_pin_write_logic+0xe0>
    1d44:	80 95       	com	r24
    1d46:	84 23       	and	r24, r20
    1d48:	8c 93       	st	X, r24
		}
	}
	return ret;
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <GPIO_pin_read_logic>:
Std_ReturnType GPIO_pin_read_logic(const gpio_config_pin_t* gpio_obj, uint8* logic_res)
{
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <GPIO_pin_read_logic+0x6>
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <GPIO_pin_read_logic+0x8>
    1d62:	0f 92       	push	r0
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	9b 83       	std	Y+3, r25	; 0x03
    1d6a:	8a 83       	std	Y+2, r24	; 0x02
    1d6c:	7d 83       	std	Y+5, r23	; 0x05
    1d6e:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	9b 81       	ldd	r25, Y+3	; 0x03
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	11 f4       	brne	.+4      	; 0x1d80 <GPIO_pin_read_logic+0x26>
	{
		ret = E_NOT_OK;
    1d7c:	19 82       	std	Y+1, r1	; 0x01
    1d7e:	25 c0       	rjmp	.+74     	; 0x1dca <GPIO_pin_read_logic+0x70>
	}
	else
	{
		*logic_res = READ_BIT(*PIN_registers[gpio_obj->port], gpio_obj->pin);
    1d80:	ea 81       	ldd	r30, Y+2	; 0x02
    1d82:	fb 81       	ldd	r31, Y+3	; 0x03
    1d84:	80 81       	ld	r24, Z
    1d86:	87 70       	andi	r24, 0x07	; 7
    1d88:	88 2f       	mov	r24, r24
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	fc 01       	movw	r30, r24
    1d92:	e8 58       	subi	r30, 0x88	; 136
    1d94:	fe 4f       	sbci	r31, 0xFE	; 254
    1d96:	01 90       	ld	r0, Z+
    1d98:	f0 81       	ld	r31, Z
    1d9a:	e0 2d       	mov	r30, r0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	ea 81       	ldd	r30, Y+2	; 0x02
    1da4:	fb 81       	ldd	r31, Y+3	; 0x03
    1da6:	80 81       	ld	r24, Z
    1da8:	86 95       	lsr	r24
    1daa:	86 95       	lsr	r24
    1dac:	86 95       	lsr	r24
    1dae:	87 70       	andi	r24, 0x07	; 7
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	a9 01       	movw	r20, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <GPIO_pin_read_logic+0x62>
    1db8:	55 95       	asr	r21
    1dba:	47 95       	ror	r20
    1dbc:	8a 95       	dec	r24
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <GPIO_pin_read_logic+0x5e>
    1dc0:	ca 01       	movw	r24, r20
    1dc2:	81 70       	andi	r24, 0x01	; 1
    1dc4:	ec 81       	ldd	r30, Y+4	; 0x04
    1dc6:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc8:	80 83       	st	Z, r24
	}
	return ret;
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <GPIO_pin_toggle_logic>:
Std_ReturnType GPIO_pin_toggle_logic(const gpio_config_pin_t* gpio_obj)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <GPIO_pin_toggle_logic+0x6>
    1de2:	0f 92       	push	r0
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	9b 83       	std	Y+3, r25	; 0x03
    1dea:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	9b 81       	ldd	r25, Y+3	; 0x03
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	11 f4       	brne	.+4      	; 0x1dfc <GPIO_pin_toggle_logic+0x20>
	{
		ret = E_NOT_OK;
    1df8:	19 82       	std	Y+1, r1	; 0x01
    1dfa:	2f c0       	rjmp	.+94     	; 0x1e5a <GPIO_pin_toggle_logic+0x7e>
	}
	else
	{
		TOGGLE_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    1dfc:	ea 81       	ldd	r30, Y+2	; 0x02
    1dfe:	fb 81       	ldd	r31, Y+3	; 0x03
    1e00:	80 81       	ld	r24, Z
    1e02:	87 70       	andi	r24, 0x07	; 7
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	e0 59       	subi	r30, 0x90	; 144
    1e10:	fe 4f       	sbci	r31, 0xFE	; 254
    1e12:	a0 81       	ld	r26, Z
    1e14:	b1 81       	ldd	r27, Z+1	; 0x01
    1e16:	ea 81       	ldd	r30, Y+2	; 0x02
    1e18:	fb 81       	ldd	r31, Y+3	; 0x03
    1e1a:	80 81       	ld	r24, Z
    1e1c:	87 70       	andi	r24, 0x07	; 7
    1e1e:	88 2f       	mov	r24, r24
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	fc 01       	movw	r30, r24
    1e28:	e0 59       	subi	r30, 0x90	; 144
    1e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2c:	01 90       	ld	r0, Z+
    1e2e:	f0 81       	ld	r31, Z
    1e30:	e0 2d       	mov	r30, r0
    1e32:	40 81       	ld	r20, Z
    1e34:	ea 81       	ldd	r30, Y+2	; 0x02
    1e36:	fb 81       	ldd	r31, Y+3	; 0x03
    1e38:	80 81       	ld	r24, Z
    1e3a:	86 95       	lsr	r24
    1e3c:	86 95       	lsr	r24
    1e3e:	86 95       	lsr	r24
    1e40:	87 70       	andi	r24, 0x07	; 7
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	02 2e       	mov	r0, r18
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <GPIO_pin_toggle_logic+0x76>
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	0a 94       	dec	r0
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <GPIO_pin_toggle_logic+0x72>
    1e56:	84 27       	eor	r24, r20
    1e58:	8c 93       	st	X, r24
	}
	return ret;
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <GPIO_pin_PullUp_Enable>:
Std_ReturnType GPIO_pin_PullUp_Enable(const gpio_config_pin_t* gpio_obj)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <GPIO_pin_PullUp_Enable+0x6>
    1e6e:	0f 92       	push	r0
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	9b 83       	std	Y+3, r25	; 0x03
    1e76:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	11 f4       	brne	.+4      	; 0x1e88 <GPIO_pin_PullUp_Enable+0x20>
	{
		ret = E_NOT_OK;
    1e84:	19 82       	std	Y+1, r1	; 0x01
    1e86:	65 c0       	rjmp	.+202    	; 0x1f52 <GPIO_pin_PullUp_Enable+0xea>
	}
	else
	{
		CLEAR_BIT(*(DDR_registers[gpio_obj->port]), gpio_obj->pin);
    1e88:	ea 81       	ldd	r30, Y+2	; 0x02
    1e8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e8c:	80 81       	ld	r24, Z
    1e8e:	87 70       	andi	r24, 0x07	; 7
    1e90:	88 2f       	mov	r24, r24
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	fc 01       	movw	r30, r24
    1e9a:	e8 59       	subi	r30, 0x98	; 152
    1e9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e9e:	a0 81       	ld	r26, Z
    1ea0:	b1 81       	ldd	r27, Z+1	; 0x01
    1ea2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ea4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ea6:	80 81       	ld	r24, Z
    1ea8:	87 70       	andi	r24, 0x07	; 7
    1eaa:	88 2f       	mov	r24, r24
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	e8 59       	subi	r30, 0x98	; 152
    1eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb8:	01 90       	ld	r0, Z+
    1eba:	f0 81       	ld	r31, Z
    1ebc:	e0 2d       	mov	r30, r0
    1ebe:	40 81       	ld	r20, Z
    1ec0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ec2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec4:	80 81       	ld	r24, Z
    1ec6:	86 95       	lsr	r24
    1ec8:	86 95       	lsr	r24
    1eca:	86 95       	lsr	r24
    1ecc:	87 70       	andi	r24, 0x07	; 7
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <GPIO_pin_PullUp_Enable+0x74>
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	2a 95       	dec	r18
    1ede:	e2 f7       	brpl	.-8      	; 0x1ed8 <GPIO_pin_PullUp_Enable+0x70>
    1ee0:	80 95       	com	r24
    1ee2:	84 23       	and	r24, r20
    1ee4:	8c 93       	st	X, r24
		SET_BIT(*(PORT_registers[gpio_obj->port]), gpio_obj->pin);
    1ee6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ee8:	fb 81       	ldd	r31, Y+3	; 0x03
    1eea:	80 81       	ld	r24, Z
    1eec:	87 70       	andi	r24, 0x07	; 7
    1eee:	88 2f       	mov	r24, r24
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	e0 59       	subi	r30, 0x90	; 144
    1efa:	fe 4f       	sbci	r31, 0xFE	; 254
    1efc:	a0 81       	ld	r26, Z
    1efe:	b1 81       	ldd	r27, Z+1	; 0x01
    1f00:	ea 81       	ldd	r30, Y+2	; 0x02
    1f02:	fb 81       	ldd	r31, Y+3	; 0x03
    1f04:	80 81       	ld	r24, Z
    1f06:	87 70       	andi	r24, 0x07	; 7
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	fc 01       	movw	r30, r24
    1f12:	e0 59       	subi	r30, 0x90	; 144
    1f14:	fe 4f       	sbci	r31, 0xFE	; 254
    1f16:	01 90       	ld	r0, Z+
    1f18:	f0 81       	ld	r31, Z
    1f1a:	e0 2d       	mov	r30, r0
    1f1c:	40 81       	ld	r20, Z
    1f1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f20:	fb 81       	ldd	r31, Y+3	; 0x03
    1f22:	80 81       	ld	r24, Z
    1f24:	86 95       	lsr	r24
    1f26:	86 95       	lsr	r24
    1f28:	86 95       	lsr	r24
    1f2a:	87 70       	andi	r24, 0x07	; 7
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	02 2e       	mov	r0, r18
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <GPIO_pin_PullUp_Enable+0xd4>
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	0a 94       	dec	r0
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <GPIO_pin_PullUp_Enable+0xd0>
    1f40:	84 2b       	or	r24, r20
    1f42:	8c 93       	st	X, r24
		CLEAR_BIT(SFIOR, PUD);
    1f44:	a0 e5       	ldi	r26, 0x50	; 80
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e0 e5       	ldi	r30, 0x50	; 80
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	8b 7f       	andi	r24, 0xFB	; 251
    1f50:	8c 93       	st	X, r24
	}
	return ret;
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <GPIO_pin_PullUp_Disable>:
Std_ReturnType GPIO_pin_PullUp_Disable(const gpio_config_pin_t* gpio_obj)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <GPIO_pin_PullUp_Disable+0x6>
    1f66:	0f 92       	push	r0
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	9b 83       	std	Y+3, r25	; 0x03
    1f6e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	9b 81       	ldd	r25, Y+3	; 0x03
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	11 f4       	brne	.+4      	; 0x1f80 <GPIO_pin_PullUp_Disable+0x20>
	{
		ret = E_NOT_OK;
    1f7c:	19 82       	std	Y+1, r1	; 0x01
    1f7e:	30 c0       	rjmp	.+96     	; 0x1fe0 <GPIO_pin_PullUp_Disable+0x80>
	}
	else
	{
		CLEAR_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    1f80:	ea 81       	ldd	r30, Y+2	; 0x02
    1f82:	fb 81       	ldd	r31, Y+3	; 0x03
    1f84:	80 81       	ld	r24, Z
    1f86:	87 70       	andi	r24, 0x07	; 7
    1f88:	88 2f       	mov	r24, r24
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	fc 01       	movw	r30, r24
    1f92:	e0 59       	subi	r30, 0x90	; 144
    1f94:	fe 4f       	sbci	r31, 0xFE	; 254
    1f96:	a0 81       	ld	r26, Z
    1f98:	b1 81       	ldd	r27, Z+1	; 0x01
    1f9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f9e:	80 81       	ld	r24, Z
    1fa0:	87 70       	andi	r24, 0x07	; 7
    1fa2:	88 2f       	mov	r24, r24
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	fc 01       	movw	r30, r24
    1fac:	e0 59       	subi	r30, 0x90	; 144
    1fae:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb0:	01 90       	ld	r0, Z+
    1fb2:	f0 81       	ld	r31, Z
    1fb4:	e0 2d       	mov	r30, r0
    1fb6:	40 81       	ld	r20, Z
    1fb8:	ea 81       	ldd	r30, Y+2	; 0x02
    1fba:	fb 81       	ldd	r31, Y+3	; 0x03
    1fbc:	80 81       	ld	r24, Z
    1fbe:	86 95       	lsr	r24
    1fc0:	86 95       	lsr	r24
    1fc2:	86 95       	lsr	r24
    1fc4:	87 70       	andi	r24, 0x07	; 7
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	02 2e       	mov	r0, r18
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <GPIO_pin_PullUp_Disable+0x76>
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	0a 94       	dec	r0
    1fd8:	e2 f7       	brpl	.-8      	; 0x1fd2 <GPIO_pin_PullUp_Disable+0x72>
    1fda:	80 95       	com	r24
    1fdc:	84 23       	and	r24, r20
    1fde:	8c 93       	st	X, r24
	}
	return ret;
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <GPIO_port_direction_initialize>:

Std_ReturnType GPIO_port_direction_initialize(gpio_port_t _port, uint8 port_direction)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <GPIO_port_direction_initialize+0x6>
    1ff4:	0f 92       	push	r0
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	8a 83       	std	Y+2, r24	; 0x02
    1ffc:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	84 30       	cpi	r24, 0x04	; 4
    2006:	10 f0       	brcs	.+4      	; 0x200c <GPIO_port_direction_initialize+0x1e>
	{
		ret = E_NOT_OK;
    2008:	19 82       	std	Y+1, r1	; 0x01
    200a:	0d c0       	rjmp	.+26     	; 0x2026 <GPIO_port_direction_initialize+0x38>
	}
	else
	{
		*DDR_registers[_port] = port_direction;
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	88 2f       	mov	r24, r24
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	fc 01       	movw	r30, r24
    2018:	e8 59       	subi	r30, 0x98	; 152
    201a:	fe 4f       	sbci	r31, 0xFE	; 254
    201c:	01 90       	ld	r0, Z+
    201e:	f0 81       	ld	r31, Z
    2020:	e0 2d       	mov	r30, r0
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	80 83       	st	Z, r24
	}
	return ret;
    2026:	89 81       	ldd	r24, Y+1	; 0x01
}
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <GPIO_port_initialize>:
Std_ReturnType GPIO_port_initialize(gpio_port_t _port, uint8 port_direction, uint8 port_logic)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	00 d0       	rcall	.+0      	; 0x203a <GPIO_port_initialize+0x6>
    203a:	00 d0       	rcall	.+0      	; 0x203c <GPIO_port_initialize+0x8>
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	8a 83       	std	Y+2, r24	; 0x02
    2042:	6b 83       	std	Y+3, r22	; 0x03
    2044:	4c 83       	std	Y+4, r20	; 0x04
	Std_ReturnType ret = E_OK;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	84 30       	cpi	r24, 0x04	; 4
    204e:	10 f0       	brcs	.+4      	; 0x2054 <GPIO_port_initialize+0x20>
	{
		ret = E_NOT_OK;
    2050:	19 82       	std	Y+1, r1	; 0x01
    2052:	1a c0       	rjmp	.+52     	; 0x2088 <GPIO_port_initialize+0x54>
	}
	else
	{
		*DDR_registers[_port] = port_direction;
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	88 2f       	mov	r24, r24
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	fc 01       	movw	r30, r24
    2060:	e8 59       	subi	r30, 0x98	; 152
    2062:	fe 4f       	sbci	r31, 0xFE	; 254
    2064:	01 90       	ld	r0, Z+
    2066:	f0 81       	ld	r31, Z
    2068:	e0 2d       	mov	r30, r0
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	80 83       	st	Z, r24
		*PORT_registers[_port] = port_logic;
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	88 2f       	mov	r24, r24
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	fc 01       	movw	r30, r24
    207a:	e0 59       	subi	r30, 0x90	; 144
    207c:	fe 4f       	sbci	r31, 0xFE	; 254
    207e:	01 90       	ld	r0, Z+
    2080:	f0 81       	ld	r31, Z
    2082:	e0 2d       	mov	r30, r0
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	80 83       	st	Z, r24
	}
		return ret;
    2088:	89 81       	ldd	r24, Y+1	; 0x01
}
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <GPIO_port_read_direction>:
Std_ReturnType GPIO_port_read_direction(gpio_port_t _port, uint8* port_direction)
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	00 d0       	rcall	.+0      	; 0x209e <GPIO_port_read_direction+0x6>
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <GPIO_port_read_direction+0x8>
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	8a 83       	std	Y+2, r24	; 0x02
    20a6:	7c 83       	std	Y+4, r23	; 0x04
    20a8:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	84 30       	cpi	r24, 0x04	; 4
    20b2:	10 f0       	brcs	.+4      	; 0x20b8 <GPIO_port_read_direction+0x20>
	{
		ret = E_NOT_OK;
    20b4:	19 82       	std	Y+1, r1	; 0x01
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <GPIO_port_read_direction+0x3e>
	}
	else
	{
		*port_direction = *DDR_registers[_port];
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	88 2f       	mov	r24, r24
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	fc 01       	movw	r30, r24
    20c4:	e8 59       	subi	r30, 0x98	; 152
    20c6:	fe 4f       	sbci	r31, 0xFE	; 254
    20c8:	01 90       	ld	r0, Z+
    20ca:	f0 81       	ld	r31, Z
    20cc:	e0 2d       	mov	r30, r0
    20ce:	80 81       	ld	r24, Z
    20d0:	eb 81       	ldd	r30, Y+3	; 0x03
    20d2:	fc 81       	ldd	r31, Y+4	; 0x04
    20d4:	80 83       	st	Z, r24
	}
	return ret;
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <GPIO_port_write_logic>:
Std_ReturnType GPIO_port_write_logic(gpio_port_t _port, uint8 port_logic)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <GPIO_port_write_logic+0x6>
    20ec:	0f 92       	push	r0
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	8a 83       	std	Y+2, r24	; 0x02
    20f4:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	84 30       	cpi	r24, 0x04	; 4
    20fe:	10 f0       	brcs	.+4      	; 0x2104 <GPIO_port_write_logic+0x1e>
	{
		ret = E_NOT_OK;
    2100:	19 82       	std	Y+1, r1	; 0x01
    2102:	0d c0       	rjmp	.+26     	; 0x211e <GPIO_port_write_logic+0x38>
	}
	else
	{
		*PORT_registers[_port] = port_logic;
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	88 2f       	mov	r24, r24
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	fc 01       	movw	r30, r24
    2110:	e0 59       	subi	r30, 0x90	; 144
    2112:	fe 4f       	sbci	r31, 0xFE	; 254
    2114:	01 90       	ld	r0, Z+
    2116:	f0 81       	ld	r31, Z
    2118:	e0 2d       	mov	r30, r0
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	80 83       	st	Z, r24
	}
	return ret;
    211e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <GPIO_port_read_logic>:
Std_ReturnType GPIO_port_read_logic(gpio_port_t _port, uint8* port_logic)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	00 d0       	rcall	.+0      	; 0x2132 <GPIO_port_read_logic+0x6>
    2132:	00 d0       	rcall	.+0      	; 0x2134 <GPIO_port_read_logic+0x8>
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	8a 83       	std	Y+2, r24	; 0x02
    213a:	7c 83       	std	Y+4, r23	; 0x04
    213c:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	84 30       	cpi	r24, 0x04	; 4
    2146:	10 f0       	brcs	.+4      	; 0x214c <GPIO_port_read_logic+0x20>
	{
		ret = E_NOT_OK;
    2148:	19 82       	std	Y+1, r1	; 0x01
    214a:	0f c0       	rjmp	.+30     	; 0x216a <GPIO_port_read_logic+0x3e>
	}
	else
	{
		*port_logic = *PIN_registers[_port];
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	fc 01       	movw	r30, r24
    2158:	e8 58       	subi	r30, 0x88	; 136
    215a:	fe 4f       	sbci	r31, 0xFE	; 254
    215c:	01 90       	ld	r0, Z+
    215e:	f0 81       	ld	r31, Z
    2160:	e0 2d       	mov	r30, r0
    2162:	80 81       	ld	r24, Z
    2164:	eb 81       	ldd	r30, Y+3	; 0x03
    2166:	fc 81       	ldd	r31, Y+4	; 0x04
    2168:	80 83       	st	Z, r24
	}
	return ret;
    216a:	89 81       	ldd	r24, Y+1	; 0x01
}
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <GPIO_port_toggle>:
Std_ReturnType GPIO_port_toggle(gpio_port_t _port)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	00 d0       	rcall	.+0      	; 0x2180 <GPIO_port_toggle+0x6>
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	10 f0       	brcs	.+4      	; 0x2194 <GPIO_port_toggle+0x1a>
	{
		ret = E_NOT_OK;
    2190:	19 82       	std	Y+1, r1	; 0x01
    2192:	18 c0       	rjmp	.+48     	; 0x21c4 <GPIO_port_toggle+0x4a>
	}
	else
	{
		*PORT_registers[_port] = *PORT_registers[_port] ^ 0xFF;
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	fc 01       	movw	r30, r24
    21a0:	e0 59       	subi	r30, 0x90	; 144
    21a2:	fe 4f       	sbci	r31, 0xFE	; 254
    21a4:	a0 81       	ld	r26, Z
    21a6:	b1 81       	ldd	r27, Z+1	; 0x01
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	88 2f       	mov	r24, r24
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	fc 01       	movw	r30, r24
    21b4:	e0 59       	subi	r30, 0x90	; 144
    21b6:	fe 4f       	sbci	r31, 0xFE	; 254
    21b8:	01 90       	ld	r0, Z+
    21ba:	f0 81       	ld	r31, Z
    21bc:	e0 2d       	mov	r30, r0
    21be:	80 81       	ld	r24, Z
    21c0:	80 95       	com	r24
    21c2:	8c 93       	st	X, r24
	}
	return ret;
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <GPIO_port_PullUp_Enable>:
Std_ReturnType GPIO_port_PullUp_Enable(gpio_port_t _port)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <GPIO_port_PullUp_Enable+0x6>
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <GPIO_port_PullUp_Enable+0x8>
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	84 30       	cpi	r24, 0x04	; 4
    21e6:	10 f0       	brcs	.+4      	; 0x21ec <GPIO_port_PullUp_Enable+0x1c>
	{
		ret = E_NOT_OK;
    21e8:	19 82       	std	Y+1, r1	; 0x01
    21ea:	38 c0       	rjmp	.+112    	; 0x225c <GPIO_port_PullUp_Enable+0x8c>
	}
	else
	{
		*DDR_registers[_port] = *DDR_registers[_port] & 0x00;
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	88 2f       	mov	r24, r24
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	fc 01       	movw	r30, r24
    21f8:	e8 59       	subi	r30, 0x98	; 152
    21fa:	fe 4f       	sbci	r31, 0xFE	; 254
    21fc:	01 90       	ld	r0, Z+
    21fe:	f0 81       	ld	r31, Z
    2200:	e0 2d       	mov	r30, r0
    2202:	80 81       	ld	r24, Z
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	88 2f       	mov	r24, r24
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	fc 01       	movw	r30, r24
    2210:	e8 59       	subi	r30, 0x98	; 152
    2212:	fe 4f       	sbci	r31, 0xFE	; 254
    2214:	01 90       	ld	r0, Z+
    2216:	f0 81       	ld	r31, Z
    2218:	e0 2d       	mov	r30, r0
    221a:	10 82       	st	Z, r1
		*PORT_registers[_port] = *PORT_registers[_port] | 0xFF;
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	88 2f       	mov	r24, r24
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	fc 01       	movw	r30, r24
    2228:	e0 59       	subi	r30, 0x90	; 144
    222a:	fe 4f       	sbci	r31, 0xFE	; 254
    222c:	01 90       	ld	r0, Z+
    222e:	f0 81       	ld	r31, Z
    2230:	e0 2d       	mov	r30, r0
    2232:	80 81       	ld	r24, Z
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	88 2f       	mov	r24, r24
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	88 0f       	add	r24, r24
    223c:	99 1f       	adc	r25, r25
    223e:	fc 01       	movw	r30, r24
    2240:	e0 59       	subi	r30, 0x90	; 144
    2242:	fe 4f       	sbci	r31, 0xFE	; 254
    2244:	01 90       	ld	r0, Z+
    2246:	f0 81       	ld	r31, Z
    2248:	e0 2d       	mov	r30, r0
    224a:	8f ef       	ldi	r24, 0xFF	; 255
    224c:	80 83       	st	Z, r24
		CLEAR_BIT(SFIOR, PUD);
    224e:	a0 e5       	ldi	r26, 0x50	; 80
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e0 e5       	ldi	r30, 0x50	; 80
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8b 7f       	andi	r24, 0xFB	; 251
    225a:	8c 93       	st	X, r24
	}
	return ret;
    225c:	89 81       	ldd	r24, Y+1	; 0x01
}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <GPIO_port_PullUp_Disable>:
Std_ReturnType GPIO_port_PullUp_Disable(gpio_port_t _port)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	00 d0       	rcall	.+0      	; 0x2272 <GPIO_port_PullUp_Disable+0x6>
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	84 30       	cpi	r24, 0x04	; 4
    2280:	10 f0       	brcs	.+4      	; 0x2286 <GPIO_port_PullUp_Disable+0x1a>
	{
		ret = E_NOT_OK;
    2282:	19 82       	std	Y+1, r1	; 0x01
    2284:	0c c0       	rjmp	.+24     	; 0x229e <GPIO_port_PullUp_Disable+0x32>
	}
	else
	{
		*PORT_registers[_port] = 0x00;
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	88 2f       	mov	r24, r24
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	fc 01       	movw	r30, r24
    2292:	e0 59       	subi	r30, 0x90	; 144
    2294:	fe 4f       	sbci	r31, 0xFE	; 254
    2296:	01 90       	ld	r0, Z+
    2298:	f0 81       	ld	r31, Z
    229a:	e0 2d       	mov	r30, r0
    229c:	10 82       	st	Z, r1
	}
	return ret;
    229e:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <MCAL_init>:
		.usart_parity=USART_PARITY_DISABLE,
		.usart_character_size=8,
};

Std_ReturnType MCAL_init(void)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
	ret = GPIO_pin_initialize(&g_buzzerObj);
    22b2:	80 ea       	ldi	r24, 0xA0	; 160
    22b4:	91 e0       	ldi	r25, 0x01	; 1
    22b6:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <GPIO_pin_initialize>
    22ba:	80 93 8b 01 	sts	0x018B, r24
	ret = USART_Init(&g_uartObj2);
    22be:	80 e8       	ldi	r24, 0x80	; 128
    22c0:	91 e0       	ldi	r25, 0x01	; 1
    22c2:	0e 94 b7 06 	call	0xd6e	; 0xd6e <USART_Init>
    22c6:	80 93 8b 01 	sts	0x018B, r24
	return ret;
    22ca:	80 91 8b 01 	lds	r24, 0x018B
}
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <Buzzer_turnON>:

void Buzzer_turnON(void)
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
	ret = GPIO_pin_write_logic(&g_buzzerObj, GPIO_HIGH);
    22dc:	80 ea       	ldi	r24, 0xA0	; 160
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	61 e0       	ldi	r22, 0x01	; 1
    22e2:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_pin_write_logic>
    22e6:	80 93 8b 01 	sts	0x018B, r24
}
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <Buzzer_turnOFF>:

void Buzzer_turnOFF(void)
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
	ret = GPIO_pin_write_logic(&g_buzzerObj, GPIO_LOW);
    22f8:	80 ea       	ldi	r24, 0xA0	; 160
    22fa:	91 e0       	ldi	r25, 0x01	; 1
    22fc:	60 e0       	ldi	r22, 0x00	; 0
    22fe:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_pin_write_logic>
    2302:	80 93 8b 01 	sts	0x018B, r24
}
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <dc_motor_init>:
 * @return STATUS of the function
 *          E_OK     : action executed successfully !
 *          E_NOT_OK : action execution faild !
 */
Std_ReturnType dc_motor_init (const dc_motor_t *_dc_motor_ptr)
{
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	00 d0       	rcall	.+0      	; 0x2312 <dc_motor_init+0x6>
    2312:	0f 92       	push	r0
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	9b 83       	std	Y+3, r25	; 0x03
    231a:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType ret = E_OK;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	89 83       	std	Y+1, r24	; 0x01
    if (_dc_motor_ptr == NULL)
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	9b 81       	ldd	r25, Y+3	; 0x03
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	11 f4       	brne	.+4      	; 0x232c <dc_motor_init+0x20>
    {
        ret = E_NOT_OK;
    2328:	19 82       	std	Y+1, r1	; 0x01
    232a:	0b c0       	rjmp	.+22     	; 0x2342 <dc_motor_init+0x36>
    }
    else
    {   
        ret = GPIO_pin_initialize(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN1]));
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	9b 81       	ldd	r25, Y+3	; 0x03
    2330:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <GPIO_pin_initialize>
    2334:	89 83       	std	Y+1, r24	; 0x01
        ret = GPIO_pin_initialize(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN2]));
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	9b 81       	ldd	r25, Y+3	; 0x03
    233a:	01 96       	adiw	r24, 0x01	; 1
    233c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <GPIO_pin_initialize>
    2340:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <dc_motor_move_right>:
 * @return STATUS of the function
 *          E_OK     : action executed successfully !
 *          E_NOT_OK : action execution faild !
 */
Std_ReturnType dc_motor_move_right(const dc_motor_t *_dc_motor_ptr)
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <dc_motor_move_right+0x6>
    2356:	0f 92       	push	r0
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	9b 83       	std	Y+3, r25	; 0x03
    235e:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType ret = E_OK;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	89 83       	std	Y+1, r24	; 0x01
    if (_dc_motor_ptr == NULL)
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	9b 81       	ldd	r25, Y+3	; 0x03
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	11 f4       	brne	.+4      	; 0x2370 <dc_motor_move_right+0x20>
    {
        ret = E_NOT_OK;
    236c:	19 82       	std	Y+1, r1	; 0x01
    236e:	0b c0       	rjmp	.+22     	; 0x2386 <dc_motor_move_right+0x36>
    }
    else
    {
        GPIO_pin_write_logic(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN1]), GPIO_HIGH);
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	9b 81       	ldd	r25, Y+3	; 0x03
    2374:	61 e0       	ldi	r22, 0x01	; 1
    2376:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_pin_write_logic>
        GPIO_pin_write_logic(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN2]), GPIO_LOW);
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	9b 81       	ldd	r25, Y+3	; 0x03
    237e:	01 96       	adiw	r24, 0x01	; 1
    2380:	60 e0       	ldi	r22, 0x00	; 0
    2382:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_pin_write_logic>
    }
    return ret;
    2386:	89 81       	ldd	r24, Y+1	; 0x01
}
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <dc_motor_move_left>:
 * @return STATUS of the function
 *          E_OK     : action executed successfully !
 *          E_NOT_OK : action execution faild !
 */
Std_ReturnType dc_motor_move_left (const dc_motor_t *_dc_motor_ptr)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	00 d0       	rcall	.+0      	; 0x239a <dc_motor_move_left+0x6>
    239a:	0f 92       	push	r0
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	9b 83       	std	Y+3, r25	; 0x03
    23a2:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType ret = E_OK;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	89 83       	std	Y+1, r24	; 0x01
    if (_dc_motor_ptr == NULL)
    23a8:	8a 81       	ldd	r24, Y+2	; 0x02
    23aa:	9b 81       	ldd	r25, Y+3	; 0x03
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	11 f4       	brne	.+4      	; 0x23b4 <dc_motor_move_left+0x20>
    {
        ret = E_NOT_OK;
    23b0:	19 82       	std	Y+1, r1	; 0x01
    23b2:	0b c0       	rjmp	.+22     	; 0x23ca <dc_motor_move_left+0x36>
    }
    else
    {
        GPIO_pin_write_logic(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN1]), GPIO_LOW);
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	9b 81       	ldd	r25, Y+3	; 0x03
    23b8:	60 e0       	ldi	r22, 0x00	; 0
    23ba:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_pin_write_logic>
        GPIO_pin_write_logic(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN2]), GPIO_HIGH);
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	9b 81       	ldd	r25, Y+3	; 0x03
    23c2:	01 96       	adiw	r24, 0x01	; 1
    23c4:	61 e0       	ldi	r22, 0x01	; 1
    23c6:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_pin_write_logic>
    }
    return ret;
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <dc_motor_stop>:
 * @return STATUS of the function
 *          E_OK     : action executed successfully !
 *          E_NOT_OK : action execution faild !
 */
Std_ReturnType dc_motor_stop (const dc_motor_t *_dc_motor_ptr)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	00 d0       	rcall	.+0      	; 0x23de <dc_motor_stop+0x6>
    23de:	0f 92       	push	r0
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	9b 83       	std	Y+3, r25	; 0x03
    23e6:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType ret = E_OK;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	89 83       	std	Y+1, r24	; 0x01
    if (_dc_motor_ptr == NULL)
    23ec:	8a 81       	ldd	r24, Y+2	; 0x02
    23ee:	9b 81       	ldd	r25, Y+3	; 0x03
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	11 f4       	brne	.+4      	; 0x23f8 <dc_motor_stop+0x20>
    {
        ret = E_NOT_OK;
    23f4:	19 82       	std	Y+1, r1	; 0x01
    23f6:	0b c0       	rjmp	.+22     	; 0x240e <dc_motor_stop+0x36>
    }
    else
    {
        GPIO_pin_write_logic(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN1]), GPIO_LOW);
    23f8:	8a 81       	ldd	r24, Y+2	; 0x02
    23fa:	9b 81       	ldd	r25, Y+3	; 0x03
    23fc:	60 e0       	ldi	r22, 0x00	; 0
    23fe:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_pin_write_logic>
        GPIO_pin_write_logic(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN2]), GPIO_LOW);
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	9b 81       	ldd	r25, Y+3	; 0x03
    2406:	01 96       	adiw	r24, 0x01	; 1
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_pin_write_logic>
    }
    return ret;
    240e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <EEPROM24C16_writeByte>:
#include "external_eeprom.h"

#if EXTERNAL_EEPROM_MODULE == MODULE_ENABLE

Std_ReturnType EEPROM24C16_writeByte(uint16 address, uint8 data)
{
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	00 d0       	rcall	.+0      	; 0x2422 <EEPROM24C16_writeByte+0x6>
    2422:	00 d0       	rcall	.+0      	; 0x2424 <EEPROM24C16_writeByte+0x8>
    2424:	0f 92       	push	r0
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	9c 83       	std	Y+4, r25	; 0x04
    242c:	8b 83       	std	Y+3, r24	; 0x03
    242e:	6d 83       	std	Y+5, r22	; 0x05
	 * 3- Step 2: if the device is busy with the internal write cycle, no ACK is returned and the bus master goes back
	 *	to step 1. If the device has terminated the internal write cycle, it responds with an ACK, indicating that the
	 *	device is ready to receive the second part of the instruction (the first byte of this instruction having been sent
	 *	during Step 1).
	 *  */
	Std_ReturnType ret = E_OK;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	8a 83       	std	Y+2, r24	; 0x02
	/*R/W-bit = 0 for write operation.*/
	uint8 l_TxBits=0xA0;
    2434:	80 ea       	ldi	r24, 0xA0	; 160
    2436:	89 83       	std	Y+1, r24	; 0x01
	TWI_init();
    2438:	0e 94 43 0c 	call	0x1886	; 0x1886 <TWI_init>
	/* make sure device is in stand by state */
	do{
		TWI_start();
    243c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <TWI_start>
		// Send device select address
		l_TxBits |= (address >> 7);
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	88 0f       	add	r24, r24
    2446:	89 2f       	mov	r24, r25
    2448:	88 1f       	adc	r24, r24
    244a:	99 0b       	sbc	r25, r25
    244c:	91 95       	neg	r25
    244e:	98 2f       	mov	r25, r24
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	89 2b       	or	r24, r25
    2454:	89 83       	std	Y+1, r24	; 0x01
		l_TxBits &= ~(1<<TW_R_W_BIT);
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	8e 7f       	andi	r24, 0xFE	; 254
    245a:	89 83       	std	Y+1, r24	; 0x01
		TWI_write(l_TxBits);
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <TWI_write>
	}while(TW_MT_SLA_W_NACK == TWI_getStatus());
    2462:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    2466:	80 32       	cpi	r24, 0x20	; 32
    2468:	49 f3       	breq	.-46     	; 0x243c <EEPROM24C16_writeByte+0x20>
	// sent byte address
	l_TxBits = (uint8)address;
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	89 83       	std	Y+1, r24	; 0x01
	TWI_write(l_TxBits);
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	0e 94 8a 0c 	call	0x1914	; 0x1914 <TWI_write>
	if(TW_MT_DATA_ACK != TWI_getStatus())
    2474:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    2478:	88 32       	cpi	r24, 0x28	; 40
    247a:	11 f0       	breq	.+4      	; 0x2480 <EEPROM24C16_writeByte+0x64>
	{	// WC line (write protection) is held high
		ret = E_NOT_OK;
    247c:	1a 82       	std	Y+2, r1	; 0x02
    247e:	03 c0       	rjmp	.+6      	; 0x2486 <EEPROM24C16_writeByte+0x6a>
	}
	else
	{
		TWI_write(data);
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
    2482:	0e 94 8a 0c 	call	0x1914	; 0x1914 <TWI_write>
	}
	TWI_stop();
    2486:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <TWI_stop>
	return ret;
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <EEPROM24C16_readByte>:
Std_ReturnType EEPROM24C16_readByte(uint16 address, uint8 *data)
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <EEPROM24C16_readByte+0x6>
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <EEPROM24C16_readByte+0x8>
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <EEPROM24C16_readByte+0xa>
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	9c 83       	std	Y+4, r25	; 0x04
    24ac:	8b 83       	std	Y+3, r24	; 0x03
    24ae:	7e 83       	std	Y+6, r23	; 0x06
    24b0:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType ret = E_OK;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	8a 83       	std	Y+2, r24	; 0x02
	/*R/W-bit = 1 for read operation.*/
	uint8 l_TxBits=0xA0;
    24b6:	80 ea       	ldi	r24, 0xA0	; 160
    24b8:	89 83       	std	Y+1, r24	; 0x01
	TWI_init();
    24ba:	0e 94 43 0c 	call	0x1886	; 0x1886 <TWI_init>
	/* make sure device is in stand by state and no write in operation now*/
	do{
		TWI_start();
    24be:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <TWI_start>
		// Send device select address
		l_TxBits |= (address >> 7);
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	9c 81       	ldd	r25, Y+4	; 0x04
    24c6:	88 0f       	add	r24, r24
    24c8:	89 2f       	mov	r24, r25
    24ca:	88 1f       	adc	r24, r24
    24cc:	99 0b       	sbc	r25, r25
    24ce:	91 95       	neg	r25
    24d0:	98 2f       	mov	r25, r24
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	89 2b       	or	r24, r25
    24d6:	89 83       	std	Y+1, r24	; 0x01
		TWI_write(l_TxBits);
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	0e 94 8a 0c 	call	0x1914	; 0x1914 <TWI_write>
	}while(TW_MT_SLA_W_NACK == TWI_getStatus());
    24de:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    24e2:	80 32       	cpi	r24, 0x20	; 32
    24e4:	61 f3       	breq	.-40     	; 0x24be <EEPROM24C16_readByte+0x22>
	// sent byte address
	l_TxBits = (uint8)address;
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	89 83       	std	Y+1, r24	; 0x01
	TWI_write(l_TxBits);
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	0e 94 8a 0c 	call	0x1914	; 0x1914 <TWI_write>
	// initiate Repeated start condition
	TWI_start();
    24f0:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <TWI_start>
	if(TW_REP_START == TWI_getStatus())
    24f4:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    24f8:	80 31       	cpi	r24, 0x10	; 16
    24fa:	91 f4       	brne	.+36     	; 0x2520 <EEPROM24C16_readByte+0x84>
	{
		l_TxBits = 0xA1 | (address >> 7);
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	88 0f       	add	r24, r24
    2502:	89 2f       	mov	r24, r25
    2504:	88 1f       	adc	r24, r24
    2506:	99 0b       	sbc	r25, r25
    2508:	91 95       	neg	r25
    250a:	81 6a       	ori	r24, 0xA1	; 161
    250c:	89 83       	std	Y+1, r24	; 0x01
		TWI_write(l_TxBits);
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	0e 94 8a 0c 	call	0x1914	; 0x1914 <TWI_write>
		*data = TWI_readWithNACK();	// Master sends NACK as we read only one byte.
    2514:	0e 94 b4 0c 	call	0x1968	; 0x1968 <TWI_readWithNACK>
    2518:	ed 81       	ldd	r30, Y+5	; 0x05
    251a:	fe 81       	ldd	r31, Y+6	; 0x06
    251c:	80 83       	st	Z, r24
    251e:	01 c0       	rjmp	.+2      	; 0x2522 <EEPROM24C16_readByte+0x86>
	}
	else
	{
		ret = E_NOT_OK;
    2520:	1a 82       	std	Y+2, r1	; 0x02
	}
	TWI_stop();
    2522:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <TWI_stop>
	return ret;
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2528:	26 96       	adiw	r28, 0x06	; 6
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <EEPROM24C16_writeBlock>:

// maximum Length = page size = 16-bytes
Std_ReturnType EEPROM24C16_writeBlock(uint16 a_address, uint8* a_array, uint8 a_blockLength)
{
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	29 97       	sbiw	r28, 0x09	; 9
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	9d 83       	std	Y+5, r25	; 0x05
    2550:	8c 83       	std	Y+4, r24	; 0x04
    2552:	7f 83       	std	Y+7, r23	; 0x07
    2554:	6e 83       	std	Y+6, r22	; 0x06
    2556:	48 87       	std	Y+8, r20	; 0x08
	Std_ReturnType ret = E_OK;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 index = 0, l_TxBits = 0xA0;
    255c:	1a 82       	std	Y+2, r1	; 0x02
    255e:	80 ea       	ldi	r24, 0xA0	; 160
    2560:	89 83       	std	Y+1, r24	; 0x01
	if(a_blockLength > 16)	// maximum page size = 16 bytes
    2562:	88 85       	ldd	r24, Y+8	; 0x08
    2564:	81 31       	cpi	r24, 0x11	; 17
    2566:	10 f0       	brcs	.+4      	; 0x256c <EEPROM24C16_writeBlock+0x32>
	{
		ret = E_NOT_OK;
    2568:	1b 82       	std	Y+3, r1	; 0x03
    256a:	37 c0       	rjmp	.+110    	; 0x25da <EEPROM24C16_writeBlock+0xa0>
	}
	else
	{
		TWI_init();
    256c:	0e 94 43 0c 	call	0x1886	; 0x1886 <TWI_init>
		/* make sure device is in stand by state and no write in operation now*/
		do{
			TWI_start();
    2570:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <TWI_start>
			// Send device select address
			l_TxBits |= (a_address >> 7);
    2574:	8c 81       	ldd	r24, Y+4	; 0x04
    2576:	9d 81       	ldd	r25, Y+5	; 0x05
    2578:	88 0f       	add	r24, r24
    257a:	89 2f       	mov	r24, r25
    257c:	88 1f       	adc	r24, r24
    257e:	99 0b       	sbc	r25, r25
    2580:	91 95       	neg	r25
    2582:	98 2f       	mov	r25, r24
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	89 2b       	or	r24, r25
    2588:	89 83       	std	Y+1, r24	; 0x01
			TWI_write(l_TxBits);
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <TWI_write>
		}while(TW_MT_SLA_W_NACK == TWI_getStatus());
    2590:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    2594:	80 32       	cpi	r24, 0x20	; 32
    2596:	61 f3       	breq	.-40     	; 0x2570 <EEPROM24C16_writeBlock+0x36>
		// sent byte address
		l_TxBits = (uint8)a_address;
    2598:	8c 81       	ldd	r24, Y+4	; 0x04
    259a:	89 83       	std	Y+1, r24	; 0x01
		TWI_write(l_TxBits);
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <TWI_write>
    25a2:	0e c0       	rjmp	.+28     	; 0x25c0 <EEPROM24C16_writeBlock+0x86>
		while(a_blockLength--)
		{
			TWI_write(a_array[index]);
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	8e 81       	ldd	r24, Y+6	; 0x06
    25ac:	9f 81       	ldd	r25, Y+7	; 0x07
    25ae:	fc 01       	movw	r30, r24
    25b0:	e2 0f       	add	r30, r18
    25b2:	f3 1f       	adc	r31, r19
    25b4:	80 81       	ld	r24, Z
    25b6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <TWI_write>
			index++;
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	8f 5f       	subi	r24, 0xFF	; 255
    25be:	8a 83       	std	Y+2, r24	; 0x02
			TWI_write(l_TxBits);
		}while(TW_MT_SLA_W_NACK == TWI_getStatus());
		// sent byte address
		l_TxBits = (uint8)a_address;
		TWI_write(l_TxBits);
		while(a_blockLength--)
    25c0:	88 85       	ldd	r24, Y+8	; 0x08
    25c2:	89 87       	std	Y+9, r24	; 0x09
    25c4:	89 85       	ldd	r24, Y+9	; 0x09
    25c6:	88 23       	and	r24, r24
    25c8:	11 f0       	breq	.+4      	; 0x25ce <EEPROM24C16_writeBlock+0x94>
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	89 87       	std	Y+9, r24	; 0x09
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	98 85       	ldd	r25, Y+8	; 0x08
    25d2:	91 50       	subi	r25, 0x01	; 1
    25d4:	98 87       	std	Y+8, r25	; 0x08
    25d6:	88 23       	and	r24, r24
    25d8:	29 f7       	brne	.-54     	; 0x25a4 <EEPROM24C16_writeBlock+0x6a>
		{
			TWI_write(a_array[index]);
			index++;
		}
	}
	TWI_stop();
    25da:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <TWI_stop>
	return ret;
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
}
    25e0:	29 96       	adiw	r28, 0x09	; 9
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	f8 94       	cli
    25e6:	de bf       	out	0x3e, r29	; 62
    25e8:	0f be       	out	0x3f, r0	; 63
    25ea:	cd bf       	out	0x3d, r28	; 61
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <EEPROM24C16_readBlock>:
Std_ReturnType EEPROM24C16_readBlock(uint16 a_address, uint8* a_array, uint8 a_blockLength)
{
    25f2:	0f 93       	push	r16
    25f4:	1f 93       	push	r17
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	28 97       	sbiw	r28, 0x08	; 8
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	cd bf       	out	0x3d, r28	; 61
    260a:	9d 83       	std	Y+5, r25	; 0x05
    260c:	8c 83       	std	Y+4, r24	; 0x04
    260e:	7f 83       	std	Y+7, r23	; 0x07
    2610:	6e 83       	std	Y+6, r22	; 0x06
    2612:	48 87       	std	Y+8, r20	; 0x08
	Std_ReturnType ret = E_OK;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	8b 83       	std	Y+3, r24	; 0x03
	uint8 index = 0, l_TxBits = 0xA0;
    2618:	1a 82       	std	Y+2, r1	; 0x02
    261a:	80 ea       	ldi	r24, 0xA0	; 160
    261c:	89 83       	std	Y+1, r24	; 0x01
	if(a_blockLength > 16)	// maximum page size = 16 bytes
    261e:	88 85       	ldd	r24, Y+8	; 0x08
    2620:	81 31       	cpi	r24, 0x11	; 17
    2622:	10 f0       	brcs	.+4      	; 0x2628 <EEPROM24C16_readBlock+0x36>
	{
		ret = E_NOT_OK;
    2624:	1b 82       	std	Y+3, r1	; 0x03
    2626:	5a c0       	rjmp	.+180    	; 0x26dc <EEPROM24C16_readBlock+0xea>
	}
	else
	{
		TWI_init();
    2628:	0e 94 43 0c 	call	0x1886	; 0x1886 <TWI_init>
		/* make sure device is in stand by state and no write in operation now*/
		do{
			TWI_start();
    262c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <TWI_start>
			// Send device select address
			l_TxBits |= (a_address >> 7);
    2630:	8c 81       	ldd	r24, Y+4	; 0x04
    2632:	9d 81       	ldd	r25, Y+5	; 0x05
    2634:	88 0f       	add	r24, r24
    2636:	89 2f       	mov	r24, r25
    2638:	88 1f       	adc	r24, r24
    263a:	99 0b       	sbc	r25, r25
    263c:	91 95       	neg	r25
    263e:	98 2f       	mov	r25, r24
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	89 2b       	or	r24, r25
    2644:	89 83       	std	Y+1, r24	; 0x01
			TWI_write(l_TxBits);
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	0e 94 8a 0c 	call	0x1914	; 0x1914 <TWI_write>
		}while(TW_MT_SLA_W_NACK == TWI_getStatus());
    264c:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    2650:	80 32       	cpi	r24, 0x20	; 32
    2652:	61 f3       	breq	.-40     	; 0x262c <EEPROM24C16_readBlock+0x3a>
		// sent byte address
		l_TxBits = (uint8)a_address;
    2654:	8c 81       	ldd	r24, Y+4	; 0x04
    2656:	89 83       	std	Y+1, r24	; 0x01
		TWI_write(l_TxBits);
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <TWI_write>
		TWI_start();	// Master sends repeated start condition for reading required data block.
    265e:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <TWI_start>
		if(TW_REP_START != TWI_getStatus())
    2662:	0e 94 ce 0c 	call	0x199c	; 0x199c <TWI_getStatus>
    2666:	80 31       	cpi	r24, 0x10	; 16
    2668:	11 f0       	breq	.+4      	; 0x266e <EEPROM24C16_readBlock+0x7c>
		{
			ret = E_NOT_OK;
    266a:	1b 82       	std	Y+3, r1	; 0x03
    266c:	37 c0       	rjmp	.+110    	; 0x26dc <EEPROM24C16_readBlock+0xea>
		}
		else
		{
			l_TxBits = 0xA1 | (a_address >> 7);
    266e:	8c 81       	ldd	r24, Y+4	; 0x04
    2670:	9d 81       	ldd	r25, Y+5	; 0x05
    2672:	88 0f       	add	r24, r24
    2674:	89 2f       	mov	r24, r25
    2676:	88 1f       	adc	r24, r24
    2678:	99 0b       	sbc	r25, r25
    267a:	91 95       	neg	r25
    267c:	81 6a       	ori	r24, 0xA1	; 161
    267e:	89 83       	std	Y+1, r24	; 0x01
			TWI_write(l_TxBits);
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	0e 94 8a 0c 	call	0x1914	; 0x1914 <TWI_write>
    2686:	26 c0       	rjmp	.+76     	; 0x26d4 <EEPROM24C16_readBlock+0xe2>
			while(index < a_blockLength)
			{
				if(index < (a_blockLength - 1))
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	88 85       	ldd	r24, Y+8	; 0x08
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	28 17       	cp	r18, r24
    2698:	39 07       	cpc	r19, r25
    269a:	6c f4       	brge	.+26     	; 0x26b6 <EEPROM24C16_readBlock+0xc4>
				{
					a_array[index] = TWI_readWithACK();
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	8e 81       	ldd	r24, Y+6	; 0x06
    26a4:	9f 81       	ldd	r25, Y+7	; 0x07
    26a6:	8c 01       	movw	r16, r24
    26a8:	02 0f       	add	r16, r18
    26aa:	13 1f       	adc	r17, r19
    26ac:	0e 94 a1 0c 	call	0x1942	; 0x1942 <TWI_readWithACK>
    26b0:	f8 01       	movw	r30, r16
    26b2:	80 83       	st	Z, r24
    26b4:	0c c0       	rjmp	.+24     	; 0x26ce <EEPROM24C16_readBlock+0xdc>
				}
				else
				{
					a_array[index] = TWI_readWithNACK();
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	8e 81       	ldd	r24, Y+6	; 0x06
    26be:	9f 81       	ldd	r25, Y+7	; 0x07
    26c0:	8c 01       	movw	r16, r24
    26c2:	02 0f       	add	r16, r18
    26c4:	13 1f       	adc	r17, r19
    26c6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <TWI_readWithNACK>
    26ca:	f8 01       	movw	r30, r16
    26cc:	80 83       	st	Z, r24
				}
				index++;
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	8f 5f       	subi	r24, 0xFF	; 255
    26d2:	8a 83       	std	Y+2, r24	; 0x02
		}
		else
		{
			l_TxBits = 0xA1 | (a_address >> 7);
			TWI_write(l_TxBits);
			while(index < a_blockLength)
    26d4:	9a 81       	ldd	r25, Y+2	; 0x02
    26d6:	88 85       	ldd	r24, Y+8	; 0x08
    26d8:	98 17       	cp	r25, r24
    26da:	b0 f2       	brcs	.-84     	; 0x2688 <EEPROM24C16_readBlock+0x96>
				}
				index++;
			}
		}
	}
	TWI_stop();
    26dc:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <TWI_stop>
	return ret;
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    26e2:	28 96       	adiw	r28, 0x08	; 8
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	f8 94       	cli
    26e8:	de bf       	out	0x3e, r29	; 62
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	cd bf       	out	0x3d, r28	; 61
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	08 95       	ret

000026f8 <HAL_init>:
		.dc_motor_pin[DC_MOTOR_PIN1]={PORT_D, GPIO_PIN4, GPIO_DIRECTION_OUTPUT, GPIO_LOW},
		.dc_motor_pin[DC_MOTOR_PIN2]={PORT_D, GPIO_PIN5, GPIO_DIRECTION_OUTPUT, GPIO_LOW}
};

Std_ReturnType HAL_init(void)
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
	ret = dc_motor_init(&g_dcMotorObj);
    2700:	85 ea       	ldi	r24, 0xA5	; 165
    2702:	91 e0       	ldi	r25, 0x01	; 1
    2704:	0e 94 86 11 	call	0x230c	; 0x230c <dc_motor_init>
    2708:	80 93 8b 01 	sts	0x018B, r24
	return ret;
    270c:	80 91 8b 01 	lds	r24, 0x018B
}
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <main>:
uint8 g_userEnteredPassword[8] = {0};
uint8 g_userPassword_length = 0;
uint8 g_uartCode = 0;

int main(void)
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
	application_initialize();
    271e:	0e 94 6f 14 	call	0x28de	; 0x28de <application_initialize>

	/* Set initial system password if no one exist. *
	 * read existing flag
	 */
	ret = USART_Receive_Byte_Blocking(&g_uartObj2, &g_uartCode);	// receive initiate code for communication
    2722:	80 e8       	ldi	r24, 0x80	; 128
    2724:	91 e0       	ldi	r25, 0x01	; 1
    2726:	27 eb       	ldi	r18, 0xB7	; 183
    2728:	31 e0       	ldi	r19, 0x01	; 1
    272a:	b9 01       	movw	r22, r18
    272c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <USART_Receive_Byte_Blocking>
    2730:	80 93 8b 01 	sts	0x018B, r24

	ret = EEPROM24C16_readByte(0x0000, &g_passwordExistance);
    2734:	2d ea       	ldi	r18, 0xAD	; 173
    2736:	31 e0       	ldi	r19, 0x01	; 1
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	b9 01       	movw	r22, r18
    273e:	0e 94 4e 12 	call	0x249c	; 0x249c <EEPROM24C16_readByte>
    2742:	80 93 8b 01 	sts	0x018B, r24
	if(g_passwordExistance == 0xFF)
    2746:	80 91 ad 01 	lds	r24, 0x01AD
    274a:	8f 3f       	cpi	r24, 0xFF	; 255
    274c:	29 f5       	brne	.+74     	; 0x2798 <main+0x82>
	{	// System initiate. Write system password
		ret = EEPROM24C16_writeBlock(0x0008, &g_password[0], g_password_length);
    274e:	40 91 95 01 	lds	r20, 0x0195
    2752:	2d e8       	ldi	r18, 0x8D	; 141
    2754:	31 e0       	ldi	r19, 0x01	; 1
    2756:	88 e0       	ldi	r24, 0x08	; 8
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	b9 01       	movw	r22, r18
    275c:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM24C16_writeBlock>
    2760:	80 93 8b 01 	sts	0x018B, r24
		ret = EEPROM24C16_writeByte(0x0001, g_password_length);
    2764:	20 91 95 01 	lds	r18, 0x0195
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	62 2f       	mov	r22, r18
    276e:	0e 94 0e 12 	call	0x241c	; 0x241c <EEPROM24C16_writeByte>
    2772:	80 93 8b 01 	sts	0x018B, r24
		g_passwordExistance = 0x00;
    2776:	10 92 ad 01 	sts	0x01AD, r1
		ret = EEPROM24C16_writeByte(0x0000, g_passwordExistance);
    277a:	20 91 ad 01 	lds	r18, 0x01AD
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	62 2f       	mov	r22, r18
    2784:	0e 94 0e 12 	call	0x241c	; 0x241c <EEPROM24C16_writeByte>
    2788:	80 93 8b 01 	sts	0x018B, r24
		ret = USART_Send_Byte_Blocking(0x00);	// system initiate.
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	0e 94 0c 07 	call	0xe18	; 0xe18 <USART_Send_Byte_Blocking>
    2792:	80 93 8b 01 	sts	0x018B, r24
    2796:	1d c0       	rjmp	.+58     	; 0x27d2 <main+0xbc>
	}
	else if(g_passwordExistance == 0x00)
    2798:	80 91 ad 01 	lds	r24, 0x01AD
    279c:	88 23       	and	r24, r24
    279e:	c9 f4       	brne	.+50     	; 0x27d2 <main+0xbc>
	{	// password exists in the eeprom. Read and store it.
		ret = EEPROM24C16_readByte(0x0001, &g_password_length);
    27a0:	25 e9       	ldi	r18, 0x95	; 149
    27a2:	31 e0       	ldi	r19, 0x01	; 1
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	b9 01       	movw	r22, r18
    27aa:	0e 94 4e 12 	call	0x249c	; 0x249c <EEPROM24C16_readByte>
    27ae:	80 93 8b 01 	sts	0x018B, r24
		ret = EEPROM24C16_readBlock(0x0008, &g_password[0], g_password_length);
    27b2:	40 91 95 01 	lds	r20, 0x0195
    27b6:	2d e8       	ldi	r18, 0x8D	; 141
    27b8:	31 e0       	ldi	r19, 0x01	; 1
    27ba:	88 e0       	ldi	r24, 0x08	; 8
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	b9 01       	movw	r22, r18
    27c0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <EEPROM24C16_readBlock>
    27c4:	80 93 8b 01 	sts	0x018B, r24
		ret = USART_Send_Byte_Blocking(0x01);	// initial password exist.
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	0e 94 0c 07 	call	0xe18	; 0xe18 <USART_Send_Byte_Blocking>
    27ce:	80 93 8b 01 	sts	0x018B, r24
	}

	while(1)
	{
		ret = USART_Receive_Byte_Blocking(&g_uartObj2, &g_uartCode);
    27d2:	80 e8       	ldi	r24, 0x80	; 128
    27d4:	91 e0       	ldi	r25, 0x01	; 1
    27d6:	27 eb       	ldi	r18, 0xB7	; 183
    27d8:	31 e0       	ldi	r19, 0x01	; 1
    27da:	b9 01       	movw	r22, r18
    27dc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <USART_Receive_Byte_Blocking>
    27e0:	80 93 8b 01 	sts	0x018B, r24
		if(0xAA == g_uartCode)
    27e4:	80 91 b7 01 	lds	r24, 0x01B7
    27e8:	8a 3a       	cpi	r24, 0xAA	; 170
    27ea:	99 f7       	brne	.-26     	; 0x27d2 <main+0xbc>
		{	// receive user entered password for validation
			ret = USART_receiveString_Blocking(&g_uartObj2, &g_userEnteredPassword[0]);
    27ec:	80 e8       	ldi	r24, 0x80	; 128
    27ee:	91 e0       	ldi	r25, 0x01	; 1
    27f0:	2e ea       	ldi	r18, 0xAE	; 174
    27f2:	31 e0       	ldi	r19, 0x01	; 1
    27f4:	b9 01       	movw	r22, r18
    27f6:	0e 94 b0 07 	call	0xf60	; 0xf60 <USART_receiveString_Blocking>
    27fa:	80 93 8b 01 	sts	0x018B, r24
			// get user password length
			ret = USART_Receive_Byte_Blocking(&g_uartObj2, &g_userPassword_length);
    27fe:	80 e8       	ldi	r24, 0x80	; 128
    2800:	91 e0       	ldi	r25, 0x01	; 1
    2802:	26 eb       	ldi	r18, 0xB6	; 182
    2804:	31 e0       	ldi	r19, 0x01	; 1
    2806:	b9 01       	movw	r22, r18
    2808:	0e 94 3e 07 	call	0xe7c	; 0xe7c <USART_Receive_Byte_Blocking>
    280c:	80 93 8b 01 	sts	0x018B, r24
			ret = password_validation(&g_password[0], &g_userEnteredPassword[0], g_password_length, g_userPassword_length);
    2810:	40 91 95 01 	lds	r20, 0x0195
    2814:	50 91 b6 01 	lds	r21, 0x01B6
    2818:	8d e8       	ldi	r24, 0x8D	; 141
    281a:	91 e0       	ldi	r25, 0x01	; 1
    281c:	2e ea       	ldi	r18, 0xAE	; 174
    281e:	31 e0       	ldi	r19, 0x01	; 1
    2820:	b9 01       	movw	r22, r18
    2822:	25 2f       	mov	r18, r21
    2824:	0e 94 9c 14 	call	0x2938	; 0x2938 <password_validation>
    2828:	80 93 8b 01 	sts	0x018B, r24
			if(E_OK == ret)
    282c:	80 91 8b 01 	lds	r24, 0x018B
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	09 f0       	breq	.+2      	; 0x2836 <main+0x120>
    2834:	43 c0       	rjmp	.+134    	; 0x28bc <main+0x1a6>
			{	// password match
				g_uartCode = 0xA1;
    2836:	81 ea       	ldi	r24, 0xA1	; 161
    2838:	80 93 b7 01 	sts	0x01B7, r24
				ret = USART_Send_Byte_Blocking(g_uartCode);
    283c:	80 91 b7 01 	lds	r24, 0x01B7
    2840:	0e 94 0c 07 	call	0xe18	; 0xe18 <USART_Send_Byte_Blocking>
    2844:	80 93 8b 01 	sts	0x018B, r24
				// receiving option
				ret = USART_Receive_Byte_Blocking(&g_uartObj2, &g_uartCode);
    2848:	80 e8       	ldi	r24, 0x80	; 128
    284a:	91 e0       	ldi	r25, 0x01	; 1
    284c:	27 eb       	ldi	r18, 0xB7	; 183
    284e:	31 e0       	ldi	r19, 0x01	; 1
    2850:	b9 01       	movw	r22, r18
    2852:	0e 94 3e 07 	call	0xe7c	; 0xe7c <USART_Receive_Byte_Blocking>
    2856:	80 93 8b 01 	sts	0x018B, r24
				if('1' == g_uartCode)
    285a:	80 91 b7 01 	lds	r24, 0x01B7
    285e:	81 33       	cpi	r24, 0x31	; 49
    2860:	19 f4       	brne	.+6      	; 0x2868 <main+0x152>
				{	// option: open door
					door_option_hanlder();
    2862:	0e 94 12 15 	call	0x2a24	; 0x2a24 <door_option_hanlder>
    2866:	b5 cf       	rjmp	.-150    	; 0x27d2 <main+0xbc>
				}
				else if('2' == g_uartCode)
    2868:	80 91 b7 01 	lds	r24, 0x01B7
    286c:	82 33       	cpi	r24, 0x32	; 50
    286e:	09 f0       	breq	.+2      	; 0x2872 <main+0x15c>
    2870:	b0 cf       	rjmp	.-160    	; 0x27d2 <main+0xbc>
				{	// option: change password of the system
					// get entered password
					ret = USART_receiveString_Blocking(&g_uartObj2, &g_userEnteredPassword[0]);
    2872:	80 e8       	ldi	r24, 0x80	; 128
    2874:	91 e0       	ldi	r25, 0x01	; 1
    2876:	2e ea       	ldi	r18, 0xAE	; 174
    2878:	31 e0       	ldi	r19, 0x01	; 1
    287a:	b9 01       	movw	r22, r18
    287c:	0e 94 b0 07 	call	0xf60	; 0xf60 <USART_receiveString_Blocking>
    2880:	80 93 8b 01 	sts	0x018B, r24
					// get password length
					ret = USART_Receive_Byte_Blocking(&g_uartObj2, &g_userPassword_length);
    2884:	80 e8       	ldi	r24, 0x80	; 128
    2886:	91 e0       	ldi	r25, 0x01	; 1
    2888:	26 eb       	ldi	r18, 0xB6	; 182
    288a:	31 e0       	ldi	r19, 0x01	; 1
    288c:	b9 01       	movw	r22, r18
    288e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <USART_Receive_Byte_Blocking>
    2892:	80 93 8b 01 	sts	0x018B, r24
					change_password(&g_userEnteredPassword[0], g_userPassword_length);
    2896:	20 91 b6 01 	lds	r18, 0x01B6
    289a:	8e ea       	ldi	r24, 0xAE	; 174
    289c:	91 e0       	ldi	r25, 0x01	; 1
    289e:	62 2f       	mov	r22, r18
    28a0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <change_password>
					// saving password in EEPROM
					ret = EEPROM24C16_writeBlock(0x0008, &g_password[0], g_password_length);
    28a4:	40 91 95 01 	lds	r20, 0x0195
    28a8:	2d e8       	ldi	r18, 0x8D	; 141
    28aa:	31 e0       	ldi	r19, 0x01	; 1
    28ac:	88 e0       	ldi	r24, 0x08	; 8
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	b9 01       	movw	r22, r18
    28b2:	0e 94 9d 12 	call	0x253a	; 0x253a <EEPROM24C16_writeBlock>
    28b6:	80 93 8b 01 	sts	0x018B, r24
    28ba:	8b cf       	rjmp	.-234    	; 0x27d2 <main+0xbc>
				}
			}
			else if(E_NOT_OK == ret)
    28bc:	80 91 8b 01 	lds	r24, 0x018B
    28c0:	88 23       	and	r24, r24
    28c2:	09 f0       	breq	.+2      	; 0x28c6 <main+0x1b0>
    28c4:	86 cf       	rjmp	.-244    	; 0x27d2 <main+0xbc>
			{	// password doesn't match
				g_uartCode = 0xA0;
    28c6:	80 ea       	ldi	r24, 0xA0	; 160
    28c8:	80 93 b7 01 	sts	0x01B7, r24
				ret = USART_Send_Byte_Blocking(g_uartCode);
    28cc:	80 91 b7 01 	lds	r24, 0x01B7
    28d0:	0e 94 0c 07 	call	0xe18	; 0xe18 <USART_Send_Byte_Blocking>
    28d4:	80 93 8b 01 	sts	0x018B, r24
				invalid_password_handler();
    28d8:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <invalid_password_handler>
    28dc:	7a cf       	rjmp	.-268    	; 0x27d2 <main+0xbc>

000028de <application_initialize>:
	}
	return 0;
}

void application_initialize(void)
{
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
	ret = HAL_init();
    28e6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <HAL_init>
    28ea:	80 93 8b 01 	sts	0x018B, r24
	ret = MCAL_init();
    28ee:	0e 94 55 11 	call	0x22aa	; 0x22aa <MCAL_init>
    28f2:	80 93 8b 01 	sts	0x018B, r24
}
    28f6:	cf 91       	pop	r28
    28f8:	df 91       	pop	r29
    28fa:	08 95       	ret

000028fc <tmr_callBackNotify>:

void tmr_callBackNotify(void)
{
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
	_delay_sec--;
    2904:	80 91 8c 01 	lds	r24, 0x018C
    2908:	81 50       	subi	r24, 0x01	; 1
    290a:	80 93 8c 01 	sts	0x018C, r24
	if(!_delay_sec)
    290e:	80 91 8c 01 	lds	r24, 0x018C
    2912:	88 23       	and	r24, r24
    2914:	31 f4       	brne	.+12     	; 0x2922 <tmr_callBackNotify+0x26>
	{
		ret = timer1_Deinit(&g_tmr1Obj);
    2916:	81 ea       	ldi	r24, 0xA1	; 161
    2918:	91 e0       	ldi	r25, 0x01	; 1
    291a:	0e 94 b2 09 	call	0x1364	; 0x1364 <timer1_Deinit>
    291e:	80 93 8b 01 	sts	0x018B, r24
	}
	ret = timer1_write_counter_value(&g_tmr1Obj, 34286);
    2922:	81 ea       	ldi	r24, 0xA1	; 161
    2924:	91 e0       	ldi	r25, 0x01	; 1
    2926:	6e ee       	ldi	r22, 0xEE	; 238
    2928:	75 e8       	ldi	r23, 0x85	; 133
    292a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <timer1_write_counter_value>
    292e:	80 93 8b 01 	sts	0x018B, r24
}
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	08 95       	ret

00002938 <password_validation>:

Std_ReturnType password_validation(const uint8* a_pass, const uint8* a_userPass,
									uint8 a_passLen, uint8 a_userPassLen)
{
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	29 97       	sbiw	r28, 0x09	; 9
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	9c 83       	std	Y+4, r25	; 0x04
    294e:	8b 83       	std	Y+3, r24	; 0x03
    2950:	7e 83       	std	Y+6, r23	; 0x06
    2952:	6d 83       	std	Y+5, r22	; 0x05
    2954:	4f 83       	std	Y+7, r20	; 0x07
    2956:	28 87       	std	Y+8, r18	; 0x08
	Std_ReturnType ret = E_OK;
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 indx=0;
    295c:	19 82       	std	Y+1, r1	; 0x01
	if(a_passLen != a_userPassLen)
    295e:	9f 81       	ldd	r25, Y+7	; 0x07
    2960:	88 85       	ldd	r24, Y+8	; 0x08
    2962:	98 17       	cp	r25, r24
    2964:	d9 f0       	breq	.+54     	; 0x299c <password_validation+0x64>
	{	// password doesn't match
		ret = E_NOT_OK;
    2966:	1a 82       	std	Y+2, r1	; 0x02
    2968:	26 c0       	rjmp	.+76     	; 0x29b6 <password_validation+0x7e>
	}
	else
	{
		while(a_passLen--)
		{
			if(a_pass[indx] != a_userPass[indx])
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	28 2f       	mov	r18, r24
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	9c 81       	ldd	r25, Y+4	; 0x04
    2974:	fc 01       	movw	r30, r24
    2976:	e2 0f       	add	r30, r18
    2978:	f3 1f       	adc	r31, r19
    297a:	40 81       	ld	r20, Z
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	fc 01       	movw	r30, r24
    2988:	e2 0f       	add	r30, r18
    298a:	f3 1f       	adc	r31, r19
    298c:	80 81       	ld	r24, Z
    298e:	48 17       	cp	r20, r24
    2990:	11 f0       	breq	.+4      	; 0x2996 <password_validation+0x5e>
			{	// password doesn't match
				ret = E_NOT_OK;
    2992:	1a 82       	std	Y+2, r1	; 0x02
    2994:	10 c0       	rjmp	.+32     	; 0x29b6 <password_validation+0x7e>
				break;
			}
			indx++;
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	8f 5f       	subi	r24, 0xFF	; 255
    299a:	89 83       	std	Y+1, r24	; 0x01
	{	// password doesn't match
		ret = E_NOT_OK;
	}
	else
	{
		while(a_passLen--)
    299c:	8f 81       	ldd	r24, Y+7	; 0x07
    299e:	89 87       	std	Y+9, r24	; 0x09
    29a0:	89 85       	ldd	r24, Y+9	; 0x09
    29a2:	88 23       	and	r24, r24
    29a4:	11 f0       	breq	.+4      	; 0x29aa <password_validation+0x72>
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	89 87       	std	Y+9, r24	; 0x09
    29aa:	89 85       	ldd	r24, Y+9	; 0x09
    29ac:	9f 81       	ldd	r25, Y+7	; 0x07
    29ae:	91 50       	subi	r25, 0x01	; 1
    29b0:	9f 83       	std	Y+7, r25	; 0x07
    29b2:	88 23       	and	r24, r24
    29b4:	d1 f6       	brne	.-76     	; 0x296a <password_validation+0x32>
				break;
			}
			indx++;
		}
	}
	return ret;
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    29b8:	29 96       	adiw	r28, 0x09	; 9
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <change_password>:

void change_password(uint8* g_userEnteredPassword, uint8 g_userPassword_length)
{
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <change_password+0x6>
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <change_password+0x8>
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	9b 83       	std	Y+3, r25	; 0x03
    29d8:	8a 83       	std	Y+2, r24	; 0x02
    29da:	6c 83       	std	Y+4, r22	; 0x04
	uint8 counter = 0;
    29dc:	19 82       	std	Y+1, r1	; 0x01
	for(counter = 0; counter < g_userPassword_length; counter++)
    29de:	19 82       	std	Y+1, r1	; 0x01
    29e0:	13 c0       	rjmp	.+38     	; 0x2a08 <change_password+0x3e>
	{
		g_password[counter] = g_userEnteredPassword[counter];
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	48 2f       	mov	r20, r24
    29e6:	50 e0       	ldi	r21, 0x00	; 0
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	8a 81       	ldd	r24, Y+2	; 0x02
    29f0:	9b 81       	ldd	r25, Y+3	; 0x03
    29f2:	fc 01       	movw	r30, r24
    29f4:	e2 0f       	add	r30, r18
    29f6:	f3 1f       	adc	r31, r19
    29f8:	80 81       	ld	r24, Z
    29fa:	fa 01       	movw	r30, r20
    29fc:	e3 57       	subi	r30, 0x73	; 115
    29fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2a00:	80 83       	st	Z, r24
}

void change_password(uint8* g_userEnteredPassword, uint8 g_userPassword_length)
{
	uint8 counter = 0;
	for(counter = 0; counter < g_userPassword_length; counter++)
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	8f 5f       	subi	r24, 0xFF	; 255
    2a06:	89 83       	std	Y+1, r24	; 0x01
    2a08:	99 81       	ldd	r25, Y+1	; 0x01
    2a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0c:	98 17       	cp	r25, r24
    2a0e:	48 f3       	brcs	.-46     	; 0x29e2 <change_password+0x18>
	{
		g_password[counter] = g_userEnteredPassword[counter];
	}
	g_password_length = g_userPassword_length;
    2a10:	8c 81       	ldd	r24, Y+4	; 0x04
    2a12:	80 93 95 01 	sts	0x0195, r24
}
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <door_option_hanlder>:

void door_option_hanlder(void)
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
	_delay_sec = 3;
    2a2c:	83 e0       	ldi	r24, 0x03	; 3
    2a2e:	80 93 8c 01 	sts	0x018C, r24
	ret = timer1_write_counter_value(&g_tmr1Obj, 0x0000);
    2a32:	81 ea       	ldi	r24, 0xA1	; 161
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	60 e0       	ldi	r22, 0x00	; 0
    2a38:	70 e0       	ldi	r23, 0x00	; 0
    2a3a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <timer1_write_counter_value>
    2a3e:	80 93 8b 01 	sts	0x018B, r24
	ret = timer1_init(&g_tmr1Obj);
    2a42:	81 ea       	ldi	r24, 0xA1	; 161
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	0e 94 77 09 	call	0x12ee	; 0x12ee <timer1_init>
    2a4a:	80 93 8b 01 	sts	0x018B, r24
	dc_motor_move_right(&g_dcMotorObj);
    2a4e:	85 ea       	ldi	r24, 0xA5	; 165
    2a50:	91 e0       	ldi	r25, 0x01	; 1
    2a52:	0e 94 a8 11 	call	0x2350	; 0x2350 <dc_motor_move_right>
	while(_delay_sec);			// wait until timer delay finished
    2a56:	80 91 8c 01 	lds	r24, 0x018C
    2a5a:	88 23       	and	r24, r24
    2a5c:	e1 f7       	brne	.-8      	; 0x2a56 <door_option_hanlder+0x32>
//	_delay_sec = 1;
//	ret = timer1_write_counter_value(&g_tmr1Obj, 0x0000);
//	ret = timer1_init(&g_tmr1Obj);
//	dc_motor_stop(&g_dcMotorObj);
//	while(_delay_sec);			// wait until timer delay finished
	_delay_sec = 3;
    2a5e:	83 e0       	ldi	r24, 0x03	; 3
    2a60:	80 93 8c 01 	sts	0x018C, r24
	ret = timer1_write_counter_value(&g_tmr1Obj, 0x0000);
    2a64:	81 ea       	ldi	r24, 0xA1	; 161
    2a66:	91 e0       	ldi	r25, 0x01	; 1
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <timer1_write_counter_value>
    2a70:	80 93 8b 01 	sts	0x018B, r24
	ret = timer1_init(&g_tmr1Obj);
    2a74:	81 ea       	ldi	r24, 0xA1	; 161
    2a76:	91 e0       	ldi	r25, 0x01	; 1
    2a78:	0e 94 77 09 	call	0x12ee	; 0x12ee <timer1_init>
    2a7c:	80 93 8b 01 	sts	0x018B, r24
	dc_motor_move_left(&g_dcMotorObj);
    2a80:	85 ea       	ldi	r24, 0xA5	; 165
    2a82:	91 e0       	ldi	r25, 0x01	; 1
    2a84:	0e 94 ca 11 	call	0x2394	; 0x2394 <dc_motor_move_left>
	while(_delay_sec);			// wait until timer delay finished
    2a88:	80 91 8c 01 	lds	r24, 0x018C
    2a8c:	88 23       	and	r24, r24
    2a8e:	e1 f7       	brne	.-8      	; 0x2a88 <door_option_hanlder+0x64>
	ret = timer1_Deinit(&g_tmr1Obj);
    2a90:	81 ea       	ldi	r24, 0xA1	; 161
    2a92:	91 e0       	ldi	r25, 0x01	; 1
    2a94:	0e 94 b2 09 	call	0x1364	; 0x1364 <timer1_Deinit>
    2a98:	80 93 8b 01 	sts	0x018B, r24
	dc_motor_stop(&g_dcMotorObj);
    2a9c:	85 ea       	ldi	r24, 0xA5	; 165
    2a9e:	91 e0       	ldi	r25, 0x01	; 1
    2aa0:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <dc_motor_stop>
}
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	08 95       	ret

00002aaa <invalid_password_handler>:

void invalid_password_handler(void)
{
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
	// turning Buzzer on for 3 sec
	_delay_sec = 6;
    2ab2:	86 e0       	ldi	r24, 0x06	; 6
    2ab4:	80 93 8c 01 	sts	0x018C, r24
	ret = timer1_write_counter_value(&g_tmr1Obj, 0x0000);
    2ab8:	81 ea       	ldi	r24, 0xA1	; 161
    2aba:	91 e0       	ldi	r25, 0x01	; 1
    2abc:	60 e0       	ldi	r22, 0x00	; 0
    2abe:	70 e0       	ldi	r23, 0x00	; 0
    2ac0:	0e 94 d6 09 	call	0x13ac	; 0x13ac <timer1_write_counter_value>
    2ac4:	80 93 8b 01 	sts	0x018B, r24
	ret = timer1_init(&g_tmr1Obj);
    2ac8:	81 ea       	ldi	r24, 0xA1	; 161
    2aca:	91 e0       	ldi	r25, 0x01	; 1
    2acc:	0e 94 77 09 	call	0x12ee	; 0x12ee <timer1_init>
    2ad0:	80 93 8b 01 	sts	0x018B, r24
	Buzzer_turnON();
    2ad4:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <Buzzer_turnON>
	while(_delay_sec);
    2ad8:	80 91 8c 01 	lds	r24, 0x018C
    2adc:	88 23       	and	r24, r24
    2ade:	e1 f7       	brne	.-8      	; 0x2ad8 <invalid_password_handler+0x2e>
	Buzzer_turnOFF();
    2ae0:	0e 94 78 11 	call	0x22f0	; 0x22f0 <Buzzer_turnOFF>
}
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <__prologue_saves__>:
    2aea:	2f 92       	push	r2
    2aec:	3f 92       	push	r3
    2aee:	4f 92       	push	r4
    2af0:	5f 92       	push	r5
    2af2:	6f 92       	push	r6
    2af4:	7f 92       	push	r7
    2af6:	8f 92       	push	r8
    2af8:	9f 92       	push	r9
    2afa:	af 92       	push	r10
    2afc:	bf 92       	push	r11
    2afe:	cf 92       	push	r12
    2b00:	df 92       	push	r13
    2b02:	ef 92       	push	r14
    2b04:	ff 92       	push	r15
    2b06:	0f 93       	push	r16
    2b08:	1f 93       	push	r17
    2b0a:	cf 93       	push	r28
    2b0c:	df 93       	push	r29
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
    2b12:	ca 1b       	sub	r28, r26
    2b14:	db 0b       	sbc	r29, r27
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	f8 94       	cli
    2b1a:	de bf       	out	0x3e, r29	; 62
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	cd bf       	out	0x3d, r28	; 61
    2b20:	09 94       	ijmp

00002b22 <__epilogue_restores__>:
    2b22:	2a 88       	ldd	r2, Y+18	; 0x12
    2b24:	39 88       	ldd	r3, Y+17	; 0x11
    2b26:	48 88       	ldd	r4, Y+16	; 0x10
    2b28:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b30:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b32:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b34:	b9 84       	ldd	r11, Y+9	; 0x09
    2b36:	c8 84       	ldd	r12, Y+8	; 0x08
    2b38:	df 80       	ldd	r13, Y+7	; 0x07
    2b3a:	ee 80       	ldd	r14, Y+6	; 0x06
    2b3c:	fd 80       	ldd	r15, Y+5	; 0x05
    2b3e:	0c 81       	ldd	r16, Y+4	; 0x04
    2b40:	1b 81       	ldd	r17, Y+3	; 0x03
    2b42:	aa 81       	ldd	r26, Y+2	; 0x02
    2b44:	b9 81       	ldd	r27, Y+1	; 0x01
    2b46:	ce 0f       	add	r28, r30
    2b48:	d1 1d       	adc	r29, r1
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	f8 94       	cli
    2b4e:	de bf       	out	0x3e, r29	; 62
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	cd bf       	out	0x3d, r28	; 61
    2b54:	ed 01       	movw	r28, r26
    2b56:	08 95       	ret

00002b58 <_exit>:
    2b58:	f8 94       	cli

00002b5a <__stop_program>:
    2b5a:	ff cf       	rjmp	.-2      	; 0x2b5a <__stop_program>
