
HMI_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ade  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000226  00800060  00003ade  00003b72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800286  00800286  00003d98  2**0
                  ALLOC
  3 .stab         0000459c  00000000  00000000  00003d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002d27  00000000  00000000  00008334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b05b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b1fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b3ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000eb7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fd54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ff14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010b78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 34 19 	call	0x3268	; 0x3268 <main>
      8a:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e2       	ldi	r26, 0x2C	; 44
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 52 1d 	jmp	0x3aa4	; 0x3aa4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5e 1d 	jmp	0x3abc	; 0x3abc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5e 1d 	jmp	0x3abc	; 0x3abc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e2       	ldi	r24, 0x2C	; 44
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 52 1d 	jmp	0x3aa4	; 0x3aa4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e2       	ldi	r22, 0x2C	; 44
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5e 1d 	jmp	0x3abc	; 0x3abc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5e 1d 	jmp	0x3abc	; 0x3abc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5e 1d 	jmp	0x3abc	; 0x3abc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 46 1d 	jmp	0x3a8c	; 0x3a8c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 5c       	subi	r30, 0xCC	; 204
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <USART_Init>:

static void set_baudRate(uint32 baudRate, uint8 usart_mode);
static void set_frame_size(uint8 char_size, uint8 parity);
/* ------------------------------ SW Functions Definitions ------------------------------ */
Std_ReturnType USART_Init(const usart_t* _obj)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <USART_Init+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _obj)
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	9b 81       	ldd	r25, Y+3	; 0x03
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	11 f4       	brne	.+4      	; 0xe4e <USART_Init+0x20>
	{
		ret = E_NOT_OK;
     e4a:	19 82       	std	Y+1, r1	; 0x01
     e4c:	3e c0       	rjmp	.+124    	; 0xeca <USART_Init+0x9c>
	}
	else
	{
		// Disable RX and TX
		UCSRB = 0;
     e4e:	ea e2       	ldi	r30, 0x2A	; 42
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	10 82       	st	Z, r1
			USART_TX_INTERUPT_ENABLE();
			TX_interruptHandler = _obj->USART_TxInterruptHandler;
		}
#endif
		// BaudRate Configuration
		set_baudRate(_obj->baudrate, _obj->usart_mode);
     e54:	ea 81       	ldd	r30, Y+2	; 0x02
     e56:	fb 81       	ldd	r31, Y+3	; 0x03
     e58:	27 81       	ldd	r18, Z+7	; 0x07
     e5a:	30 85       	ldd	r19, Z+8	; 0x08
     e5c:	41 85       	ldd	r20, Z+9	; 0x09
     e5e:	52 85       	ldd	r21, Z+10	; 0x0a
     e60:	ea 81       	ldd	r30, Y+2	; 0x02
     e62:	fb 81       	ldd	r31, Y+3	; 0x03
     e64:	85 81       	ldd	r24, Z+5	; 0x05
     e66:	83 70       	andi	r24, 0x03	; 3
     e68:	e8 2f       	mov	r30, r24
     e6a:	ca 01       	movw	r24, r20
     e6c:	b9 01       	movw	r22, r18
     e6e:	4e 2f       	mov	r20, r30
     e70:	0e 94 67 08 	call	0x10ce	; 0x10ce <set_baudRate>
		// Construct Frame Size
		set_frame_size(_obj->usart_character_size, _obj->usart_parity);
     e74:	ea 81       	ldd	r30, Y+2	; 0x02
     e76:	fb 81       	ldd	r31, Y+3	; 0x03
     e78:	84 81       	ldd	r24, Z+4	; 0x04
     e7a:	82 95       	swap	r24
     e7c:	8f 70       	andi	r24, 0x0F	; 15
     e7e:	28 2f       	mov	r18, r24
     e80:	ea 81       	ldd	r30, Y+2	; 0x02
     e82:	fb 81       	ldd	r31, Y+3	; 0x03
     e84:	85 81       	ldd	r24, Z+5	; 0x05
     e86:	86 95       	lsr	r24
     e88:	86 95       	lsr	r24
     e8a:	83 70       	andi	r24, 0x03	; 3
     e8c:	98 2f       	mov	r25, r24
     e8e:	82 2f       	mov	r24, r18
     e90:	69 2f       	mov	r22, r25
     e92:	0e 94 2d 09 	call	0x125a	; 0x125a <set_frame_size>
		// Enable USART Module
		if (_obj->usart_rx_enable == USART_RX_ENABLE)
     e96:	ea 81       	ldd	r30, Y+2	; 0x02
     e98:	fb 81       	ldd	r31, Y+3	; 0x03
     e9a:	84 81       	ldd	r24, Z+4	; 0x04
     e9c:	81 70       	andi	r24, 0x01	; 1
     e9e:	88 23       	and	r24, r24
     ea0:	39 f0       	breq	.+14     	; 0xeb0 <USART_Init+0x82>
		{
			SET_BIT(UCSRB, RXEN);
     ea2:	aa e2       	ldi	r26, 0x2A	; 42
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ea e2       	ldi	r30, 0x2A	; 42
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	80 61       	ori	r24, 0x10	; 16
     eae:	8c 93       	st	X, r24
		}
		if(_obj->usart_tx_enable == USART_TX_ENABLE)
     eb0:	ea 81       	ldd	r30, Y+2	; 0x02
     eb2:	fb 81       	ldd	r31, Y+3	; 0x03
     eb4:	84 81       	ldd	r24, Z+4	; 0x04
     eb6:	84 70       	andi	r24, 0x04	; 4
     eb8:	88 23       	and	r24, r24
     eba:	39 f0       	breq	.+14     	; 0xeca <USART_Init+0x9c>
		{
			SET_BIT(UCSRB, TXEN);
     ebc:	aa e2       	ldi	r26, 0x2A	; 42
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ea e2       	ldi	r30, 0x2A	; 42
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	88 60       	ori	r24, 0x08	; 8
     ec8:	8c 93       	st	X, r24
		}
	}
	return ret;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <USART_Send_Byte_Blocking>:
Std_ReturnType USART_Send_Byte_Blocking(const uint8 _data_byte)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	00 d0       	rcall	.+0      	; 0xede <USART_Send_Byte_Blocking+0x6>
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	89 83       	std	Y+1, r24	; 0x01
	/* wait until TX buffer (UDR) is empty */
	while(!READ_BIT(UCSRA, UDRE));
     ee8:	eb e2       	ldi	r30, 0x2B	; 43
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	82 95       	swap	r24
     ef0:	86 95       	lsr	r24
     ef2:	87 70       	andi	r24, 0x07	; 7
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	81 70       	andi	r24, 0x01	; 1
     efa:	90 70       	andi	r25, 0x00	; 0
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	a1 f3       	breq	.-24     	; 0xee8 <USART_Send_Byte_Blocking+0x10>
	UDR = _data_byte;
     f00:	ec e2       	ldi	r30, 0x2C	; 44
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	80 83       	st	Z, r24
	/* wait until TX shift register is empty (Transmission complete) */
	while(!READ_BIT(UCSRA, TXC));
     f08:	eb e2       	ldi	r30, 0x2B	; 43
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	82 95       	swap	r24
     f10:	86 95       	lsr	r24
     f12:	86 95       	lsr	r24
     f14:	83 70       	andi	r24, 0x03	; 3
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	81 70       	andi	r24, 0x01	; 1
     f1c:	90 70       	andi	r25, 0x00	; 0
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	99 f3       	breq	.-26     	; 0xf08 <USART_Send_Byte_Blocking+0x30>
	/* Clear USART Transmit Complete flag */
	SET_BIT(UCSRA, TXC);
     f22:	ab e2       	ldi	r26, 0x2B	; 43
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	eb e2       	ldi	r30, 0x2B	; 43
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	80 64       	ori	r24, 0x40	; 64
     f2e:	8c 93       	st	X, r24
	return ret;
     f30:	89 81       	ldd	r24, Y+1	; 0x01
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <USART_Receive_Byte_Blocking>:
Std_ReturnType USART_Receive_Byte_Blocking(usart_t* _obj, uint8* _data_byte)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	00 d0       	rcall	.+0      	; 0xf42 <USART_Receive_Byte_Blocking+0x6>
     f42:	00 d0       	rcall	.+0      	; 0xf44 <USART_Receive_Byte_Blocking+0x8>
     f44:	0f 92       	push	r0
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	9b 83       	std	Y+3, r25	; 0x03
     f4c:	8a 83       	std	Y+2, r24	; 0x02
     f4e:	7d 83       	std	Y+5, r23	; 0x05
     f50:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _obj || NULL == _data_byte)
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	9b 81       	ldd	r25, Y+3	; 0x03
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	21 f0       	breq	.+8      	; 0xf66 <USART_Receive_Byte_Blocking+0x2a>
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	9d 81       	ldd	r25, Y+5	; 0x05
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	11 f4       	brne	.+4      	; 0xf6a <USART_Receive_Byte_Blocking+0x2e>
	{
		ret = E_NOT_OK;
     f66:	19 82       	std	Y+1, r1	; 0x01
     f68:	25 c0       	rjmp	.+74     	; 0xfb4 <USART_Receive_Byte_Blocking+0x78>
	}
	else
	{
		/* wait until received byte loaded in RX buffer (UDR) */
		while(!READ_BIT(UCSRA, RXC));
     f6a:	eb e2       	ldi	r30, 0x2B	; 43
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	88 23       	and	r24, r24
     f72:	dc f7       	brge	.-10     	; 0xf6a <USART_Receive_Byte_Blocking+0x2e>
		/* Reading flags for error checking */
		_obj->error_status.flag_status = UCSRA;
     f74:	eb e2       	ldi	r30, 0x2B	; 43
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	ea 81       	ldd	r30, Y+2	; 0x02
     f7c:	fb 81       	ldd	r31, Y+3	; 0x03
     f7e:	86 83       	std	Z+6, r24	; 0x06
		if(_obj->error_status.usart_dov || _obj->error_status.usart_ferr || _obj->error_status.usart_pe)
     f80:	ea 81       	ldd	r30, Y+2	; 0x02
     f82:	fb 81       	ldd	r31, Y+3	; 0x03
     f84:	86 81       	ldd	r24, Z+6	; 0x06
     f86:	88 70       	andi	r24, 0x08	; 8
     f88:	88 23       	and	r24, r24
     f8a:	61 f4       	brne	.+24     	; 0xfa4 <USART_Receive_Byte_Blocking+0x68>
     f8c:	ea 81       	ldd	r30, Y+2	; 0x02
     f8e:	fb 81       	ldd	r31, Y+3	; 0x03
     f90:	86 81       	ldd	r24, Z+6	; 0x06
     f92:	80 71       	andi	r24, 0x10	; 16
     f94:	88 23       	and	r24, r24
     f96:	31 f4       	brne	.+12     	; 0xfa4 <USART_Receive_Byte_Blocking+0x68>
     f98:	ea 81       	ldd	r30, Y+2	; 0x02
     f9a:	fb 81       	ldd	r31, Y+3	; 0x03
     f9c:	86 81       	ldd	r24, Z+6	; 0x06
     f9e:	84 70       	andi	r24, 0x04	; 4
     fa0:	88 23       	and	r24, r24
     fa2:	11 f0       	breq	.+4      	; 0xfa8 <USART_Receive_Byte_Blocking+0x6c>
		{	// some error occur
			ret = E_NOT_OK;
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	06 c0       	rjmp	.+12     	; 0xfb4 <USART_Receive_Byte_Blocking+0x78>
		}
		else
		{	// no error detected.
			*_data_byte = UDR;
     fa8:	ec e2       	ldi	r30, 0x2C	; 44
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	ec 81       	ldd	r30, Y+4	; 0x04
     fb0:	fd 81       	ldd	r31, Y+5	; 0x05
     fb2:	80 83       	st	Z, r24
		}
	}
	return ret;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <USART_sendString_Blocking>:
Std_ReturnType USART_sendString_Blocking(const uint8 *Str)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <USART_sendString_Blocking+0x6>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <USART_sendString_Blocking+0x8>
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	9c 83       	std	Y+4, r25	; 0x04
     fd4:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType ret = E_OK;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 str_index = 0;
     fda:	19 82       	std	Y+1, r1	; 0x01
     fdc:	0e c0       	rjmp	.+28     	; 0xffa <USART_sendString_Blocking+0x34>
	while('\0' != Str[str_index])
	{
		USART_Send_Byte_Blocking(Str[str_index]);
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	fc 01       	movw	r30, r24
     fea:	e2 0f       	add	r30, r18
     fec:	f3 1f       	adc	r31, r19
     fee:	80 81       	ld	r24, Z
     ff0:	0e 94 6c 07 	call	0xed8	; 0xed8 <USART_Send_Byte_Blocking>
		str_index++;
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	8f 5f       	subi	r24, 0xFF	; 255
     ff8:	89 83       	std	Y+1, r24	; 0x01
}
Std_ReturnType USART_sendString_Blocking(const uint8 *Str)
{
	Std_ReturnType ret = E_OK;
	uint8 str_index = 0;
	while('\0' != Str[str_index])
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	fc 01       	movw	r30, r24
    1006:	e2 0f       	add	r30, r18
    1008:	f3 1f       	adc	r31, r19
    100a:	80 81       	ld	r24, Z
    100c:	88 23       	and	r24, r24
    100e:	39 f7       	brne	.-50     	; 0xfde <USART_sendString_Blocking+0x18>
	{
		USART_Send_Byte_Blocking(Str[str_index]);
		str_index++;
	}
	return ret;
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <USART_receiveString_Blocking>:
Std_ReturnType USART_receiveString_Blocking(usart_t* _obj, uint8 *Str)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	00 d0       	rcall	.+0      	; 0x1026 <USART_receiveString_Blocking+0x6>
    1026:	00 d0       	rcall	.+0      	; 0x1028 <USART_receiveString_Blocking+0x8>
    1028:	00 d0       	rcall	.+0      	; 0x102a <USART_receiveString_Blocking+0xa>
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	9c 83       	std	Y+4, r25	; 0x04
    1030:	8b 83       	std	Y+3, r24	; 0x03
    1032:	7e 83       	std	Y+6, r23	; 0x06
    1034:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType ret = E_OK;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	8a 83       	std	Y+2, r24	; 0x02
	uint8 str_index = 0;
    103a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == _obj || NULL == Str)
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	21 f0       	breq	.+8      	; 0x104c <USART_receiveString_Blocking+0x2c>
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	11 f4       	brne	.+4      	; 0x1050 <USART_receiveString_Blocking+0x30>
	{
		ret = E_NOT_OK;
    104c:	1a 82       	std	Y+2, r1	; 0x02
    104e:	35 c0       	rjmp	.+106    	; 0x10ba <USART_receiveString_Blocking+0x9a>
	}
	else
	{
		ret = USART_Receive_Byte_Blocking(_obj, &Str[str_index]);
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	28 0f       	add	r18, r24
    105c:	39 1f       	adc	r19, r25
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	9c 81       	ldd	r25, Y+4	; 0x04
    1062:	b9 01       	movw	r22, r18
    1064:	0e 94 9e 07 	call	0xf3c	; 0xf3c <USART_Receive_Byte_Blocking>
    1068:	8a 83       	std	Y+2, r24	; 0x02
    106a:	13 c0       	rjmp	.+38     	; 0x1092 <USART_receiveString_Blocking+0x72>
		while('#' != Str[str_index])
		{
			str_index++;
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	89 83       	std	Y+1, r24	; 0x01
			ret = USART_Receive_Byte_Blocking(_obj, &Str[str_index]);
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	9e 81       	ldd	r25, Y+6	; 0x06
    107c:	28 0f       	add	r18, r24
    107e:	39 1f       	adc	r19, r25
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	b9 01       	movw	r22, r18
    1086:	0e 94 9e 07 	call	0xf3c	; 0xf3c <USART_Receive_Byte_Blocking>
    108a:	8a 83       	std	Y+2, r24	; 0x02
			if(E_NOT_OK == ret)
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	88 23       	and	r24, r24
    1090:	59 f0       	breq	.+22     	; 0x10a8 <USART_receiveString_Blocking+0x88>
		ret = E_NOT_OK;
	}
	else
	{
		ret = USART_Receive_Byte_Blocking(_obj, &Str[str_index]);
		while('#' != Str[str_index])
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	9e 81       	ldd	r25, Y+6	; 0x06
    109c:	fc 01       	movw	r30, r24
    109e:	e2 0f       	add	r30, r18
    10a0:	f3 1f       	adc	r31, r19
    10a2:	80 81       	ld	r24, Z
    10a4:	83 32       	cpi	r24, 0x23	; 35
    10a6:	11 f7       	brne	.-60     	; 0x106c <USART_receiveString_Blocking+0x4c>
			if(E_NOT_OK == ret)
			{
				break;
			}
		}
		Str[str_index] = '\0';
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	9e 81       	ldd	r25, Y+6	; 0x06
    10b2:	fc 01       	movw	r30, r24
    10b4:	e2 0f       	add	r30, r18
    10b6:	f3 1f       	adc	r31, r19
    10b8:	10 82       	st	Z, r1
	}
	return ret;
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
}
    10bc:	26 96       	adiw	r28, 0x06	; 6
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <set_baudRate>:
		TX_interruptHandler();
}
#endif	//

static void set_baudRate(uint32 baudRate, uint8 usart_mode)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	29 97       	sbiw	r28, 0x09	; 9
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	6b 83       	std	Y+3, r22	; 0x03
    10e4:	7c 83       	std	Y+4, r23	; 0x04
    10e6:	8d 83       	std	Y+5, r24	; 0x05
    10e8:	9e 83       	std	Y+6, r25	; 0x06
    10ea:	4f 83       	std	Y+7, r20	; 0x07
	uint16 baud_reg = 0;
    10ec:	1a 82       	std	Y+2, r1	; 0x02
    10ee:	19 82       	std	Y+1, r1	; 0x01
	switch(usart_mode)
    10f0:	8f 81       	ldd	r24, Y+7	; 0x07
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	39 87       	std	Y+9, r19	; 0x09
    10f8:	28 87       	std	Y+8, r18	; 0x08
    10fa:	88 85       	ldd	r24, Y+8	; 0x08
    10fc:	99 85       	ldd	r25, Y+9	; 0x09
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	91 05       	cpc	r25, r1
    1102:	79 f1       	breq	.+94     	; 0x1162 <set_baudRate+0x94>
    1104:	28 85       	ldd	r18, Y+8	; 0x08
    1106:	39 85       	ldd	r19, Y+9	; 0x09
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	09 f0       	breq	.+2      	; 0x1110 <set_baudRate+0x42>
    110e:	5d c0       	rjmp	.+186    	; 0x11ca <set_baudRate+0xfc>
	{
	case USART_SYNC_MODE:	UCSRC |= ((1 << URSEL) | (1 << UMSEL));
    1110:	a0 e4       	ldi	r26, 0x40	; 64
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e0 e4       	ldi	r30, 0x40	; 64
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	80 6c       	ori	r24, 0xC0	; 192
    111c:	8c 93       	st	X, r24
		baud_reg = (uint16)(F_CPU / (2.0*baudRate)) -1;
    111e:	6b 81       	ldd	r22, Y+3	; 0x03
    1120:	7c 81       	ldd	r23, Y+4	; 0x04
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    112a:	9b 01       	movw	r18, r22
    112c:	ac 01       	movw	r20, r24
    112e:	ca 01       	movw	r24, r20
    1130:	b9 01       	movw	r22, r18
    1132:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	9c 01       	movw	r18, r24
    113c:	ad 01       	movw	r20, r26
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	74 e2       	ldi	r23, 0x24	; 36
    1142:	84 ef       	ldi	r24, 0xF4	; 244
    1144:	9a e4       	ldi	r25, 0x4A	; 74
    1146:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	67 c0       	rjmp	.+206    	; 0x1230 <set_baudRate+0x162>
		break;
	case USART_ASYNC_DOUBLE_SPEED_MODE:	UCSRC |= ((1 << URSEL) & ~(1 << UMSEL));
    1162:	a0 e4       	ldi	r26, 0x40	; 64
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e0 e4       	ldi	r30, 0x40	; 64
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	80 68       	ori	r24, 0x80	; 128
    116e:	8c 93       	st	X, r24
		SET_BIT(UCSRA, U2X);						// ASYNC in Double Speed
    1170:	ab e2       	ldi	r26, 0x2B	; 43
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	eb e2       	ldi	r30, 0x2B	; 43
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	82 60       	ori	r24, 0x02	; 2
    117c:	8c 93       	st	X, r24
		baud_reg = (uint16)(F_CPU / (8.0*baudRate)) -1;
    117e:	6b 81       	ldd	r22, Y+3	; 0x03
    1180:	7c 81       	ldd	r23, Y+4	; 0x04
    1182:	8d 81       	ldd	r24, Y+5	; 0x05
    1184:	9e 81       	ldd	r25, Y+6	; 0x06
    1186:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	bc 01       	movw	r22, r24
    1190:	cd 01       	movw	r24, r26
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	40 e0       	ldi	r20, 0x00	; 0
    1198:	51 e4       	ldi	r21, 0x41	; 65
    119a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9c 01       	movw	r18, r24
    11a4:	ad 01       	movw	r20, r26
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	74 e2       	ldi	r23, 0x24	; 36
    11aa:	84 ef       	ldi	r24, 0xF4	; 244
    11ac:	9a e4       	ldi	r25, 0x4A	; 74
    11ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	bc 01       	movw	r22, r24
    11b8:	cd 01       	movw	r24, r26
    11ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	9a 83       	std	Y+2, r25	; 0x02
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	33 c0       	rjmp	.+102    	; 0x1230 <set_baudRate+0x162>
		break;
	default:	UCSRC |= ((1 << URSEL) & ~(1 << UMSEL));
    11ca:	a0 e4       	ldi	r26, 0x40	; 64
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e0 e4       	ldi	r30, 0x40	; 64
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	80 68       	ori	r24, 0x80	; 128
    11d6:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRA, U2X);						// ASYNC Normal Mode
    11d8:	ab e2       	ldi	r26, 0x2B	; 43
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	eb e2       	ldi	r30, 0x2B	; 43
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	8d 7f       	andi	r24, 0xFD	; 253
    11e4:	8c 93       	st	X, r24
		baud_reg = (uint16)(F_CPU / (16.0*baudRate)) -1;
    11e6:	6b 81       	ldd	r22, Y+3	; 0x03
    11e8:	7c 81       	ldd	r23, Y+4	; 0x04
    11ea:	8d 81       	ldd	r24, Y+5	; 0x05
    11ec:	9e 81       	ldd	r25, Y+6	; 0x06
    11ee:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	bc 01       	movw	r22, r24
    11f8:	cd 01       	movw	r24, r26
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e8       	ldi	r20, 0x80	; 128
    1200:	51 e4       	ldi	r21, 0x41	; 65
    1202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9c 01       	movw	r18, r24
    120c:	ad 01       	movw	r20, r26
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	74 e2       	ldi	r23, 0x24	; 36
    1212:	84 ef       	ldi	r24, 0xF4	; 244
    1214:	9a e4       	ldi	r25, 0x4A	; 74
    1216:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	bc 01       	movw	r22, r24
    1220:	cd 01       	movw	r24, r26
    1222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	UBRRL = (uint8)baud_reg;
    1230:	e9 e2       	ldi	r30, 0x29	; 41
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	80 83       	st	Z, r24
	UBRRH = (baud_reg >> 8) & 0x0F;	// lowest 4-bits only to be masked.
    1238:	e0 e4       	ldi	r30, 0x40	; 64
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	89 2f       	mov	r24, r25
    1242:	99 27       	eor	r25, r25
    1244:	8f 70       	andi	r24, 0x0F	; 15
    1246:	80 83       	st	Z, r24
}
    1248:	29 96       	adiw	r28, 0x09	; 9
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <set_frame_size>:
static void set_frame_size(uint8 char_size, uint8 parity)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	00 d0       	rcall	.+0      	; 0x1260 <set_frame_size+0x6>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <set_frame_size+0x8>
    1262:	00 d0       	rcall	.+0      	; 0x1264 <set_frame_size+0xa>
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	6a 83       	std	Y+2, r22	; 0x02
	// use 1-stop bit
	UCSRC |= (1<<URSEL) & ~(1<<USBS);
    126c:	a0 e4       	ldi	r26, 0x40	; 64
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e0 e4       	ldi	r30, 0x40	; 64
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	80 68       	ori	r24, 0x80	; 128
    1278:	8c 93       	st	X, r24
	// configure parity bit
	switch(parity)
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	3e 83       	std	Y+6, r19	; 0x06
    1282:	2d 83       	std	Y+5, r18	; 0x05
    1284:	8d 81       	ldd	r24, Y+5	; 0x05
    1286:	9e 81       	ldd	r25, Y+6	; 0x06
    1288:	82 30       	cpi	r24, 0x02	; 2
    128a:	91 05       	cpc	r25, r1
    128c:	31 f0       	breq	.+12     	; 0x129a <set_frame_size+0x40>
    128e:	2d 81       	ldd	r18, Y+5	; 0x05
    1290:	3e 81       	ldd	r19, Y+6	; 0x06
    1292:	23 30       	cpi	r18, 0x03	; 3
    1294:	31 05       	cpc	r19, r1
    1296:	49 f0       	breq	.+18     	; 0x12aa <set_frame_size+0x50>
    1298:	10 c0       	rjmp	.+32     	; 0x12ba <set_frame_size+0x60>
	{
	case EVEN_PARITY:	UCSRC |= ((1<<URSEL) & ~(1<<UPM0)) | (1<<UPM1);
    129a:	a0 e4       	ldi	r26, 0x40	; 64
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e0 e4       	ldi	r30, 0x40	; 64
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	80 6a       	ori	r24, 0xA0	; 160
    12a6:	8c 93       	st	X, r24
    12a8:	0f c0       	rjmp	.+30     	; 0x12c8 <set_frame_size+0x6e>
		break;
	case ODD_PARITY:	UCSRC |= (1<<URSEL) | (1<<UPM0) | (1<<UPM1);
    12aa:	a0 e4       	ldi	r26, 0x40	; 64
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e0 e4       	ldi	r30, 0x40	; 64
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 6b       	ori	r24, 0xB0	; 176
    12b6:	8c 93       	st	X, r24
    12b8:	07 c0       	rjmp	.+14     	; 0x12c8 <set_frame_size+0x6e>
		break;
	default:	UCSRC |= (1<<URSEL) & ~(1<<UPM0) & ~(1<<UPM1);		// No Parity
    12ba:	a0 e4       	ldi	r26, 0x40	; 64
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e0 e4       	ldi	r30, 0x40	; 64
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	80 68       	ori	r24, 0x80	; 128
    12c6:	8c 93       	st	X, r24
	break;
	}
	// configure data size
	switch(char_size)
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	3c 83       	std	Y+4, r19	; 0x04
    12d0:	2b 83       	std	Y+3, r18	; 0x03
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	86 30       	cpi	r24, 0x06	; 6
    12d8:	91 05       	cpc	r25, r1
    12da:	29 f1       	breq	.+74     	; 0x1326 <set_frame_size+0xcc>
    12dc:	2b 81       	ldd	r18, Y+3	; 0x03
    12de:	3c 81       	ldd	r19, Y+4	; 0x04
    12e0:	27 30       	cpi	r18, 0x07	; 7
    12e2:	31 05       	cpc	r19, r1
    12e4:	34 f4       	brge	.+12     	; 0x12f2 <set_frame_size+0x98>
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	85 30       	cpi	r24, 0x05	; 5
    12ec:	91 05       	cpc	r25, r1
    12ee:	61 f0       	breq	.+24     	; 0x1308 <set_frame_size+0xae>
    12f0:	47 c0       	rjmp	.+142    	; 0x1380 <set_frame_size+0x126>
    12f2:	2b 81       	ldd	r18, Y+3	; 0x03
    12f4:	3c 81       	ldd	r19, Y+4	; 0x04
    12f6:	27 30       	cpi	r18, 0x07	; 7
    12f8:	31 05       	cpc	r19, r1
    12fa:	21 f1       	breq	.+72     	; 0x1344 <set_frame_size+0xea>
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	89 30       	cpi	r24, 0x09	; 9
    1302:	91 05       	cpc	r25, r1
    1304:	71 f1       	breq	.+92     	; 0x1362 <set_frame_size+0x108>
    1306:	3c c0       	rjmp	.+120    	; 0x1380 <set_frame_size+0x126>
	{
	case 5:	UCSRC |= ((1<<URSEL) & ~(1<<UCSZ0)) & ~(1<<UCSZ1);			// # of data bits = 5
    1308:	a0 e4       	ldi	r26, 0x40	; 64
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e0 e4       	ldi	r30, 0x40	; 64
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	80 68       	ori	r24, 0x80	; 128
    1314:	8c 93       	st	X, r24
			UCSRB &= ~(1<<UCSZ2);
    1316:	aa e2       	ldi	r26, 0x2A	; 42
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ea e2       	ldi	r30, 0x2A	; 42
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8b 7f       	andi	r24, 0xFB	; 251
    1322:	8c 93       	st	X, r24
    1324:	3b c0       	rjmp	.+118    	; 0x139c <set_frame_size+0x142>
		break;
	case 6:	UCSRC |= ((1<<URSEL) | (1<<UCSZ0)) & (~(1<<UCSZ1));			// # of data bits = 6
    1326:	a0 e4       	ldi	r26, 0x40	; 64
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e0 e4       	ldi	r30, 0x40	; 64
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	82 68       	ori	r24, 0x82	; 130
    1332:	8c 93       	st	X, r24
			UCSRB &= ~(1<<UCSZ2);
    1334:	aa e2       	ldi	r26, 0x2A	; 42
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	ea e2       	ldi	r30, 0x2A	; 42
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	8b 7f       	andi	r24, 0xFB	; 251
    1340:	8c 93       	st	X, r24
    1342:	2c c0       	rjmp	.+88     	; 0x139c <set_frame_size+0x142>
		break;
	case 7:	UCSRC |= ((1<<URSEL) & ~(1<<UCSZ0)) | (1<<UCSZ1);			// # of data bits = 7
    1344:	a0 e4       	ldi	r26, 0x40	; 64
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e0 e4       	ldi	r30, 0x40	; 64
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	84 68       	ori	r24, 0x84	; 132
    1350:	8c 93       	st	X, r24
			UCSRB &= ~(1<<UCSZ2);
    1352:	aa e2       	ldi	r26, 0x2A	; 42
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	ea e2       	ldi	r30, 0x2A	; 42
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	8b 7f       	andi	r24, 0xFB	; 251
    135e:	8c 93       	st	X, r24
    1360:	1d c0       	rjmp	.+58     	; 0x139c <set_frame_size+0x142>
		break;
	case 9:	UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);				// # of data bits = 9
    1362:	a0 e4       	ldi	r26, 0x40	; 64
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e0 e4       	ldi	r30, 0x40	; 64
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	86 68       	ori	r24, 0x86	; 134
    136e:	8c 93       	st	X, r24
			UCSRB |= (1<<UCSZ2);
    1370:	aa e2       	ldi	r26, 0x2A	; 42
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	ea e2       	ldi	r30, 0x2A	; 42
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	84 60       	ori	r24, 0x04	; 4
    137c:	8c 93       	st	X, r24
    137e:	0e c0       	rjmp	.+28     	; 0x139c <set_frame_size+0x142>
		break;
	default:UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);				// # of data bits = 8
    1380:	a0 e4       	ldi	r26, 0x40	; 64
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e0 e4       	ldi	r30, 0x40	; 64
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	86 68       	ori	r24, 0x86	; 134
    138c:	8c 93       	st	X, r24
			UCSRB &= ~(1<<UCSZ2);
    138e:	aa e2       	ldi	r26, 0x2A	; 42
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ea e2       	ldi	r30, 0x2A	; 42
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	8b 7f       	andi	r24, 0xFB	; 251
    139a:	8c 93       	st	X, r24
	}
}
    139c:	26 96       	adiw	r28, 0x06	; 6
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <timer1_init>:
static Std_ReturnType set_pwm_set_duty_cycle(const timer1_t* tmr_obj, uint8 output_pin, uint8 duty);
static Std_ReturnType set_pwm_freq(const timer1_t* tmr_obj, uint32 freq);
#endif
/* ------------------------------ SW Functions Definitions ------------------------------ */
Std_ReturnType timer1_init(const timer1_t* tmr_obj)
{
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <timer1_init+0x6>
    13b4:	0f 92       	push	r0
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	9b 83       	std	Y+3, r25	; 0x03
    13bc:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	89 83       	std	Y+1, r24	; 0x01
	if(tmr_obj == NULL)
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	9b 81       	ldd	r25, Y+3	; 0x03
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	11 f4       	brne	.+4      	; 0x13ce <timer1_init+0x20>
	{
		ret  = E_NOT_OK;
    13ca:	19 82       	std	Y+1, r1	; 0x01
    13cc:	24 c0       	rjmp	.+72     	; 0x1416 <timer1_init+0x68>
	}
	else
	{
		// Disable timer1 module
		TCCR1A = 0;
    13ce:	ef e4       	ldi	r30, 0x4F	; 79
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	10 82       	st	Z, r1
		TCCR1B = 0;
    13d4:	ee e4       	ldi	r30, 0x4E	; 78
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	10 82       	st	Z, r1
		/* Set Interrupts Configurations */
#if TIMER1_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
		INTERRUPT_GLOBAL_ENABLE();
    13da:	af e5       	ldi	r26, 0x5F	; 95
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	ef e5       	ldi	r30, 0x5F	; 95
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	80 68       	ori	r24, 0x80	; 128
    13e6:	8c 93       	st	X, r24
#if TIMER1_OV1_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
		TIMER1_OVERFLOW_INTERRUPT_ENABLE();
    13e8:	a9 e5       	ldi	r26, 0x59	; 89
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e9 e5       	ldi	r30, 0x59	; 89
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	84 60       	ori	r24, 0x04	; 4
    13f4:	8c 93       	st	X, r24
		tmr1_IRQHandller_OVF = tmr_obj->tmr1_IRQHandller_OVF;
    13f6:	ea 81       	ldd	r30, Y+2	; 0x02
    13f8:	fb 81       	ldd	r31, Y+3	; 0x03
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	90 93 87 02 	sts	0x0287, r25
    1402:	80 93 86 02 	sts	0x0286, r24
#if	TIMER1_IC1_INTERRRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
		TIMER1_IC1_INTERRUPT_ENABLE();
#endif
#endif
		/*Set Timer1 General Mode */
		timer1_set_general_mode(tmr_obj);
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	9b 81       	ldd	r25, Y+3	; 0x03
    140a:	0e 94 97 0a 	call	0x152e	; 0x152e <timer1_set_general_mode>
		OCR1AL = (uint8)(tmr_obj->tmr1_OCR1A_preload_value);
		ICR1H = (uint8)(tmr_obj->tmr1_ICR1_preload_value >> 8);
		ICR1L = (uint8)(tmr_obj->tmr1_ICR1_preload_value);
#endif
		/* Enable Timer1 Module */
		timer1_set_clock_source(tmr_obj);
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	9b 81       	ldd	r25, Y+3	; 0x03
    1412:	0e 94 89 0b 	call	0x1712	; 0x1712 <timer1_set_clock_source>
	}
	return ret;
    1416:	89 81       	ldd	r24, Y+1	; 0x01
}
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <timer1_Deinit>:
Std_ReturnType timer1_Deinit(const timer1_t* tmr_obj)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <timer1_Deinit+0x6>
    142a:	0f 92       	push	r0
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	9b 83       	std	Y+3, r25	; 0x03
    1432:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	89 83       	std	Y+1, r24	; 0x01
	if(tmr_obj == NULL)
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	9b 81       	ldd	r25, Y+3	; 0x03
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	11 f4       	brne	.+4      	; 0x1444 <timer1_Deinit+0x20>
	{
		ret  = E_NOT_OK;
    1440:	19 82       	std	Y+1, r1	; 0x01
    1442:	0d c0       	rjmp	.+26     	; 0x145e <timer1_Deinit+0x3a>
	}
	else
	{
		// Disable Timer1 Module
		TCCR1B = 0x00;
    1444:	ee e4       	ldi	r30, 0x4E	; 78
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	10 82       	st	Z, r1
		TCCR1A = 0x00;
    144a:	ef e4       	ldi	r30, 0x4F	; 79
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	10 82       	st	Z, r1
		// Disable all Timer1 interrupt sources if defined
#if TIMER1_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
#if TIMER1_OV1_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
		TIMER1_OVERFLOW_INTERRUPT_DISABLE();
    1450:	a9 e5       	ldi	r26, 0x59	; 89
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e9 e5       	ldi	r30, 0x59	; 89
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	8b 7f       	andi	r24, 0xFB	; 251
    145c:	8c 93       	st	X, r24
#if	TIMER1_IC1_INTERRRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
		TIMER1_IC1_INTERRUPT_DISABLE();
#endif
#endif
	}
	return ret;
    145e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <timer1_write_counter_value>:
Std_ReturnType timer1_write_counter_value(const timer1_t* tmr_obj, uint16 value)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <timer1_write_counter_value+0x6>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <timer1_write_counter_value+0x8>
    1474:	0f 92       	push	r0
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	9b 83       	std	Y+3, r25	; 0x03
    147c:	8a 83       	std	Y+2, r24	; 0x02
    147e:	7d 83       	std	Y+5, r23	; 0x05
    1480:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	89 83       	std	Y+1, r24	; 0x01
	if(tmr_obj == NULL)
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	9b 81       	ldd	r25, Y+3	; 0x03
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	11 f4       	brne	.+4      	; 0x1492 <timer1_write_counter_value+0x26>
	{
		ret  = E_NOT_OK;
    148e:	19 82       	std	Y+1, r1	; 0x01
    1490:	0b c0       	rjmp	.+22     	; 0x14a8 <timer1_write_counter_value+0x3c>
	{
		/** write sequence in 16-bit register for 8-bit architecture is as following:
		 * 1- write first the new value in High byte of the intended register
		 * 2- write second the new value in Low byte of the intended register
		 * */
		TCNT1H = (uint8)(value >> 8);
    1492:	ed e4       	ldi	r30, 0x4D	; 77
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	8c 81       	ldd	r24, Y+4	; 0x04
    1498:	9d 81       	ldd	r25, Y+5	; 0x05
    149a:	89 2f       	mov	r24, r25
    149c:	99 27       	eor	r25, r25
    149e:	80 83       	st	Z, r24
		TCNT1L = (uint8)(value);
    14a0:	ec e4       	ldi	r30, 0x4C	; 76
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	80 83       	st	Z, r24
	}
	return ret;
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <timer1_read_counter_value>:
Std_ReturnType timer1_read_counter_value(const timer1_t* tmr_obj, uint16* ret_value)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <timer1_read_counter_value+0x6>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <timer1_read_counter_value+0x8>
    14c2:	0f 92       	push	r0
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	9b 83       	std	Y+3, r25	; 0x03
    14ca:	8a 83       	std	Y+2, r24	; 0x02
    14cc:	7d 83       	std	Y+5, r23	; 0x05
    14ce:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	89 83       	std	Y+1, r24	; 0x01
	if(tmr_obj == NULL || NULL == ret_value)
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	9b 81       	ldd	r25, Y+3	; 0x03
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	21 f0       	breq	.+8      	; 0x14e4 <timer1_read_counter_value+0x2a>
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	11 f4       	brne	.+4      	; 0x14e8 <timer1_read_counter_value+0x2e>
	{
		ret  = E_NOT_OK;
    14e4:	19 82       	std	Y+1, r1	; 0x01
    14e6:	1a c0       	rjmp	.+52     	; 0x151c <timer1_read_counter_value+0x62>
	{
		/** read sequence in 16-bit register for 8-bit architecture is as following:
		 * 1- read first the new value in Low byte of the intended register
		 * 2- read second the new value in High byte of the intended register
		 * */
		*ret_value = TCNT1L;
    14e8:	ec e4       	ldi	r30, 0x4C	; 76
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	ec 81       	ldd	r30, Y+4	; 0x04
    14f4:	fd 81       	ldd	r31, Y+5	; 0x05
    14f6:	91 83       	std	Z+1, r25	; 0x01
    14f8:	80 83       	st	Z, r24
		*ret_value |= (((uint16)TCNT1H) << 8);
    14fa:	ec 81       	ldd	r30, Y+4	; 0x04
    14fc:	fd 81       	ldd	r31, Y+5	; 0x05
    14fe:	20 81       	ld	r18, Z
    1500:	31 81       	ldd	r19, Z+1	; 0x01
    1502:	ed e4       	ldi	r30, 0x4D	; 77
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	98 2f       	mov	r25, r24
    150e:	88 27       	eor	r24, r24
    1510:	82 2b       	or	r24, r18
    1512:	93 2b       	or	r25, r19
    1514:	ec 81       	ldd	r30, Y+4	; 0x04
    1516:	fd 81       	ldd	r31, Y+5	; 0x05
    1518:	91 83       	std	Z+1, r25	; 0x01
    151a:	80 83       	st	Z, r24
	}
	return ret;
    151c:	89 81       	ldd	r24, Y+1	; 0x01
}
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <timer1_set_general_mode>:
}
#endif

/* ------------------------------ Helper Functions Definitions ------------------------------ */
static Std_ReturnType timer1_set_general_mode(const timer1_t* tmr_obj)
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	00 d0       	rcall	.+0      	; 0x1534 <timer1_set_general_mode+0x6>
    1534:	00 d0       	rcall	.+0      	; 0x1536 <timer1_set_general_mode+0x8>
    1536:	0f 92       	push	r0
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	9b 83       	std	Y+3, r25	; 0x03
    153e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	89 83       	std	Y+1, r24	; 0x01
	switch(tmr_obj->timer1_general_mode)
    1544:	ea 81       	ldd	r30, Y+2	; 0x02
    1546:	fb 81       	ldd	r31, Y+3	; 0x03
    1548:	82 81       	ldd	r24, Z+2	; 0x02
    154a:	8f 70       	andi	r24, 0x0F	; 15
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	3d 83       	std	Y+5, r19	; 0x05
    1552:	2c 83       	std	Y+4, r18	; 0x04
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	87 30       	cpi	r24, 0x07	; 7
    155a:	91 05       	cpc	r25, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <timer1_set_general_mode+0x32>
    155e:	74 c0       	rjmp	.+232    	; 0x1648 <timer1_set_general_mode+0x11a>
    1560:	2c 81       	ldd	r18, Y+4	; 0x04
    1562:	3d 81       	ldd	r19, Y+5	; 0x05
    1564:	28 30       	cpi	r18, 0x08	; 8
    1566:	31 05       	cpc	r19, r1
    1568:	2c f5       	brge	.+74     	; 0x15b4 <timer1_set_general_mode+0x86>
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	91 05       	cpc	r25, r1
    1572:	09 f4       	brne	.+2      	; 0x1576 <timer1_set_general_mode+0x48>
    1574:	94 c0       	rjmp	.+296    	; 0x169e <timer1_set_general_mode+0x170>
    1576:	2c 81       	ldd	r18, Y+4	; 0x04
    1578:	3d 81       	ldd	r19, Y+5	; 0x05
    157a:	24 30       	cpi	r18, 0x04	; 4
    157c:	31 05       	cpc	r19, r1
    157e:	6c f4       	brge	.+26     	; 0x159a <timer1_set_general_mode+0x6c>
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	9d 81       	ldd	r25, Y+5	; 0x05
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	91 05       	cpc	r25, r1
    1588:	09 f4       	brne	.+2      	; 0x158c <timer1_set_general_mode+0x5e>
    158a:	79 c0       	rjmp	.+242    	; 0x167e <timer1_set_general_mode+0x150>
    158c:	2c 81       	ldd	r18, Y+4	; 0x04
    158e:	3d 81       	ldd	r19, Y+5	; 0x05
    1590:	22 30       	cpi	r18, 0x02	; 2
    1592:	31 05       	cpc	r19, r1
    1594:	09 f4       	brne	.+2      	; 0x1598 <timer1_set_general_mode+0x6a>
    1596:	7b c0       	rjmp	.+246    	; 0x168e <timer1_set_general_mode+0x160>
    1598:	ad c0       	rjmp	.+346    	; 0x16f4 <timer1_set_general_mode+0x1c6>
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	9d 81       	ldd	r25, Y+5	; 0x05
    159e:	85 30       	cpi	r24, 0x05	; 5
    15a0:	91 05       	cpc	r25, r1
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <timer1_set_general_mode+0x78>
    15a4:	3f c0       	rjmp	.+126    	; 0x1624 <timer1_set_general_mode+0xf6>
    15a6:	2c 81       	ldd	r18, Y+4	; 0x04
    15a8:	3d 81       	ldd	r19, Y+5	; 0x05
    15aa:	26 30       	cpi	r18, 0x06	; 6
    15ac:	31 05       	cpc	r19, r1
    15ae:	0c f0       	brlt	.+2      	; 0x15b2 <timer1_set_general_mode+0x84>
    15b0:	42 c0       	rjmp	.+132    	; 0x1636 <timer1_set_general_mode+0x108>
    15b2:	28 c0       	rjmp	.+80     	; 0x1604 <timer1_set_general_mode+0xd6>
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	9d 81       	ldd	r25, Y+5	; 0x05
    15b8:	8b 30       	cpi	r24, 0x0B	; 11
    15ba:	91 05       	cpc	r25, r1
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <timer1_set_general_mode+0x92>
    15be:	80 c0       	rjmp	.+256    	; 0x16c0 <timer1_set_general_mode+0x192>
    15c0:	2c 81       	ldd	r18, Y+4	; 0x04
    15c2:	3d 81       	ldd	r19, Y+5	; 0x05
    15c4:	2c 30       	cpi	r18, 0x0C	; 12
    15c6:	31 05       	cpc	r19, r1
    15c8:	6c f4       	brge	.+26     	; 0x15e4 <timer1_set_general_mode+0xb6>
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	9d 81       	ldd	r25, Y+5	; 0x05
    15ce:	89 30       	cpi	r24, 0x09	; 9
    15d0:	91 05       	cpc	r25, r1
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <timer1_set_general_mode+0xa8>
    15d4:	86 c0       	rjmp	.+268    	; 0x16e2 <timer1_set_general_mode+0x1b4>
    15d6:	2c 81       	ldd	r18, Y+4	; 0x04
    15d8:	3d 81       	ldd	r19, Y+5	; 0x05
    15da:	2a 30       	cpi	r18, 0x0A	; 10
    15dc:	31 05       	cpc	r19, r1
    15de:	0c f0       	brlt	.+2      	; 0x15e2 <timer1_set_general_mode+0xb4>
    15e0:	66 c0       	rjmp	.+204    	; 0x16ae <timer1_set_general_mode+0x180>
    15e2:	77 c0       	rjmp	.+238    	; 0x16d2 <timer1_set_general_mode+0x1a4>
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	9d 81       	ldd	r25, Y+5	; 0x05
    15e8:	8e 30       	cpi	r24, 0x0E	; 14
    15ea:	91 05       	cpc	r25, r1
    15ec:	b1 f1       	breq	.+108    	; 0x165a <timer1_set_general_mode+0x12c>
    15ee:	2c 81       	ldd	r18, Y+4	; 0x04
    15f0:	3d 81       	ldd	r19, Y+5	; 0x05
    15f2:	2f 30       	cpi	r18, 0x0F	; 15
    15f4:	31 05       	cpc	r19, r1
    15f6:	d1 f1       	breq	.+116    	; 0x166c <timer1_set_general_mode+0x13e>
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	9d 81       	ldd	r25, Y+5	; 0x05
    15fc:	8c 30       	cpi	r24, 0x0C	; 12
    15fe:	91 05       	cpc	r25, r1
    1600:	49 f0       	breq	.+18     	; 0x1614 <timer1_set_general_mode+0xe6>
    1602:	78 c0       	rjmp	.+240    	; 0x16f4 <timer1_set_general_mode+0x1c6>
	{
	case TIMER1_CLEAR_TIMER_COMPARE_ICR1_MODE:	TCCR1A = 0; TCCR1B = 0x18;
    1604:	ef e4       	ldi	r30, 0x4F	; 79
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	10 82       	st	Z, r1
    160a:	ee e4       	ldi	r30, 0x4E	; 78
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	88 e1       	ldi	r24, 0x18	; 24
    1610:	80 83       	st	Z, r24
    1612:	76 c0       	rjmp	.+236    	; 0x1700 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_CLEAR_TIMER_COMPARE_OCR1A_MODE:	TCCR1A = 0; TCCR1B = 0x08;
    1614:	ef e4       	ldi	r30, 0x4F	; 79
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	10 82       	st	Z, r1
    161a:	ee e4       	ldi	r30, 0x4E	; 78
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	88 e0       	ldi	r24, 0x08	; 8
    1620:	80 83       	st	Z, r24
    1622:	6e c0       	rjmp	.+220    	; 0x1700 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_FAST_PWM_TOP_FIXED_FF_MODE:		TCCR1A = 1; TCCR1B = 0x08;
    1624:	ef e4       	ldi	r30, 0x4F	; 79
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	80 83       	st	Z, r24
    162c:	ee e4       	ldi	r30, 0x4E	; 78
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	88 e0       	ldi	r24, 0x08	; 8
    1632:	80 83       	st	Z, r24
    1634:	65 c0       	rjmp	.+202    	; 0x1700 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_FAST_PWM_TOP_FIXED_1FF_MODE:	TCCR1A = 2; TCCR1B = 0x08;
    1636:	ef e4       	ldi	r30, 0x4F	; 79
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	82 e0       	ldi	r24, 0x02	; 2
    163c:	80 83       	st	Z, r24
    163e:	ee e4       	ldi	r30, 0x4E	; 78
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	88 e0       	ldi	r24, 0x08	; 8
    1644:	80 83       	st	Z, r24
    1646:	5c c0       	rjmp	.+184    	; 0x1700 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_FAST_PWM_TOP_FIXED_3FF_MODE:	TCCR1A = 3; TCCR1B = 0x08;
    1648:	ef e4       	ldi	r30, 0x4F	; 79
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	83 e0       	ldi	r24, 0x03	; 3
    164e:	80 83       	st	Z, r24
    1650:	ee e4       	ldi	r30, 0x4E	; 78
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	88 e0       	ldi	r24, 0x08	; 8
    1656:	80 83       	st	Z, r24
    1658:	53 c0       	rjmp	.+166    	; 0x1700 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_FAST_PWM_TOP_ICR_MODE:			TCCR1A = 2; TCCR1B = 0x18;
    165a:	ef e4       	ldi	r30, 0x4F	; 79
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	82 e0       	ldi	r24, 0x02	; 2
    1660:	80 83       	st	Z, r24
    1662:	ee e4       	ldi	r30, 0x4E	; 78
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	88 e1       	ldi	r24, 0x18	; 24
    1668:	80 83       	st	Z, r24
    166a:	4a c0       	rjmp	.+148    	; 0x1700 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_FAST_PWM_TOP_OCR1A_MODE:		TCCR1A = 3; TCCR1B = 0x18;
    166c:	ef e4       	ldi	r30, 0x4F	; 79
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	83 e0       	ldi	r24, 0x03	; 3
    1672:	80 83       	st	Z, r24
    1674:	ee e4       	ldi	r30, 0x4E	; 78
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	88 e1       	ldi	r24, 0x18	; 24
    167a:	80 83       	st	Z, r24
    167c:	41 c0       	rjmp	.+130    	; 0x1700 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_PC_PWM_TOP_FIXED_FF_MODE:		TCCR1A = 1; TCCR1B = 0x00;
    167e:	ef e4       	ldi	r30, 0x4F	; 79
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	80 83       	st	Z, r24
    1686:	ee e4       	ldi	r30, 0x4E	; 78
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	10 82       	st	Z, r1
    168c:	39 c0       	rjmp	.+114    	; 0x1700 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_PC_PWM_TOP_FIXED_1FF_MODE:		TCCR1A = 2; TCCR1B = 0x00;
    168e:	ef e4       	ldi	r30, 0x4F	; 79
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	80 83       	st	Z, r24
    1696:	ee e4       	ldi	r30, 0x4E	; 78
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	10 82       	st	Z, r1
    169c:	31 c0       	rjmp	.+98     	; 0x1700 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_PC_PWM_TOP_FIXED_3FF_MODE:		TCCR1A = 3; TCCR1B = 0x00;
    169e:	ef e4       	ldi	r30, 0x4F	; 79
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	83 e0       	ldi	r24, 0x03	; 3
    16a4:	80 83       	st	Z, r24
    16a6:	ee e4       	ldi	r30, 0x4E	; 78
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	10 82       	st	Z, r1
    16ac:	29 c0       	rjmp	.+82     	; 0x1700 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_PC_PWM_TOP_ICR_MODE:			TCCR1A = 2; TCCR1B = 0x10;
    16ae:	ef e4       	ldi	r30, 0x4F	; 79
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	82 e0       	ldi	r24, 0x02	; 2
    16b4:	80 83       	st	Z, r24
    16b6:	ee e4       	ldi	r30, 0x4E	; 78
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 e1       	ldi	r24, 0x10	; 16
    16bc:	80 83       	st	Z, r24
    16be:	20 c0       	rjmp	.+64     	; 0x1700 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_PC_PWM_TOP_OCR1A_MODE:			TCCR1A = 3; TCCR1B = 0x10;
    16c0:	ef e4       	ldi	r30, 0x4F	; 79
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	83 e0       	ldi	r24, 0x03	; 3
    16c6:	80 83       	st	Z, r24
    16c8:	ee e4       	ldi	r30, 0x4E	; 78
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 e1       	ldi	r24, 0x10	; 16
    16ce:	80 83       	st	Z, r24
    16d0:	17 c0       	rjmp	.+46     	; 0x1700 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_PFC_PWM_TOP_ICR_MODE:			TCCR1A = 0; TCCR1B = 0x10;
    16d2:	ef e4       	ldi	r30, 0x4F	; 79
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	10 82       	st	Z, r1
    16d8:	ee e4       	ldi	r30, 0x4E	; 78
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 e1       	ldi	r24, 0x10	; 16
    16de:	80 83       	st	Z, r24
    16e0:	0f c0       	rjmp	.+30     	; 0x1700 <timer1_set_general_mode+0x1d2>
		break;
	case TIMER1_PFC_PWM_TOP_OCR1A_MODE:			TCCR1A = 1; TCCR1B = 0x10;
    16e2:	ef e4       	ldi	r30, 0x4F	; 79
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	80 83       	st	Z, r24
    16ea:	ee e4       	ldi	r30, 0x4E	; 78
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 e1       	ldi	r24, 0x10	; 16
    16f0:	80 83       	st	Z, r24
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <timer1_set_general_mode+0x1d2>
		break;
	default:									TCCR1A = 0; TCCR1B = 0;	// NORMAL Mode
    16f4:	ef e4       	ldi	r30, 0x4F	; 79
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	10 82       	st	Z, r1
    16fa:	ee e4       	ldi	r30, 0x4E	; 78
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	10 82       	st	Z, r1
		break;
	}
	return ret;
    1700:	89 81       	ldd	r24, Y+1	; 0x01
}
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <timer1_set_clock_source>:
static void timer1_set_clock_source(const timer1_t* tmr_obj)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	00 d0       	rcall	.+0      	; 0x1718 <timer1_set_clock_source+0x6>
    1718:	00 d0       	rcall	.+0      	; 0x171a <timer1_set_clock_source+0x8>
    171a:	00 d0       	rcall	.+0      	; 0x171c <timer1_set_clock_source+0xa>
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	9a 83       	std	Y+2, r25	; 0x02
    1722:	89 83       	std	Y+1, r24	; 0x01
	if (tmr_obj->timer1_clk_src == TIMER1_INTERNAL_CLK_SOURCE)
    1724:	e9 81       	ldd	r30, Y+1	; 0x01
    1726:	fa 81       	ldd	r31, Y+2	; 0x02
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	80 71       	andi	r24, 0x10	; 16
    172c:	88 23       	and	r24, r24
    172e:	09 f0       	breq	.+2      	; 0x1732 <timer1_set_clock_source+0x20>
    1730:	83 c0       	rjmp	.+262    	; 0x1838 <timer1_set_clock_source+0x126>
	{
		switch(tmr_obj->timer1_prescaler_value)
    1732:	e9 81       	ldd	r30, Y+1	; 0x01
    1734:	fa 81       	ldd	r31, Y+2	; 0x02
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	82 95       	swap	r24
    173a:	86 95       	lsr	r24
    173c:	87 70       	andi	r24, 0x07	; 7
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	3e 83       	std	Y+6, r19	; 0x06
    1744:	2d 83       	std	Y+5, r18	; 0x05
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	82 30       	cpi	r24, 0x02	; 2
    174c:	91 05       	cpc	r25, r1
    174e:	c1 f1       	breq	.+112    	; 0x17c0 <timer1_set_clock_source+0xae>
    1750:	2d 81       	ldd	r18, Y+5	; 0x05
    1752:	3e 81       	ldd	r19, Y+6	; 0x06
    1754:	23 30       	cpi	r18, 0x03	; 3
    1756:	31 05       	cpc	r19, r1
    1758:	54 f4       	brge	.+20     	; 0x176e <timer1_set_clock_source+0x5c>
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	89 f0       	breq	.+34     	; 0x1784 <timer1_set_clock_source+0x72>
    1762:	2d 81       	ldd	r18, Y+5	; 0x05
    1764:	3e 81       	ldd	r19, Y+6	; 0x06
    1766:	21 30       	cpi	r18, 0x01	; 1
    1768:	31 05       	cpc	r19, r1
    176a:	d9 f0       	breq	.+54     	; 0x17a2 <timer1_set_clock_source+0x90>
    176c:	56 c0       	rjmp	.+172    	; 0x181a <timer1_set_clock_source+0x108>
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	83 30       	cpi	r24, 0x03	; 3
    1774:	91 05       	cpc	r25, r1
    1776:	99 f1       	breq	.+102    	; 0x17de <timer1_set_clock_source+0xcc>
    1778:	2d 81       	ldd	r18, Y+5	; 0x05
    177a:	3e 81       	ldd	r19, Y+6	; 0x06
    177c:	24 30       	cpi	r18, 0x04	; 4
    177e:	31 05       	cpc	r19, r1
    1780:	e9 f1       	breq	.+122    	; 0x17fc <timer1_set_clock_source+0xea>
    1782:	4b c0       	rjmp	.+150    	; 0x181a <timer1_set_clock_source+0x108>
		{
		case TIMER1_PRESCALER_VALUE_DIV_BY_1:		SET_BIT(TCCR1B, CS10);
    1784:	ae e4       	ldi	r26, 0x4E	; 78
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	ee e4       	ldi	r30, 0x4E	; 78
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	81 60       	ori	r24, 0x01	; 1
    1790:	8c 93       	st	X, r24
													TCCR1B &= 0xF9;
    1792:	ae e4       	ldi	r26, 0x4E	; 78
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	ee e4       	ldi	r30, 0x4E	; 78
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	89 7f       	andi	r24, 0xF9	; 249
    179e:	8c 93       	st	X, r24
    17a0:	96 c0       	rjmp	.+300    	; 0x18ce <timer1_set_clock_source+0x1bc>
			break;
		case TIMER1_PRESCALER_VALUE_DIV_BY_8:		TCCR1B &= 0xFA;
    17a2:	ae e4       	ldi	r26, 0x4E	; 78
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	ee e4       	ldi	r30, 0x4E	; 78
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	8a 7f       	andi	r24, 0xFA	; 250
    17ae:	8c 93       	st	X, r24
													SET_BIT(TCCR1B, CS11);
    17b0:	ae e4       	ldi	r26, 0x4E	; 78
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ee e4       	ldi	r30, 0x4E	; 78
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	82 60       	ori	r24, 0x02	; 2
    17bc:	8c 93       	st	X, r24
    17be:	87 c0       	rjmp	.+270    	; 0x18ce <timer1_set_clock_source+0x1bc>
			break;
		case TIMER1_PRESCALER_VALUE_DIV_BY_64:		TCCR1B |= 0x03;
    17c0:	ae e4       	ldi	r26, 0x4E	; 78
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	ee e4       	ldi	r30, 0x4E	; 78
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	83 60       	ori	r24, 0x03	; 3
    17cc:	8c 93       	st	X, r24
													CLEAR_BIT(TCCR1B, CS12);
    17ce:	ae e4       	ldi	r26, 0x4E	; 78
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	ee e4       	ldi	r30, 0x4E	; 78
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8b 7f       	andi	r24, 0xFB	; 251
    17da:	8c 93       	st	X, r24
    17dc:	78 c0       	rjmp	.+240    	; 0x18ce <timer1_set_clock_source+0x1bc>
			break;
		case TIMER1_PRESCALER_VALUE_DIV_BY_256:		TCCR1B &= 0xFC;
    17de:	ae e4       	ldi	r26, 0x4E	; 78
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	ee e4       	ldi	r30, 0x4E	; 78
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	8c 7f       	andi	r24, 0xFC	; 252
    17ea:	8c 93       	st	X, r24
													SET_BIT(TCCR1B, CS12);
    17ec:	ae e4       	ldi	r26, 0x4E	; 78
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	ee e4       	ldi	r30, 0x4E	; 78
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	84 60       	ori	r24, 0x04	; 4
    17f8:	8c 93       	st	X, r24
    17fa:	69 c0       	rjmp	.+210    	; 0x18ce <timer1_set_clock_source+0x1bc>
			break;
		case TIMER1_PRESCALER_VALUE_DIV_BY_1024:	TCCR1B |= 0x05;
    17fc:	ae e4       	ldi	r26, 0x4E	; 78
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	ee e4       	ldi	r30, 0x4E	; 78
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	85 60       	ori	r24, 0x05	; 5
    1808:	8c 93       	st	X, r24
													CLEAR_BIT(TCCR1B, CS11);
    180a:	ae e4       	ldi	r26, 0x4E	; 78
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	ee e4       	ldi	r30, 0x4E	; 78
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	8d 7f       	andi	r24, 0xFD	; 253
    1816:	8c 93       	st	X, r24
    1818:	5a c0       	rjmp	.+180    	; 0x18ce <timer1_set_clock_source+0x1bc>
			break;
		default: 	SET_BIT(TCCR1B, CS10);
    181a:	ae e4       	ldi	r26, 0x4E	; 78
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	ee e4       	ldi	r30, 0x4E	; 78
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	81 60       	ori	r24, 0x01	; 1
    1826:	8c 93       	st	X, r24
					TCCR1B &= 0xF9;
    1828:	ae e4       	ldi	r26, 0x4E	; 78
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	ee e4       	ldi	r30, 0x4E	; 78
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	89 7f       	andi	r24, 0xF9	; 249
    1834:	8c 93       	st	X, r24
    1836:	4b c0       	rjmp	.+150    	; 0x18ce <timer1_set_clock_source+0x1bc>
			break;
		}
	}
	else if(tmr_obj->timer1_clk_src == TIMER1_EXTERNAL_CLK_SOURCE)
    1838:	e9 81       	ldd	r30, Y+1	; 0x01
    183a:	fa 81       	ldd	r31, Y+2	; 0x02
    183c:	82 81       	ldd	r24, Z+2	; 0x02
    183e:	80 71       	andi	r24, 0x10	; 16
    1840:	88 23       	and	r24, r24
    1842:	b9 f1       	breq	.+110    	; 0x18b2 <timer1_set_clock_source+0x1a0>
	{
		switch(tmr_obj->timer1_edge_detect)
    1844:	e9 81       	ldd	r30, Y+1	; 0x01
    1846:	fa 81       	ldd	r31, Y+2	; 0x02
    1848:	83 81       	ldd	r24, Z+3	; 0x03
    184a:	81 70       	andi	r24, 0x01	; 1
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	3c 83       	std	Y+4, r19	; 0x04
    1852:	2b 83       	std	Y+3, r18	; 0x03
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	69 f0       	breq	.+26     	; 0x1876 <timer1_set_clock_source+0x164>
    185c:	2b 81       	ldd	r18, Y+3	; 0x03
    185e:	3c 81       	ldd	r19, Y+4	; 0x04
    1860:	21 30       	cpi	r18, 0x01	; 1
    1862:	31 05       	cpc	r19, r1
    1864:	b9 f4       	brne	.+46     	; 0x1894 <timer1_set_clock_source+0x182>
		{
		case TIMER1_EXTERNAL_CLK_RISING_EDGE:		TCCR1B |= 0x07;
    1866:	ae e4       	ldi	r26, 0x4E	; 78
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	ee e4       	ldi	r30, 0x4E	; 78
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	87 60       	ori	r24, 0x07	; 7
    1872:	8c 93       	st	X, r24
    1874:	16 c0       	rjmp	.+44     	; 0x18a2 <timer1_set_clock_source+0x190>
			break;
		case TIMER1_EXTERNAL_CLK_FALLING_EDGE:		CLEAR_BIT(TCCR1B, CS10);
    1876:	ae e4       	ldi	r26, 0x4E	; 78
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	ee e4       	ldi	r30, 0x4E	; 78
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8e 7f       	andi	r24, 0xFE	; 254
    1882:	8c 93       	st	X, r24
													TCCR1B |= 0x06;
    1884:	ae e4       	ldi	r26, 0x4E	; 78
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	ee e4       	ldi	r30, 0x4E	; 78
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	86 60       	ori	r24, 0x06	; 6
    1890:	8c 93       	st	X, r24
    1892:	07 c0       	rjmp	.+14     	; 0x18a2 <timer1_set_clock_source+0x190>
			break;
		default:	TCCR1B |= 0x07;
    1894:	ae e4       	ldi	r26, 0x4E	; 78
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	ee e4       	ldi	r30, 0x4E	; 78
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	87 60       	ori	r24, 0x07	; 7
    18a0:	8c 93       	st	X, r24
			break;
		}
		CLEAR_BIT(DDRB, DDB1);	// set T1 pin as Digital i/p for Counter mode
    18a2:	a7 e3       	ldi	r26, 0x37	; 55
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e7 e3       	ldi	r30, 0x37	; 55
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	8d 7f       	andi	r24, 0xFD	; 253
    18ae:	8c 93       	st	X, r24
    18b0:	0e c0       	rjmp	.+28     	; 0x18ce <timer1_set_clock_source+0x1bc>
	}
	else
	{
		SET_BIT(TCCR1B, CS10);\
    18b2:	ae e4       	ldi	r26, 0x4E	; 78
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	ee e4       	ldi	r30, 0x4E	; 78
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	81 60       	ori	r24, 0x01	; 1
    18be:	8c 93       	st	X, r24
													TCCR1B &= 0xF9;
    18c0:	ae e4       	ldi	r26, 0x4E	; 78
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	ee e4       	ldi	r30, 0x4E	; 78
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	89 7f       	andi	r24, 0xF9	; 249
    18cc:	8c 93       	st	X, r24
	}
}
    18ce:	26 96       	adiw	r28, 0x06	; 6
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <__vector_8>:
#endif
/* Implement ISRs for the four Sources Interrupts related to TIMER1 */
#if TIMER1_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
#if TIMER1_OV1_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
ISR(TIMER1_OVF_vect)
{
    18e0:	1f 92       	push	r1
    18e2:	0f 92       	push	r0
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	0f 92       	push	r0
    18e8:	11 24       	eor	r1, r1
    18ea:	2f 93       	push	r18
    18ec:	3f 93       	push	r19
    18ee:	4f 93       	push	r20
    18f0:	5f 93       	push	r21
    18f2:	6f 93       	push	r22
    18f4:	7f 93       	push	r23
    18f6:	8f 93       	push	r24
    18f8:	9f 93       	push	r25
    18fa:	af 93       	push	r26
    18fc:	bf 93       	push	r27
    18fe:	ef 93       	push	r30
    1900:	ff 93       	push	r31
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
	/* ISR code */
	if(tmr1_IRQHandller_OVF)
    190a:	80 91 86 02 	lds	r24, 0x0286
    190e:	90 91 87 02 	lds	r25, 0x0287
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	29 f0       	breq	.+10     	; 0x1920 <__vector_8+0x40>
		tmr1_IRQHandller_OVF();
    1916:	e0 91 86 02 	lds	r30, 0x0286
    191a:	f0 91 87 02 	lds	r31, 0x0287
    191e:	09 95       	icall
	// clear TIMER0_COMP flag happen automatically
}
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	ff 91       	pop	r31
    1926:	ef 91       	pop	r30
    1928:	bf 91       	pop	r27
    192a:	af 91       	pop	r26
    192c:	9f 91       	pop	r25
    192e:	8f 91       	pop	r24
    1930:	7f 91       	pop	r23
    1932:	6f 91       	pop	r22
    1934:	5f 91       	pop	r21
    1936:	4f 91       	pop	r20
    1938:	3f 91       	pop	r19
    193a:	2f 91       	pop	r18
    193c:	0f 90       	pop	r0
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	0f 90       	pop	r0
    1942:	1f 90       	pop	r1
    1944:	18 95       	reti

00001946 <GPIO_pin_direction_initialize>:
volatile uint8 *PORT_registers[4] = {&PORTA, &PORTB, &PORTC, &PORTD};
volatile uint8 *PIN_registers[4] = {&PINA, &PINB, &PINC, &PIND};


Std_ReturnType GPIO_pin_direction_initialize(const gpio_config_pin_t* gpio_obj)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	00 d0       	rcall	.+0      	; 0x194c <GPIO_pin_direction_initialize+0x6>
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	9b 83       	std	Y+3, r25	; 0x03
    1954:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	9b 81       	ldd	r25, Y+3	; 0x03
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	11 f4       	brne	.+4      	; 0x1966 <GPIO_pin_direction_initialize+0x20>
	{
		ret = E_NOT_OK;
    1962:	19 82       	std	Y+1, r1	; 0x01
    1964:	6e c0       	rjmp	.+220    	; 0x1a42 <GPIO_pin_direction_initialize+0xfc>
	}
	else
	{
		ret = E_OK;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	89 83       	std	Y+1, r24	; 0x01
		if(gpio_obj->direction == GPIO_DIRECTION_INPUT)
    196a:	ea 81       	ldd	r30, Y+2	; 0x02
    196c:	fb 81       	ldd	r31, Y+3	; 0x03
    196e:	80 81       	ld	r24, Z
    1970:	80 74       	andi	r24, 0x40	; 64
    1972:	88 23       	and	r24, r24
    1974:	89 f5       	brne	.+98     	; 0x19d8 <GPIO_pin_direction_initialize+0x92>
		{
			CLEAR_BIT(*DDR_registers[gpio_obj->port], gpio_obj->pin);
    1976:	ea 81       	ldd	r30, Y+2	; 0x02
    1978:	fb 81       	ldd	r31, Y+3	; 0x03
    197a:	80 81       	ld	r24, Z
    197c:	87 70       	andi	r24, 0x07	; 7
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	fc 01       	movw	r30, r24
    1988:	ec 5c       	subi	r30, 0xCC	; 204
    198a:	fd 4f       	sbci	r31, 0xFD	; 253
    198c:	a0 81       	ld	r26, Z
    198e:	b1 81       	ldd	r27, Z+1	; 0x01
    1990:	ea 81       	ldd	r30, Y+2	; 0x02
    1992:	fb 81       	ldd	r31, Y+3	; 0x03
    1994:	80 81       	ld	r24, Z
    1996:	87 70       	andi	r24, 0x07	; 7
    1998:	88 2f       	mov	r24, r24
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	fc 01       	movw	r30, r24
    19a2:	ec 5c       	subi	r30, 0xCC	; 204
    19a4:	fd 4f       	sbci	r31, 0xFD	; 253
    19a6:	01 90       	ld	r0, Z+
    19a8:	f0 81       	ld	r31, Z
    19aa:	e0 2d       	mov	r30, r0
    19ac:	40 81       	ld	r20, Z
    19ae:	ea 81       	ldd	r30, Y+2	; 0x02
    19b0:	fb 81       	ldd	r31, Y+3	; 0x03
    19b2:	80 81       	ld	r24, Z
    19b4:	86 95       	lsr	r24
    19b6:	86 95       	lsr	r24
    19b8:	86 95       	lsr	r24
    19ba:	87 70       	andi	r24, 0x07	; 7
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	02 2e       	mov	r0, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <GPIO_pin_direction_initialize+0x86>
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	0a 94       	dec	r0
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <GPIO_pin_direction_initialize+0x82>
    19d0:	80 95       	com	r24
    19d2:	84 23       	and	r24, r20
    19d4:	8c 93       	st	X, r24
    19d6:	35 c0       	rjmp	.+106    	; 0x1a42 <GPIO_pin_direction_initialize+0xfc>
		}
		else if(gpio_obj->direction == GPIO_DIRECTION_OUTPUT)
    19d8:	ea 81       	ldd	r30, Y+2	; 0x02
    19da:	fb 81       	ldd	r31, Y+3	; 0x03
    19dc:	80 81       	ld	r24, Z
    19de:	80 74       	andi	r24, 0x40	; 64
    19e0:	88 23       	and	r24, r24
    19e2:	79 f1       	breq	.+94     	; 0x1a42 <GPIO_pin_direction_initialize+0xfc>
		{
			SET_BIT(*DDR_registers[gpio_obj->port], gpio_obj->pin);
    19e4:	ea 81       	ldd	r30, Y+2	; 0x02
    19e6:	fb 81       	ldd	r31, Y+3	; 0x03
    19e8:	80 81       	ld	r24, Z
    19ea:	87 70       	andi	r24, 0x07	; 7
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	fc 01       	movw	r30, r24
    19f6:	ec 5c       	subi	r30, 0xCC	; 204
    19f8:	fd 4f       	sbci	r31, 0xFD	; 253
    19fa:	a0 81       	ld	r26, Z
    19fc:	b1 81       	ldd	r27, Z+1	; 0x01
    19fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1a00:	fb 81       	ldd	r31, Y+3	; 0x03
    1a02:	80 81       	ld	r24, Z
    1a04:	87 70       	andi	r24, 0x07	; 7
    1a06:	88 2f       	mov	r24, r24
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	fc 01       	movw	r30, r24
    1a10:	ec 5c       	subi	r30, 0xCC	; 204
    1a12:	fd 4f       	sbci	r31, 0xFD	; 253
    1a14:	01 90       	ld	r0, Z+
    1a16:	f0 81       	ld	r31, Z
    1a18:	e0 2d       	mov	r30, r0
    1a1a:	40 81       	ld	r20, Z
    1a1c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a1e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a20:	80 81       	ld	r24, Z
    1a22:	86 95       	lsr	r24
    1a24:	86 95       	lsr	r24
    1a26:	86 95       	lsr	r24
    1a28:	87 70       	andi	r24, 0x07	; 7
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	02 2e       	mov	r0, r18
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <GPIO_pin_direction_initialize+0xf4>
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	0a 94       	dec	r0
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <GPIO_pin_direction_initialize+0xf0>
    1a3e:	84 2b       	or	r24, r20
    1a40:	8c 93       	st	X, r24
		}
	}
	return ret;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <GPIO_pin_initialize>:
Std_ReturnType GPIO_pin_initialize(const gpio_config_pin_t* gpio_obj)
{
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <GPIO_pin_initialize+0x6>
    1a56:	0f 92       	push	r0
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	9b 83       	std	Y+3, r25	; 0x03
    1a5e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	89 83       	std	Y+1, r24	; 0x01
		if (NULL == gpio_obj)
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	9b 81       	ldd	r25, Y+3	; 0x03
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	11 f4       	brne	.+4      	; 0x1a70 <GPIO_pin_initialize+0x20>
		{
			ret = E_NOT_OK;
    1a6c:	19 82       	std	Y+1, r1	; 0x01
    1a6e:	12 c0       	rjmp	.+36     	; 0x1a94 <GPIO_pin_initialize+0x44>
		}
		else
		{
			ret = GPIO_pin_direction_initialize(gpio_obj);
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	9b 81       	ldd	r25, Y+3	; 0x03
    1a74:	0e 94 a3 0c 	call	0x1946	; 0x1946 <GPIO_pin_direction_initialize>
    1a78:	89 83       	std	Y+1, r24	; 0x01
			ret = GPIO_pin_write_logic(gpio_obj, gpio_obj->logic);
    1a7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a7e:	80 81       	ld	r24, Z
    1a80:	88 1f       	adc	r24, r24
    1a82:	88 27       	eor	r24, r24
    1a84:	88 1f       	adc	r24, r24
    1a86:	28 2f       	mov	r18, r24
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8c:	62 2f       	mov	r22, r18
    1a8e:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <GPIO_pin_write_logic>
    1a92:	89 83       	std	Y+1, r24	; 0x01
		}
		return ret;
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <GPIO_pin_read_direction>:
Std_ReturnType GPIO_pin_read_direction(const gpio_config_pin_t* gpio_obj, uint8* Direction_read)
{
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <GPIO_pin_read_direction+0x6>
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <GPIO_pin_read_direction+0x8>
    1aaa:	0f 92       	push	r0
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	9b 83       	std	Y+3, r25	; 0x03
    1ab2:	8a 83       	std	Y+2, r24	; 0x02
    1ab4:	7d 83       	std	Y+5, r23	; 0x05
    1ab6:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	11 f4       	brne	.+4      	; 0x1ac8 <GPIO_pin_read_direction+0x26>
	{
		ret = E_NOT_OK;
    1ac4:	19 82       	std	Y+1, r1	; 0x01
    1ac6:	25 c0       	rjmp	.+74     	; 0x1b12 <GPIO_pin_read_direction+0x70>
	}
	else
	{
		*Direction_read = READ_BIT(*DDR_registers[gpio_obj->port], gpio_obj->pin);
    1ac8:	ea 81       	ldd	r30, Y+2	; 0x02
    1aca:	fb 81       	ldd	r31, Y+3	; 0x03
    1acc:	80 81       	ld	r24, Z
    1ace:	87 70       	andi	r24, 0x07	; 7
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	fc 01       	movw	r30, r24
    1ada:	ec 5c       	subi	r30, 0xCC	; 204
    1adc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ade:	01 90       	ld	r0, Z+
    1ae0:	f0 81       	ld	r31, Z
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	ea 81       	ldd	r30, Y+2	; 0x02
    1aec:	fb 81       	ldd	r31, Y+3	; 0x03
    1aee:	80 81       	ld	r24, Z
    1af0:	86 95       	lsr	r24
    1af2:	86 95       	lsr	r24
    1af4:	86 95       	lsr	r24
    1af6:	87 70       	andi	r24, 0x07	; 7
    1af8:	88 2f       	mov	r24, r24
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	a9 01       	movw	r20, r18
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <GPIO_pin_read_direction+0x62>
    1b00:	55 95       	asr	r21
    1b02:	47 95       	ror	r20
    1b04:	8a 95       	dec	r24
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <GPIO_pin_read_direction+0x5e>
    1b08:	ca 01       	movw	r24, r20
    1b0a:	81 70       	andi	r24, 0x01	; 1
    1b0c:	ec 81       	ldd	r30, Y+4	; 0x04
    1b0e:	fd 81       	ldd	r31, Y+5	; 0x05
    1b10:	80 83       	st	Z, r24
	}
	return ret;
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <GPIO_pin_write_logic>:
Std_ReturnType GPIO_pin_write_logic(const gpio_config_pin_t* gpio_obj, uint8 logic)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	00 d0       	rcall	.+0      	; 0x1b2a <GPIO_pin_write_logic+0x6>
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <GPIO_pin_write_logic+0x8>
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	9b 83       	std	Y+3, r25	; 0x03
    1b32:	8a 83       	std	Y+2, r24	; 0x02
    1b34:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	11 f4       	brne	.+4      	; 0x1b46 <GPIO_pin_write_logic+0x22>
	{
		ret = E_NOT_OK;
    1b42:	19 82       	std	Y+1, r1	; 0x01
    1b44:	66 c0       	rjmp	.+204    	; 0x1c12 <GPIO_pin_write_logic+0xee>
	}
	else
	{
		if(logic == GPIO_HIGH)
    1b46:	8c 81       	ldd	r24, Y+4	; 0x04
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	81 f5       	brne	.+96     	; 0x1bac <GPIO_pin_write_logic+0x88>
		{
			SET_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    1b4c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b4e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b50:	80 81       	ld	r24, Z
    1b52:	87 70       	andi	r24, 0x07	; 7
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	e4 5c       	subi	r30, 0xC4	; 196
    1b60:	fd 4f       	sbci	r31, 0xFD	; 253
    1b62:	a0 81       	ld	r26, Z
    1b64:	b1 81       	ldd	r27, Z+1	; 0x01
    1b66:	ea 81       	ldd	r30, Y+2	; 0x02
    1b68:	fb 81       	ldd	r31, Y+3	; 0x03
    1b6a:	80 81       	ld	r24, Z
    1b6c:	87 70       	andi	r24, 0x07	; 7
    1b6e:	88 2f       	mov	r24, r24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	fc 01       	movw	r30, r24
    1b78:	e4 5c       	subi	r30, 0xC4	; 196
    1b7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b7c:	01 90       	ld	r0, Z+
    1b7e:	f0 81       	ld	r31, Z
    1b80:	e0 2d       	mov	r30, r0
    1b82:	40 81       	ld	r20, Z
    1b84:	ea 81       	ldd	r30, Y+2	; 0x02
    1b86:	fb 81       	ldd	r31, Y+3	; 0x03
    1b88:	80 81       	ld	r24, Z
    1b8a:	86 95       	lsr	r24
    1b8c:	86 95       	lsr	r24
    1b8e:	86 95       	lsr	r24
    1b90:	87 70       	andi	r24, 0x07	; 7
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	02 2e       	mov	r0, r18
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <GPIO_pin_write_logic+0x7e>
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	0a 94       	dec	r0
    1ba4:	e2 f7       	brpl	.-8      	; 0x1b9e <GPIO_pin_write_logic+0x7a>
    1ba6:	84 2b       	or	r24, r20
    1ba8:	8c 93       	st	X, r24
    1baa:	33 c0       	rjmp	.+102    	; 0x1c12 <GPIO_pin_write_logic+0xee>
		}
		else if(logic == GPIO_LOW)
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	88 23       	and	r24, r24
    1bb0:	81 f5       	brne	.+96     	; 0x1c12 <GPIO_pin_write_logic+0xee>
		{
			CLEAR_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    1bb2:	ea 81       	ldd	r30, Y+2	; 0x02
    1bb4:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb6:	80 81       	ld	r24, Z
    1bb8:	87 70       	andi	r24, 0x07	; 7
    1bba:	88 2f       	mov	r24, r24
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	e4 5c       	subi	r30, 0xC4	; 196
    1bc6:	fd 4f       	sbci	r31, 0xFD	; 253
    1bc8:	a0 81       	ld	r26, Z
    1bca:	b1 81       	ldd	r27, Z+1	; 0x01
    1bcc:	ea 81       	ldd	r30, Y+2	; 0x02
    1bce:	fb 81       	ldd	r31, Y+3	; 0x03
    1bd0:	80 81       	ld	r24, Z
    1bd2:	87 70       	andi	r24, 0x07	; 7
    1bd4:	88 2f       	mov	r24, r24
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	fc 01       	movw	r30, r24
    1bde:	e4 5c       	subi	r30, 0xC4	; 196
    1be0:	fd 4f       	sbci	r31, 0xFD	; 253
    1be2:	01 90       	ld	r0, Z+
    1be4:	f0 81       	ld	r31, Z
    1be6:	e0 2d       	mov	r30, r0
    1be8:	40 81       	ld	r20, Z
    1bea:	ea 81       	ldd	r30, Y+2	; 0x02
    1bec:	fb 81       	ldd	r31, Y+3	; 0x03
    1bee:	80 81       	ld	r24, Z
    1bf0:	86 95       	lsr	r24
    1bf2:	86 95       	lsr	r24
    1bf4:	86 95       	lsr	r24
    1bf6:	87 70       	andi	r24, 0x07	; 7
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <GPIO_pin_write_logic+0xe4>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <GPIO_pin_write_logic+0xe0>
    1c0c:	80 95       	com	r24
    1c0e:	84 23       	and	r24, r20
    1c10:	8c 93       	st	X, r24
		}
	}
	return ret;
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <GPIO_pin_read_logic>:
Std_ReturnType GPIO_pin_read_logic(const gpio_config_pin_t* gpio_obj, uint8* logic_res)
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <GPIO_pin_read_logic+0x6>
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <GPIO_pin_read_logic+0x8>
    1c2a:	0f 92       	push	r0
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	9b 83       	std	Y+3, r25	; 0x03
    1c32:	8a 83       	std	Y+2, r24	; 0x02
    1c34:	7d 83       	std	Y+5, r23	; 0x05
    1c36:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <GPIO_pin_read_logic+0x26>
	{
		ret = E_NOT_OK;
    1c44:	19 82       	std	Y+1, r1	; 0x01
    1c46:	25 c0       	rjmp	.+74     	; 0x1c92 <GPIO_pin_read_logic+0x70>
	}
	else
	{
		*logic_res = READ_BIT(*PIN_registers[gpio_obj->port], gpio_obj->pin);
    1c48:	ea 81       	ldd	r30, Y+2	; 0x02
    1c4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c4c:	80 81       	ld	r24, Z
    1c4e:	87 70       	andi	r24, 0x07	; 7
    1c50:	88 2f       	mov	r24, r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	fc 01       	movw	r30, r24
    1c5a:	ec 5b       	subi	r30, 0xBC	; 188
    1c5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c5e:	01 90       	ld	r0, Z+
    1c60:	f0 81       	ld	r31, Z
    1c62:	e0 2d       	mov	r30, r0
    1c64:	80 81       	ld	r24, Z
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c6c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c6e:	80 81       	ld	r24, Z
    1c70:	86 95       	lsr	r24
    1c72:	86 95       	lsr	r24
    1c74:	86 95       	lsr	r24
    1c76:	87 70       	andi	r24, 0x07	; 7
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a9 01       	movw	r20, r18
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <GPIO_pin_read_logic+0x62>
    1c80:	55 95       	asr	r21
    1c82:	47 95       	ror	r20
    1c84:	8a 95       	dec	r24
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <GPIO_pin_read_logic+0x5e>
    1c88:	ca 01       	movw	r24, r20
    1c8a:	81 70       	andi	r24, 0x01	; 1
    1c8c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c8e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c90:	80 83       	st	Z, r24
	}
	return ret;
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <GPIO_pin_toggle_logic>:
Std_ReturnType GPIO_pin_toggle_logic(const gpio_config_pin_t* gpio_obj)
{
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <GPIO_pin_toggle_logic+0x6>
    1caa:	0f 92       	push	r0
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	9b 83       	std	Y+3, r25	; 0x03
    1cb2:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	9b 81       	ldd	r25, Y+3	; 0x03
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	11 f4       	brne	.+4      	; 0x1cc4 <GPIO_pin_toggle_logic+0x20>
	{
		ret = E_NOT_OK;
    1cc0:	19 82       	std	Y+1, r1	; 0x01
    1cc2:	2f c0       	rjmp	.+94     	; 0x1d22 <GPIO_pin_toggle_logic+0x7e>
	}
	else
	{
		TOGGLE_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    1cc4:	ea 81       	ldd	r30, Y+2	; 0x02
    1cc6:	fb 81       	ldd	r31, Y+3	; 0x03
    1cc8:	80 81       	ld	r24, Z
    1cca:	87 70       	andi	r24, 0x07	; 7
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	e4 5c       	subi	r30, 0xC4	; 196
    1cd8:	fd 4f       	sbci	r31, 0xFD	; 253
    1cda:	a0 81       	ld	r26, Z
    1cdc:	b1 81       	ldd	r27, Z+1	; 0x01
    1cde:	ea 81       	ldd	r30, Y+2	; 0x02
    1ce0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce2:	80 81       	ld	r24, Z
    1ce4:	87 70       	andi	r24, 0x07	; 7
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	fc 01       	movw	r30, r24
    1cf0:	e4 5c       	subi	r30, 0xC4	; 196
    1cf2:	fd 4f       	sbci	r31, 0xFD	; 253
    1cf4:	01 90       	ld	r0, Z+
    1cf6:	f0 81       	ld	r31, Z
    1cf8:	e0 2d       	mov	r30, r0
    1cfa:	40 81       	ld	r20, Z
    1cfc:	ea 81       	ldd	r30, Y+2	; 0x02
    1cfe:	fb 81       	ldd	r31, Y+3	; 0x03
    1d00:	80 81       	ld	r24, Z
    1d02:	86 95       	lsr	r24
    1d04:	86 95       	lsr	r24
    1d06:	86 95       	lsr	r24
    1d08:	87 70       	andi	r24, 0x07	; 7
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <GPIO_pin_toggle_logic+0x76>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <GPIO_pin_toggle_logic+0x72>
    1d1e:	84 27       	eor	r24, r20
    1d20:	8c 93       	st	X, r24
	}
	return ret;
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <GPIO_pin_PullUp_Enable>:
Std_ReturnType GPIO_pin_PullUp_Enable(const gpio_config_pin_t* gpio_obj)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <GPIO_pin_PullUp_Enable+0x6>
    1d36:	0f 92       	push	r0
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	9b 83       	std	Y+3, r25	; 0x03
    1d3e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	9b 81       	ldd	r25, Y+3	; 0x03
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	11 f4       	brne	.+4      	; 0x1d50 <GPIO_pin_PullUp_Enable+0x20>
	{
		ret = E_NOT_OK;
    1d4c:	19 82       	std	Y+1, r1	; 0x01
    1d4e:	65 c0       	rjmp	.+202    	; 0x1e1a <GPIO_pin_PullUp_Enable+0xea>
	}
	else
	{
		CLEAR_BIT(*(DDR_registers[gpio_obj->port]), gpio_obj->pin);
    1d50:	ea 81       	ldd	r30, Y+2	; 0x02
    1d52:	fb 81       	ldd	r31, Y+3	; 0x03
    1d54:	80 81       	ld	r24, Z
    1d56:	87 70       	andi	r24, 0x07	; 7
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	fc 01       	movw	r30, r24
    1d62:	ec 5c       	subi	r30, 0xCC	; 204
    1d64:	fd 4f       	sbci	r31, 0xFD	; 253
    1d66:	a0 81       	ld	r26, Z
    1d68:	b1 81       	ldd	r27, Z+1	; 0x01
    1d6a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d6c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d6e:	80 81       	ld	r24, Z
    1d70:	87 70       	andi	r24, 0x07	; 7
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	ec 5c       	subi	r30, 0xCC	; 204
    1d7e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d80:	01 90       	ld	r0, Z+
    1d82:	f0 81       	ld	r31, Z
    1d84:	e0 2d       	mov	r30, r0
    1d86:	40 81       	ld	r20, Z
    1d88:	ea 81       	ldd	r30, Y+2	; 0x02
    1d8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d8c:	80 81       	ld	r24, Z
    1d8e:	86 95       	lsr	r24
    1d90:	86 95       	lsr	r24
    1d92:	86 95       	lsr	r24
    1d94:	87 70       	andi	r24, 0x07	; 7
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <GPIO_pin_PullUp_Enable+0x74>
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	2a 95       	dec	r18
    1da6:	e2 f7       	brpl	.-8      	; 0x1da0 <GPIO_pin_PullUp_Enable+0x70>
    1da8:	80 95       	com	r24
    1daa:	84 23       	and	r24, r20
    1dac:	8c 93       	st	X, r24
		SET_BIT(*(PORT_registers[gpio_obj->port]), gpio_obj->pin);
    1dae:	ea 81       	ldd	r30, Y+2	; 0x02
    1db0:	fb 81       	ldd	r31, Y+3	; 0x03
    1db2:	80 81       	ld	r24, Z
    1db4:	87 70       	andi	r24, 0x07	; 7
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	e4 5c       	subi	r30, 0xC4	; 196
    1dc2:	fd 4f       	sbci	r31, 0xFD	; 253
    1dc4:	a0 81       	ld	r26, Z
    1dc6:	b1 81       	ldd	r27, Z+1	; 0x01
    1dc8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dca:	fb 81       	ldd	r31, Y+3	; 0x03
    1dcc:	80 81       	ld	r24, Z
    1dce:	87 70       	andi	r24, 0x07	; 7
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	fc 01       	movw	r30, r24
    1dda:	e4 5c       	subi	r30, 0xC4	; 196
    1ddc:	fd 4f       	sbci	r31, 0xFD	; 253
    1dde:	01 90       	ld	r0, Z+
    1de0:	f0 81       	ld	r31, Z
    1de2:	e0 2d       	mov	r30, r0
    1de4:	40 81       	ld	r20, Z
    1de6:	ea 81       	ldd	r30, Y+2	; 0x02
    1de8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dea:	80 81       	ld	r24, Z
    1dec:	86 95       	lsr	r24
    1dee:	86 95       	lsr	r24
    1df0:	86 95       	lsr	r24
    1df2:	87 70       	andi	r24, 0x07	; 7
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	02 2e       	mov	r0, r18
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <GPIO_pin_PullUp_Enable+0xd4>
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	0a 94       	dec	r0
    1e06:	e2 f7       	brpl	.-8      	; 0x1e00 <GPIO_pin_PullUp_Enable+0xd0>
    1e08:	84 2b       	or	r24, r20
    1e0a:	8c 93       	st	X, r24
		CLEAR_BIT(SFIOR, PUD);
    1e0c:	a0 e5       	ldi	r26, 0x50	; 80
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e0 e5       	ldi	r30, 0x50	; 80
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	8b 7f       	andi	r24, 0xFB	; 251
    1e18:	8c 93       	st	X, r24
	}
	return ret;
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <GPIO_pin_PullUp_Disable>:
Std_ReturnType GPIO_pin_PullUp_Disable(const gpio_config_pin_t* gpio_obj)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <GPIO_pin_PullUp_Disable+0x6>
    1e2e:	0f 92       	push	r0
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	9b 83       	std	Y+3, r25	; 0x03
    1e36:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	11 f4       	brne	.+4      	; 0x1e48 <GPIO_pin_PullUp_Disable+0x20>
	{
		ret = E_NOT_OK;
    1e44:	19 82       	std	Y+1, r1	; 0x01
    1e46:	30 c0       	rjmp	.+96     	; 0x1ea8 <GPIO_pin_PullUp_Disable+0x80>
	}
	else
	{
		CLEAR_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    1e48:	ea 81       	ldd	r30, Y+2	; 0x02
    1e4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e4c:	80 81       	ld	r24, Z
    1e4e:	87 70       	andi	r24, 0x07	; 7
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	fc 01       	movw	r30, r24
    1e5a:	e4 5c       	subi	r30, 0xC4	; 196
    1e5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e5e:	a0 81       	ld	r26, Z
    1e60:	b1 81       	ldd	r27, Z+1	; 0x01
    1e62:	ea 81       	ldd	r30, Y+2	; 0x02
    1e64:	fb 81       	ldd	r31, Y+3	; 0x03
    1e66:	80 81       	ld	r24, Z
    1e68:	87 70       	andi	r24, 0x07	; 7
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	fc 01       	movw	r30, r24
    1e74:	e4 5c       	subi	r30, 0xC4	; 196
    1e76:	fd 4f       	sbci	r31, 0xFD	; 253
    1e78:	01 90       	ld	r0, Z+
    1e7a:	f0 81       	ld	r31, Z
    1e7c:	e0 2d       	mov	r30, r0
    1e7e:	40 81       	ld	r20, Z
    1e80:	ea 81       	ldd	r30, Y+2	; 0x02
    1e82:	fb 81       	ldd	r31, Y+3	; 0x03
    1e84:	80 81       	ld	r24, Z
    1e86:	86 95       	lsr	r24
    1e88:	86 95       	lsr	r24
    1e8a:	86 95       	lsr	r24
    1e8c:	87 70       	andi	r24, 0x07	; 7
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <GPIO_pin_PullUp_Disable+0x76>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <GPIO_pin_PullUp_Disable+0x72>
    1ea2:	80 95       	com	r24
    1ea4:	84 23       	and	r24, r20
    1ea6:	8c 93       	st	X, r24
	}
	return ret;
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <GPIO_port_direction_initialize>:

Std_ReturnType GPIO_port_direction_initialize(gpio_port_t _port, uint8 port_direction)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <GPIO_port_direction_initialize+0x6>
    1ebc:	0f 92       	push	r0
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	8a 83       	std	Y+2, r24	; 0x02
    1ec4:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	84 30       	cpi	r24, 0x04	; 4
    1ece:	10 f0       	brcs	.+4      	; 0x1ed4 <GPIO_port_direction_initialize+0x1e>
	{
		ret = E_NOT_OK;
    1ed0:	19 82       	std	Y+1, r1	; 0x01
    1ed2:	0d c0       	rjmp	.+26     	; 0x1eee <GPIO_port_direction_initialize+0x38>
	}
	else
	{
		*DDR_registers[_port] = port_direction;
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	fc 01       	movw	r30, r24
    1ee0:	ec 5c       	subi	r30, 0xCC	; 204
    1ee2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ee4:	01 90       	ld	r0, Z+
    1ee6:	f0 81       	ld	r31, Z
    1ee8:	e0 2d       	mov	r30, r0
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	80 83       	st	Z, r24
	}
	return ret;
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <GPIO_port_initialize>:
Std_ReturnType GPIO_port_initialize(gpio_port_t _port, uint8 port_direction, uint8 port_logic)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <GPIO_port_initialize+0x6>
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <GPIO_port_initialize+0x8>
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	8a 83       	std	Y+2, r24	; 0x02
    1f0a:	6b 83       	std	Y+3, r22	; 0x03
    1f0c:	4c 83       	std	Y+4, r20	; 0x04
	Std_ReturnType ret = E_OK;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	84 30       	cpi	r24, 0x04	; 4
    1f16:	10 f0       	brcs	.+4      	; 0x1f1c <GPIO_port_initialize+0x20>
	{
		ret = E_NOT_OK;
    1f18:	19 82       	std	Y+1, r1	; 0x01
    1f1a:	1a c0       	rjmp	.+52     	; 0x1f50 <GPIO_port_initialize+0x54>
	}
	else
	{
		*DDR_registers[_port] = port_direction;
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	88 2f       	mov	r24, r24
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	fc 01       	movw	r30, r24
    1f28:	ec 5c       	subi	r30, 0xCC	; 204
    1f2a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f2c:	01 90       	ld	r0, Z+
    1f2e:	f0 81       	ld	r31, Z
    1f30:	e0 2d       	mov	r30, r0
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	80 83       	st	Z, r24
		*PORT_registers[_port] = port_logic;
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	88 2f       	mov	r24, r24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	fc 01       	movw	r30, r24
    1f42:	e4 5c       	subi	r30, 0xC4	; 196
    1f44:	fd 4f       	sbci	r31, 0xFD	; 253
    1f46:	01 90       	ld	r0, Z+
    1f48:	f0 81       	ld	r31, Z
    1f4a:	e0 2d       	mov	r30, r0
    1f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4e:	80 83       	st	Z, r24
	}
		return ret;
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <GPIO_port_read_direction>:
Std_ReturnType GPIO_port_read_direction(gpio_port_t _port, uint8* port_direction)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <GPIO_port_read_direction+0x6>
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <GPIO_port_read_direction+0x8>
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	8a 83       	std	Y+2, r24	; 0x02
    1f6e:	7c 83       	std	Y+4, r23	; 0x04
    1f70:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	84 30       	cpi	r24, 0x04	; 4
    1f7a:	10 f0       	brcs	.+4      	; 0x1f80 <GPIO_port_read_direction+0x20>
	{
		ret = E_NOT_OK;
    1f7c:	19 82       	std	Y+1, r1	; 0x01
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <GPIO_port_read_direction+0x3e>
	}
	else
	{
		*port_direction = *DDR_registers[_port];
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	88 2f       	mov	r24, r24
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	ec 5c       	subi	r30, 0xCC	; 204
    1f8e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f90:	01 90       	ld	r0, Z+
    1f92:	f0 81       	ld	r31, Z
    1f94:	e0 2d       	mov	r30, r0
    1f96:	80 81       	ld	r24, Z
    1f98:	eb 81       	ldd	r30, Y+3	; 0x03
    1f9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f9c:	80 83       	st	Z, r24
	}
	return ret;
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <GPIO_port_write_logic>:
Std_ReturnType GPIO_port_write_logic(gpio_port_t _port, uint8 port_logic)
{
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <GPIO_port_write_logic+0x6>
    1fb4:	0f 92       	push	r0
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	8a 83       	std	Y+2, r24	; 0x02
    1fbc:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	84 30       	cpi	r24, 0x04	; 4
    1fc6:	10 f0       	brcs	.+4      	; 0x1fcc <GPIO_port_write_logic+0x1e>
	{
		ret = E_NOT_OK;
    1fc8:	19 82       	std	Y+1, r1	; 0x01
    1fca:	0d c0       	rjmp	.+26     	; 0x1fe6 <GPIO_port_write_logic+0x38>
	}
	else
	{
		*PORT_registers[_port] = port_logic;
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	88 2f       	mov	r24, r24
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	e4 5c       	subi	r30, 0xC4	; 196
    1fda:	fd 4f       	sbci	r31, 0xFD	; 253
    1fdc:	01 90       	ld	r0, Z+
    1fde:	f0 81       	ld	r31, Z
    1fe0:	e0 2d       	mov	r30, r0
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	80 83       	st	Z, r24
	}
	return ret;
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <GPIO_port_read_logic>:
Std_ReturnType GPIO_port_read_logic(gpio_port_t _port, uint8* port_logic)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <GPIO_port_read_logic+0x6>
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <GPIO_port_read_logic+0x8>
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	8a 83       	std	Y+2, r24	; 0x02
    2002:	7c 83       	std	Y+4, r23	; 0x04
    2004:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	84 30       	cpi	r24, 0x04	; 4
    200e:	10 f0       	brcs	.+4      	; 0x2014 <GPIO_port_read_logic+0x20>
	{
		ret = E_NOT_OK;
    2010:	19 82       	std	Y+1, r1	; 0x01
    2012:	0f c0       	rjmp	.+30     	; 0x2032 <GPIO_port_read_logic+0x3e>
	}
	else
	{
		*port_logic = *PIN_registers[_port];
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	88 2f       	mov	r24, r24
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	fc 01       	movw	r30, r24
    2020:	ec 5b       	subi	r30, 0xBC	; 188
    2022:	fd 4f       	sbci	r31, 0xFD	; 253
    2024:	01 90       	ld	r0, Z+
    2026:	f0 81       	ld	r31, Z
    2028:	e0 2d       	mov	r30, r0
    202a:	80 81       	ld	r24, Z
    202c:	eb 81       	ldd	r30, Y+3	; 0x03
    202e:	fc 81       	ldd	r31, Y+4	; 0x04
    2030:	80 83       	st	Z, r24
	}
	return ret;
    2032:	89 81       	ldd	r24, Y+1	; 0x01
}
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <GPIO_port_toggle>:
Std_ReturnType GPIO_port_toggle(gpio_port_t _port)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	00 d0       	rcall	.+0      	; 0x2048 <GPIO_port_toggle+0x6>
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	84 30       	cpi	r24, 0x04	; 4
    2056:	10 f0       	brcs	.+4      	; 0x205c <GPIO_port_toggle+0x1a>
	{
		ret = E_NOT_OK;
    2058:	19 82       	std	Y+1, r1	; 0x01
    205a:	18 c0       	rjmp	.+48     	; 0x208c <GPIO_port_toggle+0x4a>
	}
	else
	{
		*PORT_registers[_port] = *PORT_registers[_port] ^ 0xFF;
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	88 2f       	mov	r24, r24
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	fc 01       	movw	r30, r24
    2068:	e4 5c       	subi	r30, 0xC4	; 196
    206a:	fd 4f       	sbci	r31, 0xFD	; 253
    206c:	a0 81       	ld	r26, Z
    206e:	b1 81       	ldd	r27, Z+1	; 0x01
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	fc 01       	movw	r30, r24
    207c:	e4 5c       	subi	r30, 0xC4	; 196
    207e:	fd 4f       	sbci	r31, 0xFD	; 253
    2080:	01 90       	ld	r0, Z+
    2082:	f0 81       	ld	r31, Z
    2084:	e0 2d       	mov	r30, r0
    2086:	80 81       	ld	r24, Z
    2088:	80 95       	com	r24
    208a:	8c 93       	st	X, r24
	}
	return ret;
    208c:	89 81       	ldd	r24, Y+1	; 0x01
}
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <GPIO_port_PullUp_Enable>:
Std_ReturnType GPIO_port_PullUp_Enable(gpio_port_t _port)
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	00 d0       	rcall	.+0      	; 0x209e <GPIO_port_PullUp_Enable+0x6>
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <GPIO_port_PullUp_Enable+0x8>
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	84 30       	cpi	r24, 0x04	; 4
    20ae:	10 f0       	brcs	.+4      	; 0x20b4 <GPIO_port_PullUp_Enable+0x1c>
	{
		ret = E_NOT_OK;
    20b0:	19 82       	std	Y+1, r1	; 0x01
    20b2:	38 c0       	rjmp	.+112    	; 0x2124 <GPIO_port_PullUp_Enable+0x8c>
	}
	else
	{
		*DDR_registers[_port] = *DDR_registers[_port] & 0x00;
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	fc 01       	movw	r30, r24
    20c0:	ec 5c       	subi	r30, 0xCC	; 204
    20c2:	fd 4f       	sbci	r31, 0xFD	; 253
    20c4:	01 90       	ld	r0, Z+
    20c6:	f0 81       	ld	r31, Z
    20c8:	e0 2d       	mov	r30, r0
    20ca:	80 81       	ld	r24, Z
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	88 2f       	mov	r24, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	fc 01       	movw	r30, r24
    20d8:	ec 5c       	subi	r30, 0xCC	; 204
    20da:	fd 4f       	sbci	r31, 0xFD	; 253
    20dc:	01 90       	ld	r0, Z+
    20de:	f0 81       	ld	r31, Z
    20e0:	e0 2d       	mov	r30, r0
    20e2:	10 82       	st	Z, r1
		*PORT_registers[_port] = *PORT_registers[_port] | 0xFF;
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	88 2f       	mov	r24, r24
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	88 0f       	add	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	fc 01       	movw	r30, r24
    20f0:	e4 5c       	subi	r30, 0xC4	; 196
    20f2:	fd 4f       	sbci	r31, 0xFD	; 253
    20f4:	01 90       	ld	r0, Z+
    20f6:	f0 81       	ld	r31, Z
    20f8:	e0 2d       	mov	r30, r0
    20fa:	80 81       	ld	r24, Z
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	88 0f       	add	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	fc 01       	movw	r30, r24
    2108:	e4 5c       	subi	r30, 0xC4	; 196
    210a:	fd 4f       	sbci	r31, 0xFD	; 253
    210c:	01 90       	ld	r0, Z+
    210e:	f0 81       	ld	r31, Z
    2110:	e0 2d       	mov	r30, r0
    2112:	8f ef       	ldi	r24, 0xFF	; 255
    2114:	80 83       	st	Z, r24
		CLEAR_BIT(SFIOR, PUD);
    2116:	a0 e5       	ldi	r26, 0x50	; 80
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e0 e5       	ldi	r30, 0x50	; 80
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	8b 7f       	andi	r24, 0xFB	; 251
    2122:	8c 93       	st	X, r24
	}
	return ret;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <GPIO_port_PullUp_Disable>:
Std_ReturnType GPIO_port_PullUp_Disable(gpio_port_t _port)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <GPIO_port_PullUp_Disable+0x6>
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	84 30       	cpi	r24, 0x04	; 4
    2148:	10 f0       	brcs	.+4      	; 0x214e <GPIO_port_PullUp_Disable+0x1a>
	{
		ret = E_NOT_OK;
    214a:	19 82       	std	Y+1, r1	; 0x01
    214c:	0c c0       	rjmp	.+24     	; 0x2166 <GPIO_port_PullUp_Disable+0x32>
	}
	else
	{
		*PORT_registers[_port] = 0x00;
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	88 2f       	mov	r24, r24
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	88 0f       	add	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	fc 01       	movw	r30, r24
    215a:	e4 5c       	subi	r30, 0xC4	; 196
    215c:	fd 4f       	sbci	r31, 0xFD	; 253
    215e:	01 90       	ld	r0, Z+
    2160:	f0 81       	ld	r31, Z
    2162:	e0 2d       	mov	r30, r0
    2164:	10 82       	st	Z, r1
	}
	return ret;
    2166:	89 81       	ldd	r24, Y+1	; 0x01
}
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <MCAL_init>:
		.usart_parity=USART_PARITY_DISABLE,
		.usart_character_size=8,
};

Std_ReturnType MCAL_init(void)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
	ret = USART_Init(&g_uartObj1);
    217a:	8c e4       	ldi	r24, 0x4C	; 76
    217c:	92 e0       	ldi	r25, 0x02	; 2
    217e:	0e 94 17 07 	call	0xe2e	; 0xe2e <USART_Init>
    2182:	80 93 57 02 	sts	0x0257, r24
	return ret;
    2186:	80 91 57 02 	lds	r24, 0x0257
}
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <lcd_4bit_initialize>:
static void* my_memset(void* str, uint8 ch, uint8 str_size);

/* ---------------------- Function Definitions ----------------------*/
#if (LCD_MODE == CHAR_LCD_4BIT_MODE)
Std_ReturnType lcd_4bit_initialize(const char_lcd_t* lcd_obj)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	e8 97       	sbiw	r28, 0x38	; 56
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	98 af       	std	Y+56, r25	; 0x38
    21a6:	8f ab       	std	Y+55, r24	; 0x37
   Std_ReturnType ret = E_NOT_OK;
    21a8:	1e aa       	std	Y+54, r1	; 0x36
    uint8 l_pin_counter = ZERO_INIT;
    21aa:	1d aa       	std	Y+53, r1	; 0x35
    if(NULL == lcd_obj)
    21ac:	8f a9       	ldd	r24, Y+55	; 0x37
    21ae:	98 ad       	ldd	r25, Y+56	; 0x38
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	11 f4       	brne	.+4      	; 0x21b8 <lcd_4bit_initialize+0x28>
    {
        ret = E_NOT_OK;
    21b4:	1e aa       	std	Y+54, r1	; 0x36
    21b6:	04 c2       	rjmp	.+1032   	; 0x25c0 <lcd_4bit_initialize+0x430>
    }
    else
    {
        ret = GPIO_pin_initialize(&(lcd_obj->RS_pin));
    21b8:	8f a9       	ldd	r24, Y+55	; 0x37
    21ba:	98 ad       	ldd	r25, Y+56	; 0x38
    21bc:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <GPIO_pin_initialize>
    21c0:	8e ab       	std	Y+54, r24	; 0x36
        ret = GPIO_pin_initialize(&(lcd_obj->E_pin));
    21c2:	8f a9       	ldd	r24, Y+55	; 0x37
    21c4:	98 ad       	ldd	r25, Y+56	; 0x38
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <GPIO_pin_initialize>
    21cc:	8e ab       	std	Y+54, r24	; 0x36
        for(l_pin_counter=0; l_pin_counter < 4; l_pin_counter++)
    21ce:	1d aa       	std	Y+53, r1	; 0x35
    21d0:	10 c0       	rjmp	.+32     	; 0x21f2 <lcd_4bit_initialize+0x62>
        {
            ret = GPIO_pin_initialize(&(lcd_obj->lcd_data_pins[l_pin_counter]));
    21d2:	8f a9       	ldd	r24, Y+55	; 0x37
    21d4:	98 ad       	ldd	r25, Y+56	; 0x38
    21d6:	9c 01       	movw	r18, r24
    21d8:	2e 5f       	subi	r18, 0xFE	; 254
    21da:	3f 4f       	sbci	r19, 0xFF	; 255
    21dc:	8d a9       	ldd	r24, Y+53	; 0x35
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	82 0f       	add	r24, r18
    21e4:	93 1f       	adc	r25, r19
    21e6:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <GPIO_pin_initialize>
    21ea:	8e ab       	std	Y+54, r24	; 0x36
    }
    else
    {
        ret = GPIO_pin_initialize(&(lcd_obj->RS_pin));
        ret = GPIO_pin_initialize(&(lcd_obj->E_pin));
        for(l_pin_counter=0; l_pin_counter < 4; l_pin_counter++)
    21ec:	8d a9       	ldd	r24, Y+53	; 0x35
    21ee:	8f 5f       	subi	r24, 0xFF	; 255
    21f0:	8d ab       	std	Y+53, r24	; 0x35
    21f2:	8d a9       	ldd	r24, Y+53	; 0x35
    21f4:	84 30       	cpi	r24, 0x04	; 4
    21f6:	68 f3       	brcs	.-38     	; 0x21d2 <lcd_4bit_initialize+0x42>
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	a0 ea       	ldi	r26, 0xA0	; 160
    21fe:	b1 e4       	ldi	r27, 0x41	; 65
    2200:	89 ab       	std	Y+49, r24	; 0x31
    2202:	9a ab       	std	Y+50, r25	; 0x32
    2204:	ab ab       	std	Y+51, r26	; 0x33
    2206:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2208:	69 a9       	ldd	r22, Y+49	; 0x31
    220a:	7a a9       	ldd	r23, Y+50	; 0x32
    220c:	8b a9       	ldd	r24, Y+51	; 0x33
    220e:	9c a9       	ldd	r25, Y+52	; 0x34
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	4a ef       	ldi	r20, 0xFA	; 250
    2216:	54 e4       	ldi	r21, 0x44	; 68
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	8d a7       	std	Y+45, r24	; 0x2d
    2222:	9e a7       	std	Y+46, r25	; 0x2e
    2224:	af a7       	std	Y+47, r26	; 0x2f
    2226:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2228:	6d a5       	ldd	r22, Y+45	; 0x2d
    222a:	7e a5       	ldd	r23, Y+46	; 0x2e
    222c:	8f a5       	ldd	r24, Y+47	; 0x2f
    222e:	98 a9       	ldd	r25, Y+48	; 0x30
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e8       	ldi	r20, 0x80	; 128
    2236:	5f e3       	ldi	r21, 0x3F	; 63
    2238:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    223c:	88 23       	and	r24, r24
    223e:	2c f4       	brge	.+10     	; 0x224a <lcd_4bit_initialize+0xba>
		__ticks = 1;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9c a7       	std	Y+44, r25	; 0x2c
    2246:	8b a7       	std	Y+43, r24	; 0x2b
    2248:	3f c0       	rjmp	.+126    	; 0x22c8 <lcd_4bit_initialize+0x138>
	else if (__tmp > 65535)
    224a:	6d a5       	ldd	r22, Y+45	; 0x2d
    224c:	7e a5       	ldd	r23, Y+46	; 0x2e
    224e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2250:	98 a9       	ldd	r25, Y+48	; 0x30
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	3f ef       	ldi	r19, 0xFF	; 255
    2256:	4f e7       	ldi	r20, 0x7F	; 127
    2258:	57 e4       	ldi	r21, 0x47	; 71
    225a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    225e:	18 16       	cp	r1, r24
    2260:	4c f5       	brge	.+82     	; 0x22b4 <lcd_4bit_initialize+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2262:	69 a9       	ldd	r22, Y+49	; 0x31
    2264:	7a a9       	ldd	r23, Y+50	; 0x32
    2266:	8b a9       	ldd	r24, Y+51	; 0x33
    2268:	9c a9       	ldd	r25, Y+52	; 0x34
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e2       	ldi	r20, 0x20	; 32
    2270:	51 e4       	ldi	r21, 0x41	; 65
    2272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	bc 01       	movw	r22, r24
    227c:	cd 01       	movw	r24, r26
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	9c a7       	std	Y+44, r25	; 0x2c
    2288:	8b a7       	std	Y+43, r24	; 0x2b
    228a:	0f c0       	rjmp	.+30     	; 0x22aa <lcd_4bit_initialize+0x11a>
    228c:	88 ec       	ldi	r24, 0xC8	; 200
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	9a a7       	std	Y+42, r25	; 0x2a
    2292:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2294:	89 a5       	ldd	r24, Y+41	; 0x29
    2296:	9a a5       	ldd	r25, Y+42	; 0x2a
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <lcd_4bit_initialize+0x108>
    229c:	9a a7       	std	Y+42, r25	; 0x2a
    229e:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	9c a7       	std	Y+44, r25	; 0x2c
    22a8:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	69 f7       	brne	.-38     	; 0x228c <lcd_4bit_initialize+0xfc>
    22b2:	14 c0       	rjmp	.+40     	; 0x22dc <lcd_4bit_initialize+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b4:	6d a5       	ldd	r22, Y+45	; 0x2d
    22b6:	7e a5       	ldd	r23, Y+46	; 0x2e
    22b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ba:	98 a9       	ldd	r25, Y+48	; 0x30
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9c a7       	std	Y+44, r25	; 0x2c
    22c6:	8b a7       	std	Y+43, r24	; 0x2b
    22c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    22cc:	98 a7       	std	Y+40, r25	; 0x28
    22ce:	8f a3       	std	Y+39, r24	; 0x27
    22d0:	8f a1       	ldd	r24, Y+39	; 0x27
    22d2:	98 a5       	ldd	r25, Y+40	; 0x28
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <lcd_4bit_initialize+0x144>
    22d8:	98 a7       	std	Y+40, r25	; 0x28
    22da:	8f a3       	std	Y+39, r24	; 0x27
        {
            ret = GPIO_pin_initialize(&(lcd_obj->lcd_data_pins[l_pin_counter]));
        }
        _delay_ms(20);
        ret = lcd_4bit_send_command(lcd_obj, _LCD_8BIT_MODE_2LINES_COMMAND);
    22dc:	8f a9       	ldd	r24, Y+55	; 0x37
    22de:	98 ad       	ldd	r25, Y+56	; 0x38
    22e0:	68 e3       	ldi	r22, 0x38	; 56
    22e2:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    22e6:	8e ab       	std	Y+54, r24	; 0x36
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	a0 ea       	ldi	r26, 0xA0	; 160
    22ee:	b0 e4       	ldi	r27, 0x40	; 64
    22f0:	8b a3       	std	Y+35, r24	; 0x23
    22f2:	9c a3       	std	Y+36, r25	; 0x24
    22f4:	ad a3       	std	Y+37, r26	; 0x25
    22f6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f8:	6b a1       	ldd	r22, Y+35	; 0x23
    22fa:	7c a1       	ldd	r23, Y+36	; 0x24
    22fc:	8d a1       	ldd	r24, Y+37	; 0x25
    22fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a ef       	ldi	r20, 0xFA	; 250
    2306:	54 e4       	ldi	r21, 0x44	; 68
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8f 8f       	std	Y+31, r24	; 0x1f
    2312:	98 a3       	std	Y+32, r25	; 0x20
    2314:	a9 a3       	std	Y+33, r26	; 0x21
    2316:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2318:	6f 8d       	ldd	r22, Y+31	; 0x1f
    231a:	78 a1       	ldd	r23, Y+32	; 0x20
    231c:	89 a1       	ldd	r24, Y+33	; 0x21
    231e:	9a a1       	ldd	r25, Y+34	; 0x22
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5f e3       	ldi	r21, 0x3F	; 63
    2328:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    232c:	88 23       	and	r24, r24
    232e:	2c f4       	brge	.+10     	; 0x233a <lcd_4bit_initialize+0x1aa>
		__ticks = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9e 8f       	std	Y+30, r25	; 0x1e
    2336:	8d 8f       	std	Y+29, r24	; 0x1d
    2338:	3f c0       	rjmp	.+126    	; 0x23b8 <lcd_4bit_initialize+0x228>
	else if (__tmp > 65535)
    233a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    233c:	78 a1       	ldd	r23, Y+32	; 0x20
    233e:	89 a1       	ldd	r24, Y+33	; 0x21
    2340:	9a a1       	ldd	r25, Y+34	; 0x22
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	3f ef       	ldi	r19, 0xFF	; 255
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	57 e4       	ldi	r21, 0x47	; 71
    234a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    234e:	18 16       	cp	r1, r24
    2350:	4c f5       	brge	.+82     	; 0x23a4 <lcd_4bit_initialize+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2352:	6b a1       	ldd	r22, Y+35	; 0x23
    2354:	7c a1       	ldd	r23, Y+36	; 0x24
    2356:	8d a1       	ldd	r24, Y+37	; 0x25
    2358:	9e a1       	ldd	r25, Y+38	; 0x26
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e2       	ldi	r20, 0x20	; 32
    2360:	51 e4       	ldi	r21, 0x41	; 65
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9e 8f       	std	Y+30, r25	; 0x1e
    2378:	8d 8f       	std	Y+29, r24	; 0x1d
    237a:	0f c0       	rjmp	.+30     	; 0x239a <lcd_4bit_initialize+0x20a>
    237c:	88 ec       	ldi	r24, 0xC8	; 200
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	9c 8f       	std	Y+28, r25	; 0x1c
    2382:	8b 8f       	std	Y+27, r24	; 0x1b
    2384:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2386:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <lcd_4bit_initialize+0x1f8>
    238c:	9c 8f       	std	Y+28, r25	; 0x1c
    238e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2390:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2392:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	9e 8f       	std	Y+30, r25	; 0x1e
    2398:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    239c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	69 f7       	brne	.-38     	; 0x237c <lcd_4bit_initialize+0x1ec>
    23a2:	14 c0       	rjmp	.+40     	; 0x23cc <lcd_4bit_initialize+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23a6:	78 a1       	ldd	r23, Y+32	; 0x20
    23a8:	89 a1       	ldd	r24, Y+33	; 0x21
    23aa:	9a a1       	ldd	r25, Y+34	; 0x22
    23ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	9e 8f       	std	Y+30, r25	; 0x1e
    23b6:	8d 8f       	std	Y+29, r24	; 0x1d
    23b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23bc:	9a 8f       	std	Y+26, r25	; 0x1a
    23be:	89 8f       	std	Y+25, r24	; 0x19
    23c0:	89 8d       	ldd	r24, Y+25	; 0x19
    23c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <lcd_4bit_initialize+0x234>
    23c8:	9a 8f       	std	Y+26, r25	; 0x1a
    23ca:	89 8f       	std	Y+25, r24	; 0x19
        _delay_ms(5);
        ret = lcd_4bit_send_command(lcd_obj, _LCD_8BIT_MODE_2LINES_COMMAND);
    23cc:	8f a9       	ldd	r24, Y+55	; 0x37
    23ce:	98 ad       	ldd	r25, Y+56	; 0x38
    23d0:	68 e3       	ldi	r22, 0x38	; 56
    23d2:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    23d6:	8e ab       	std	Y+54, r24	; 0x36
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	a6 e1       	ldi	r26, 0x16	; 22
    23de:	b3 e4       	ldi	r27, 0x43	; 67
    23e0:	8d 8b       	std	Y+21, r24	; 0x15
    23e2:	9e 8b       	std	Y+22, r25	; 0x16
    23e4:	af 8b       	std	Y+23, r26	; 0x17
    23e6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23e8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ea:	7e 89       	ldd	r23, Y+22	; 0x16
    23ec:	8f 89       	ldd	r24, Y+23	; 0x17
    23ee:	98 8d       	ldd	r25, Y+24	; 0x18
    23f0:	2b ea       	ldi	r18, 0xAB	; 171
    23f2:	3a ea       	ldi	r19, 0xAA	; 170
    23f4:	4a e2       	ldi	r20, 0x2A	; 42
    23f6:	50 e4       	ldi	r21, 0x40	; 64
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	89 8b       	std	Y+17, r24	; 0x11
    2402:	9a 8b       	std	Y+18, r25	; 0x12
    2404:	ab 8b       	std	Y+19, r26	; 0x13
    2406:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2408:	69 89       	ldd	r22, Y+17	; 0x11
    240a:	7a 89       	ldd	r23, Y+18	; 0x12
    240c:	8b 89       	ldd	r24, Y+19	; 0x13
    240e:	9c 89       	ldd	r25, Y+20	; 0x14
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e8       	ldi	r20, 0x80	; 128
    2416:	5f e3       	ldi	r21, 0x3F	; 63
    2418:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    241c:	88 23       	and	r24, r24
    241e:	1c f4       	brge	.+6      	; 0x2426 <lcd_4bit_initialize+0x296>
		__ticks = 1;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	88 8b       	std	Y+16, r24	; 0x10
    2424:	91 c0       	rjmp	.+290    	; 0x2548 <lcd_4bit_initialize+0x3b8>
	else if (__tmp > 255)
    2426:	69 89       	ldd	r22, Y+17	; 0x11
    2428:	7a 89       	ldd	r23, Y+18	; 0x12
    242a:	8b 89       	ldd	r24, Y+19	; 0x13
    242c:	9c 89       	ldd	r25, Y+20	; 0x14
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4f e7       	ldi	r20, 0x7F	; 127
    2434:	53 e4       	ldi	r21, 0x43	; 67
    2436:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    243a:	18 16       	cp	r1, r24
    243c:	0c f0       	brlt	.+2      	; 0x2440 <lcd_4bit_initialize+0x2b0>
    243e:	7b c0       	rjmp	.+246    	; 0x2536 <lcd_4bit_initialize+0x3a6>
	{
		_delay_ms(__us / 1000.0);
    2440:	6d 89       	ldd	r22, Y+21	; 0x15
    2442:	7e 89       	ldd	r23, Y+22	; 0x16
    2444:	8f 89       	ldd	r24, Y+23	; 0x17
    2446:	98 8d       	ldd	r25, Y+24	; 0x18
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	4a e7       	ldi	r20, 0x7A	; 122
    244e:	54 e4       	ldi	r21, 0x44	; 68
    2450:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	8c 87       	std	Y+12, r24	; 0x0c
    245a:	9d 87       	std	Y+13, r25	; 0x0d
    245c:	ae 87       	std	Y+14, r26	; 0x0e
    245e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2460:	6c 85       	ldd	r22, Y+12	; 0x0c
    2462:	7d 85       	ldd	r23, Y+13	; 0x0d
    2464:	8e 85       	ldd	r24, Y+14	; 0x0e
    2466:	9f 85       	ldd	r25, Y+15	; 0x0f
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	4a ef       	ldi	r20, 0xFA	; 250
    246e:	54 e4       	ldi	r21, 0x44	; 68
    2470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	88 87       	std	Y+8, r24	; 0x08
    247a:	99 87       	std	Y+9, r25	; 0x09
    247c:	aa 87       	std	Y+10, r26	; 0x0a
    247e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2480:	68 85       	ldd	r22, Y+8	; 0x08
    2482:	79 85       	ldd	r23, Y+9	; 0x09
    2484:	8a 85       	ldd	r24, Y+10	; 0x0a
    2486:	9b 85       	ldd	r25, Y+11	; 0x0b
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e8       	ldi	r20, 0x80	; 128
    248e:	5f e3       	ldi	r21, 0x3F	; 63
    2490:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2494:	88 23       	and	r24, r24
    2496:	2c f4       	brge	.+10     	; 0x24a2 <lcd_4bit_initialize+0x312>
		__ticks = 1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9f 83       	std	Y+7, r25	; 0x07
    249e:	8e 83       	std	Y+6, r24	; 0x06
    24a0:	3f c0       	rjmp	.+126    	; 0x2520 <lcd_4bit_initialize+0x390>
	else if (__tmp > 65535)
    24a2:	68 85       	ldd	r22, Y+8	; 0x08
    24a4:	79 85       	ldd	r23, Y+9	; 0x09
    24a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    24a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	3f ef       	ldi	r19, 0xFF	; 255
    24ae:	4f e7       	ldi	r20, 0x7F	; 127
    24b0:	57 e4       	ldi	r21, 0x47	; 71
    24b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24b6:	18 16       	cp	r1, r24
    24b8:	4c f5       	brge	.+82     	; 0x250c <lcd_4bit_initialize+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    24bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    24be:	8e 85       	ldd	r24, Y+14	; 0x0e
    24c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e2       	ldi	r20, 0x20	; 32
    24c8:	51 e4       	ldi	r21, 0x41	; 65
    24ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	9f 83       	std	Y+7, r25	; 0x07
    24e0:	8e 83       	std	Y+6, r24	; 0x06
    24e2:	0f c0       	rjmp	.+30     	; 0x2502 <lcd_4bit_initialize+0x372>
    24e4:	88 ec       	ldi	r24, 0xC8	; 200
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	9d 83       	std	Y+5, r25	; 0x05
    24ea:	8c 83       	std	Y+4, r24	; 0x04
    24ec:	8c 81       	ldd	r24, Y+4	; 0x04
    24ee:	9d 81       	ldd	r25, Y+5	; 0x05
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <lcd_4bit_initialize+0x360>
    24f4:	9d 83       	std	Y+5, r25	; 0x05
    24f6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f8:	8e 81       	ldd	r24, Y+6	; 0x06
    24fa:	9f 81       	ldd	r25, Y+7	; 0x07
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	9f 83       	std	Y+7, r25	; 0x07
    2500:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2502:	8e 81       	ldd	r24, Y+6	; 0x06
    2504:	9f 81       	ldd	r25, Y+7	; 0x07
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	69 f7       	brne	.-38     	; 0x24e4 <lcd_4bit_initialize+0x354>
    250a:	24 c0       	rjmp	.+72     	; 0x2554 <lcd_4bit_initialize+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250c:	68 85       	ldd	r22, Y+8	; 0x08
    250e:	79 85       	ldd	r23, Y+9	; 0x09
    2510:	8a 85       	ldd	r24, Y+10	; 0x0a
    2512:	9b 85       	ldd	r25, Y+11	; 0x0b
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	9f 83       	std	Y+7, r25	; 0x07
    251e:	8e 83       	std	Y+6, r24	; 0x06
    2520:	8e 81       	ldd	r24, Y+6	; 0x06
    2522:	9f 81       	ldd	r25, Y+7	; 0x07
    2524:	9b 83       	std	Y+3, r25	; 0x03
    2526:	8a 83       	std	Y+2, r24	; 0x02
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	9b 81       	ldd	r25, Y+3	; 0x03
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <lcd_4bit_initialize+0x39c>
    2530:	9b 83       	std	Y+3, r25	; 0x03
    2532:	8a 83       	std	Y+2, r24	; 0x02
    2534:	0f c0       	rjmp	.+30     	; 0x2554 <lcd_4bit_initialize+0x3c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2536:	69 89       	ldd	r22, Y+17	; 0x11
    2538:	7a 89       	ldd	r23, Y+18	; 0x12
    253a:	8b 89       	ldd	r24, Y+19	; 0x13
    253c:	9c 89       	ldd	r25, Y+20	; 0x14
    253e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	88 8b       	std	Y+16, r24	; 0x10
    2548:	88 89       	ldd	r24, Y+16	; 0x10
    254a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	8a 95       	dec	r24
    2550:	f1 f7       	brne	.-4      	; 0x254e <lcd_4bit_initialize+0x3be>
    2552:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(150);
        ret = lcd_4bit_send_command(lcd_obj, _LCD_8BIT_MODE_2LINES_COMMAND);
    2554:	8f a9       	ldd	r24, Y+55	; 0x37
    2556:	98 ad       	ldd	r25, Y+56	; 0x38
    2558:	68 e3       	ldi	r22, 0x38	; 56
    255a:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    255e:	8e ab       	std	Y+54, r24	; 0x36
        
        ret = lcd_send_4bit(lcd_obj, 0x02); // start operation in 4-bit mode
    2560:	8f a9       	ldd	r24, Y+55	; 0x37
    2562:	98 ad       	ldd	r25, Y+56	; 0x38
    2564:	62 e0       	ldi	r22, 0x02	; 2
    2566:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <lcd_send_4bit>
    256a:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_CURSOR_OFF_DISPLAY_OFF);
    256c:	8f a9       	ldd	r24, Y+55	; 0x37
    256e:	98 ad       	ldd	r25, Y+56	; 0x38
    2570:	68 e0       	ldi	r22, 0x08	; 8
    2572:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    2576:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_CLEAR);
    2578:	8f a9       	ldd	r24, Y+55	; 0x37
    257a:	98 ad       	ldd	r25, Y+56	; 0x38
    257c:	61 e0       	ldi	r22, 0x01	; 1
    257e:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    2582:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_RETURN_HOME);
    2584:	8f a9       	ldd	r24, Y+55	; 0x37
    2586:	98 ad       	ldd	r25, Y+56	; 0x38
    2588:	62 e0       	ldi	r22, 0x02	; 2
    258a:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    258e:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_ENTRY_MODE_INC_NO_SHIFT);
    2590:	8f a9       	ldd	r24, Y+55	; 0x37
    2592:	98 ad       	ldd	r25, Y+56	; 0x38
    2594:	66 e0       	ldi	r22, 0x06	; 6
    2596:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    259a:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_CURSOR_OFF_DISPLAY_ON);
    259c:	8f a9       	ldd	r24, Y+55	; 0x37
    259e:	98 ad       	ldd	r25, Y+56	; 0x38
    25a0:	6c e0       	ldi	r22, 0x0C	; 12
    25a2:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    25a6:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS);  // Set DDRAM to address 0, start at row 1 column 1
    25a8:	8f a9       	ldd	r24, Y+55	; 0x37
    25aa:	98 ad       	ldd	r25, Y+56	; 0x38
    25ac:	60 e8       	ldi	r22, 0x80	; 128
    25ae:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    25b2:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_4BIT_MODE_2LINES_COMMAND);    // Set 4bit lcd mode
    25b4:	8f a9       	ldd	r24, Y+55	; 0x37
    25b6:	98 ad       	ldd	r25, Y+56	; 0x38
    25b8:	68 e2       	ldi	r22, 0x28	; 40
    25ba:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    25be:	8e ab       	std	Y+54, r24	; 0x36
    }
    return ret;
    25c0:	8e a9       	ldd	r24, Y+54	; 0x36
}
    25c2:	e8 96       	adiw	r28, 0x38	; 56
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <lcd_4bit_send_command>:
Std_ReturnType lcd_4bit_send_command(const char_lcd_t* lcd_obj, uint8 lcd_command)
{
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	00 d0       	rcall	.+0      	; 0x25da <lcd_4bit_send_command+0x6>
    25da:	00 d0       	rcall	.+0      	; 0x25dc <lcd_4bit_send_command+0x8>
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	9b 83       	std	Y+3, r25	; 0x03
    25e2:	8a 83       	std	Y+2, r24	; 0x02
    25e4:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType ret = E_NOT_OK;
    25e6:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	9b 81       	ldd	r25, Y+3	; 0x03
    25ec:	00 97       	sbiw	r24, 0x00	; 0
    25ee:	11 f4       	brne	.+4      	; 0x25f4 <lcd_4bit_send_command+0x20>
    {
        ret = E_NOT_OK;
    25f0:	19 82       	std	Y+1, r1	; 0x01
    25f2:	20 c0       	rjmp	.+64     	; 0x2634 <lcd_4bit_send_command+0x60>
    }
    else
    {
        ret = GPIO_pin_write_logic(&(lcd_obj->RS_pin), GPIO_LOW);
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	9b 81       	ldd	r25, Y+3	; 0x03
    25f8:	60 e0       	ldi	r22, 0x00	; 0
    25fa:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <GPIO_pin_write_logic>
    25fe:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_4bit(lcd_obj, (lcd_command >> 4));    // Send high Nibble
    2600:	8c 81       	ldd	r24, Y+4	; 0x04
    2602:	28 2f       	mov	r18, r24
    2604:	22 95       	swap	r18
    2606:	2f 70       	andi	r18, 0x0F	; 15
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
    260c:	62 2f       	mov	r22, r18
    260e:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <lcd_send_4bit>
    2612:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_enable_signal(lcd_obj);               // Send enable signal
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	9b 81       	ldd	r25, Y+3	; 0x03
    2618:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <lcd_send_enable_signal>
    261c:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_4bit(lcd_obj, lcd_command);           // Send low Nibble
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	9b 81       	ldd	r25, Y+3	; 0x03
    2622:	6c 81       	ldd	r22, Y+4	; 0x04
    2624:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <lcd_send_4bit>
    2628:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_enable_signal(lcd_obj);               // Send enable signal
    262a:	8a 81       	ldd	r24, Y+2	; 0x02
    262c:	9b 81       	ldd	r25, Y+3	; 0x03
    262e:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <lcd_send_enable_signal>
    2632:	89 83       	std	Y+1, r24	; 0x01
    }
    
    return ret;
    2634:	89 81       	ldd	r24, Y+1	; 0x01
}
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <lcd_4bit_send_char_data>:
Std_ReturnType lcd_4bit_send_char_data(const char_lcd_t* lcd_obj, uint8 lcd_data)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	00 d0       	rcall	.+0      	; 0x264a <lcd_4bit_send_char_data+0x6>
    264a:	00 d0       	rcall	.+0      	; 0x264c <lcd_4bit_send_char_data+0x8>
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	9b 83       	std	Y+3, r25	; 0x03
    2652:	8a 83       	std	Y+2, r24	; 0x02
    2654:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType ret = E_NOT_OK;
    2656:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	9b 81       	ldd	r25, Y+3	; 0x03
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	11 f4       	brne	.+4      	; 0x2664 <lcd_4bit_send_char_data+0x20>
    {
        ret = E_NOT_OK;
    2660:	19 82       	std	Y+1, r1	; 0x01
    2662:	20 c0       	rjmp	.+64     	; 0x26a4 <lcd_4bit_send_char_data+0x60>
    }
    else
    {
        ret = GPIO_pin_write_logic(&(lcd_obj->RS_pin), GPIO_HIGH);
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	9b 81       	ldd	r25, Y+3	; 0x03
    2668:	61 e0       	ldi	r22, 0x01	; 1
    266a:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <GPIO_pin_write_logic>
    266e:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_4bit(lcd_obj, (lcd_data >> 4));       // Send high Nibble
    2670:	8c 81       	ldd	r24, Y+4	; 0x04
    2672:	28 2f       	mov	r18, r24
    2674:	22 95       	swap	r18
    2676:	2f 70       	andi	r18, 0x0F	; 15
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	9b 81       	ldd	r25, Y+3	; 0x03
    267c:	62 2f       	mov	r22, r18
    267e:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <lcd_send_4bit>
    2682:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_enable_signal(lcd_obj);               // Send enable signal
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	9b 81       	ldd	r25, Y+3	; 0x03
    2688:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <lcd_send_enable_signal>
    268c:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_4bit(lcd_obj, lcd_data);              // Send low Nibble
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	9b 81       	ldd	r25, Y+3	; 0x03
    2692:	6c 81       	ldd	r22, Y+4	; 0x04
    2694:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <lcd_send_4bit>
    2698:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_enable_signal(lcd_obj);               // Send enable signal
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	9b 81       	ldd	r25, Y+3	; 0x03
    269e:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <lcd_send_enable_signal>
    26a2:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <lcd_4bit_send_char_data_pos>:
Std_ReturnType lcd_4bit_send_char_data_pos(const char_lcd_t* lcd_obj, uint8 row, uint8 col, uint8 lcd_data)
{
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <lcd_4bit_send_char_data_pos+0x6>
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <lcd_4bit_send_char_data_pos+0x8>
    26bc:	00 d0       	rcall	.+0      	; 0x26be <lcd_4bit_send_char_data_pos+0xa>
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	9b 83       	std	Y+3, r25	; 0x03
    26c4:	8a 83       	std	Y+2, r24	; 0x02
    26c6:	6c 83       	std	Y+4, r22	; 0x04
    26c8:	4d 83       	std	Y+5, r20	; 0x05
    26ca:	2e 83       	std	Y+6, r18	; 0x06
    Std_ReturnType ret = E_NOT_OK;
    26cc:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	9b 81       	ldd	r25, Y+3	; 0x03
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	11 f4       	brne	.+4      	; 0x26da <lcd_4bit_send_char_data_pos+0x26>
    {
        ret = E_NOT_OK;
    26d6:	19 82       	std	Y+1, r1	; 0x01
    26d8:	0d c0       	rjmp	.+26     	; 0x26f4 <lcd_4bit_send_char_data_pos+0x40>
    }
    else
    {
        ret = lcd_4bit_set_cursor_pos(lcd_obj, row, col);
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	9b 81       	ldd	r25, Y+3	; 0x03
    26de:	6c 81       	ldd	r22, Y+4	; 0x04
    26e0:	4d 81       	ldd	r20, Y+5	; 0x05
    26e2:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <lcd_4bit_set_cursor_pos>
    26e6:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_4bit_send_char_data(lcd_obj, lcd_data);
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	9b 81       	ldd	r25, Y+3	; 0x03
    26ec:	6e 81       	ldd	r22, Y+6	; 0x06
    26ee:	0e 94 22 13 	call	0x2644	; 0x2644 <lcd_4bit_send_char_data>
    26f2:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f6:	26 96       	adiw	r28, 0x06	; 6
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <lcd_4bit_send_string_data>:
Std_ReturnType lcd_4bit_send_string_data(const char_lcd_t* lcd_obj, uint8* str)
{
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	00 d0       	rcall	.+0      	; 0x270e <lcd_4bit_send_string_data+0x6>
    270e:	00 d0       	rcall	.+0      	; 0x2710 <lcd_4bit_send_string_data+0x8>
    2710:	00 d0       	rcall	.+0      	; 0x2712 <lcd_4bit_send_string_data+0xa>
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	9c 83       	std	Y+4, r25	; 0x04
    2718:	8b 83       	std	Y+3, r24	; 0x03
    271a:	7e 83       	std	Y+6, r23	; 0x06
    271c:	6d 83       	std	Y+5, r22	; 0x05
    Std_ReturnType ret = E_NOT_OK;
    271e:	1a 82       	std	Y+2, r1	; 0x02
    uint8 index = ZERO_INIT;
    2720:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	9c 81       	ldd	r25, Y+4	; 0x04
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	a1 f4       	brne	.+40     	; 0x2752 <lcd_4bit_send_string_data+0x4a>
    {
        ret = E_NOT_OK;
    272a:	1a 82       	std	Y+2, r1	; 0x02
    272c:	1d c0       	rjmp	.+58     	; 0x2768 <lcd_4bit_send_string_data+0x60>
    }
    else
    {
        while('\0' != *(str+index))
        {
            ret = lcd_4bit_send_char_data(lcd_obj, *(str + index));
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	8d 81       	ldd	r24, Y+5	; 0x05
    2736:	9e 81       	ldd	r25, Y+6	; 0x06
    2738:	fc 01       	movw	r30, r24
    273a:	e2 0f       	add	r30, r18
    273c:	f3 1f       	adc	r31, r19
    273e:	20 81       	ld	r18, Z
    2740:	8b 81       	ldd	r24, Y+3	; 0x03
    2742:	9c 81       	ldd	r25, Y+4	; 0x04
    2744:	62 2f       	mov	r22, r18
    2746:	0e 94 22 13 	call	0x2644	; 0x2644 <lcd_4bit_send_char_data>
    274a:	8a 83       	std	Y+2, r24	; 0x02
            index++;
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	8f 5f       	subi	r24, 0xFF	; 255
    2750:	89 83       	std	Y+1, r24	; 0x01
    {
        ret = E_NOT_OK;
    }
    else
    {
        while('\0' != *(str+index))
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	8d 81       	ldd	r24, Y+5	; 0x05
    275a:	9e 81       	ldd	r25, Y+6	; 0x06
    275c:	fc 01       	movw	r30, r24
    275e:	e2 0f       	add	r30, r18
    2760:	f3 1f       	adc	r31, r19
    2762:	80 81       	ld	r24, Z
    2764:	88 23       	and	r24, r24
    2766:	19 f7       	brne	.-58     	; 0x272e <lcd_4bit_send_string_data+0x26>
        {
            ret = lcd_4bit_send_char_data(lcd_obj, *(str + index));
            index++;
        }     
    }
    return ret;
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
}
    276a:	26 96       	adiw	r28, 0x06	; 6
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	f8 94       	cli
    2770:	de bf       	out	0x3e, r29	; 62
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	cd bf       	out	0x3d, r28	; 61
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <lcd_4bit_send_string_data_pos>:
Std_ReturnType lcd_4bit_send_string_data_pos(const char_lcd_t* lcd_obj, uint8 row, uint8 col, const uint8* str)
{
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	28 97       	sbiw	r28, 0x08	; 8
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	9c 83       	std	Y+4, r25	; 0x04
    2792:	8b 83       	std	Y+3, r24	; 0x03
    2794:	6d 83       	std	Y+5, r22	; 0x05
    2796:	4e 83       	std	Y+6, r20	; 0x06
    2798:	38 87       	std	Y+8, r19	; 0x08
    279a:	2f 83       	std	Y+7, r18	; 0x07
    Std_ReturnType ret = E_NOT_OK;
    279c:	1a 82       	std	Y+2, r1	; 0x02
    uint8 index = ZERO_INIT;
    279e:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj || NULL == str)
    27a0:	8b 81       	ldd	r24, Y+3	; 0x03
    27a2:	9c 81       	ldd	r25, Y+4	; 0x04
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	21 f0       	breq	.+8      	; 0x27b0 <lcd_4bit_send_string_data_pos+0x34>
    27a8:	8f 81       	ldd	r24, Y+7	; 0x07
    27aa:	98 85       	ldd	r25, Y+8	; 0x08
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	11 f4       	brne	.+4      	; 0x27b4 <lcd_4bit_send_string_data_pos+0x38>
    {
        ret = E_NOT_OK;
    27b0:	1a 82       	std	Y+2, r1	; 0x02
    27b2:	25 c0       	rjmp	.+74     	; 0x27fe <lcd_4bit_send_string_data_pos+0x82>
    }
    else
    {
        ret = lcd_4bit_set_cursor_pos(lcd_obj, row, col);
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	9c 81       	ldd	r25, Y+4	; 0x04
    27b8:	6d 81       	ldd	r22, Y+5	; 0x05
    27ba:	4e 81       	ldd	r20, Y+6	; 0x06
    27bc:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <lcd_4bit_set_cursor_pos>
    27c0:	8a 83       	std	Y+2, r24	; 0x02
    27c2:	12 c0       	rjmp	.+36     	; 0x27e8 <lcd_4bit_send_string_data_pos+0x6c>
        while('\0' != *(str+index))
        {
            ret = lcd_4bit_send_char_data(lcd_obj, *(str + index));
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	28 2f       	mov	r18, r24
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	8f 81       	ldd	r24, Y+7	; 0x07
    27cc:	98 85       	ldd	r25, Y+8	; 0x08
    27ce:	fc 01       	movw	r30, r24
    27d0:	e2 0f       	add	r30, r18
    27d2:	f3 1f       	adc	r31, r19
    27d4:	20 81       	ld	r18, Z
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	62 2f       	mov	r22, r18
    27dc:	0e 94 22 13 	call	0x2644	; 0x2644 <lcd_4bit_send_char_data>
    27e0:	8a 83       	std	Y+2, r24	; 0x02
            index++;
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	8f 5f       	subi	r24, 0xFF	; 255
    27e6:	89 83       	std	Y+1, r24	; 0x01
        ret = E_NOT_OK;
    }
    else
    {
        ret = lcd_4bit_set_cursor_pos(lcd_obj, row, col);
        while('\0' != *(str+index))
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	8f 81       	ldd	r24, Y+7	; 0x07
    27f0:	98 85       	ldd	r25, Y+8	; 0x08
    27f2:	fc 01       	movw	r30, r24
    27f4:	e2 0f       	add	r30, r18
    27f6:	f3 1f       	adc	r31, r19
    27f8:	80 81       	ld	r24, Z
    27fa:	88 23       	and	r24, r24
    27fc:	19 f7       	brne	.-58     	; 0x27c4 <lcd_4bit_send_string_data_pos+0x48>
            ret = lcd_4bit_send_char_data(lcd_obj, *(str + index));
            index++;
        }   
    }
    
    return ret;
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2800:	28 96       	adiw	r28, 0x08	; 8
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <lcd_4bit_send_custom_char>:
Std_ReturnType lcd_4bit_send_custom_char(const char_lcd_t* lcd_obj, uint8 row, uint8 col, const uint8 _char[], uint8 mem_pos)
{
    2812:	0f 93       	push	r16
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	29 97       	sbiw	r28, 0x09	; 9
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	9c 83       	std	Y+4, r25	; 0x04
    282a:	8b 83       	std	Y+3, r24	; 0x03
    282c:	6d 83       	std	Y+5, r22	; 0x05
    282e:	4e 83       	std	Y+6, r20	; 0x06
    2830:	38 87       	std	Y+8, r19	; 0x08
    2832:	2f 83       	std	Y+7, r18	; 0x07
    2834:	09 87       	std	Y+9, r16	; 0x09
    Std_ReturnType ret = E_NOT_OK;
    2836:	1a 82       	std	Y+2, r1	; 0x02
    uint8 l_counter = ZERO_INIT;
    2838:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	9c 81       	ldd	r25, Y+4	; 0x04
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	11 f4       	brne	.+4      	; 0x2846 <lcd_4bit_send_custom_char+0x34>
    {
        ret = E_NOT_OK;
    2842:	1a 82       	std	Y+2, r1	; 0x02
    2844:	30 c0       	rjmp	.+96     	; 0x28a6 <lcd_4bit_send_custom_char+0x94>
    }
    else
    {
        // set Address counter to CGRAM 
        ret = lcd_4bit_send_command(lcd_obj, (CGRAM_START_ADDRESS + (mem_pos * 8)));
    2846:	89 85       	ldd	r24, Y+9	; 0x09
    2848:	88 2f       	mov	r24, r24
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	08 96       	adiw	r24, 0x08	; 8
    284e:	88 0f       	add	r24, r24
    2850:	99 1f       	adc	r25, r25
    2852:	88 0f       	add	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	28 2f       	mov	r18, r24
    285c:	8b 81       	ldd	r24, Y+3	; 0x03
    285e:	9c 81       	ldd	r25, Y+4	; 0x04
    2860:	62 2f       	mov	r22, r18
    2862:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    2866:	8a 83       	std	Y+2, r24	; 0x02
        // sending the special character pattern to save in CGRAM
        for(l_counter=0; l_counter < 8; ++l_counter)
    2868:	19 82       	std	Y+1, r1	; 0x01
    286a:	12 c0       	rjmp	.+36     	; 0x2890 <lcd_4bit_send_custom_char+0x7e>
        {
            ret = lcd_4bit_send_char_data(lcd_obj, _char[l_counter]);
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	8f 81       	ldd	r24, Y+7	; 0x07
    2874:	98 85       	ldd	r25, Y+8	; 0x08
    2876:	fc 01       	movw	r30, r24
    2878:	e2 0f       	add	r30, r18
    287a:	f3 1f       	adc	r31, r19
    287c:	20 81       	ld	r18, Z
    287e:	8b 81       	ldd	r24, Y+3	; 0x03
    2880:	9c 81       	ldd	r25, Y+4	; 0x04
    2882:	62 2f       	mov	r22, r18
    2884:	0e 94 22 13 	call	0x2644	; 0x2644 <lcd_4bit_send_char_data>
    2888:	8a 83       	std	Y+2, r24	; 0x02
    else
    {
        // set Address counter to CGRAM 
        ret = lcd_4bit_send_command(lcd_obj, (CGRAM_START_ADDRESS + (mem_pos * 8)));
        // sending the special character pattern to save in CGRAM
        for(l_counter=0; l_counter < 8; ++l_counter)
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	8f 5f       	subi	r24, 0xFF	; 255
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	88 30       	cpi	r24, 0x08	; 8
    2894:	58 f3       	brcs	.-42     	; 0x286c <lcd_4bit_send_custom_char+0x5a>
        {
            ret = lcd_4bit_send_char_data(lcd_obj, _char[l_counter]);
        }
        // Sending the Character Codes (DDRAM) that mapping Character Patterns (CGRAM Data)
        //0x00->1st character pattern, 0x01->2nd character pattern and so on.. until 0x07->eighth char pattern
        ret = lcd_4bit_send_char_data_pos(lcd_obj, row, col, mem_pos);
    2896:	8b 81       	ldd	r24, Y+3	; 0x03
    2898:	9c 81       	ldd	r25, Y+4	; 0x04
    289a:	6d 81       	ldd	r22, Y+5	; 0x05
    289c:	4e 81       	ldd	r20, Y+6	; 0x06
    289e:	29 85       	ldd	r18, Y+9	; 0x09
    28a0:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <lcd_4bit_send_char_data_pos>
    28a4:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret;
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    28a8:	29 96       	adiw	r28, 0x09	; 9
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	0f 91       	pop	r16
    28ba:	08 95       	ret

000028bc <my_memset>:
 * @param ch
 * @param str_size
 * @return pointer to void type
 */
static void* my_memset(void* str, uint8 ch, uint8 str_size)
{
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <my_memset+0x6>
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <my_memset+0x8>
    28c4:	00 d0       	rcall	.+0      	; 0x28c6 <my_memset+0xa>
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	9b 83       	std	Y+3, r25	; 0x03
    28cc:	8a 83       	std	Y+2, r24	; 0x02
    28ce:	6c 83       	std	Y+4, r22	; 0x04
    28d0:	4d 83       	std	Y+5, r20	; 0x05
    uint8 counter = 0;
    28d2:	19 82       	std	Y+1, r1	; 0x01
    28d4:	0d c0       	rjmp	.+26     	; 0x28f0 <my_memset+0x34>
    while(str_size--)
    {
        *((uint8*)str + counter) = ch;
    28d6:	2a 81       	ldd	r18, Y+2	; 0x02
    28d8:	3b 81       	ldd	r19, Y+3	; 0x03
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	88 2f       	mov	r24, r24
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	f9 01       	movw	r30, r18
    28e2:	e8 0f       	add	r30, r24
    28e4:	f9 1f       	adc	r31, r25
    28e6:	8c 81       	ldd	r24, Y+4	; 0x04
    28e8:	80 83       	st	Z, r24
        counter++;
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	8f 5f       	subi	r24, 0xFF	; 255
    28ee:	89 83       	std	Y+1, r24	; 0x01
 * @return pointer to void type
 */
static void* my_memset(void* str, uint8 ch, uint8 str_size)
{
    uint8 counter = 0;
    while(str_size--)
    28f0:	8d 81       	ldd	r24, Y+5	; 0x05
    28f2:	8e 83       	std	Y+6, r24	; 0x06
    28f4:	8e 81       	ldd	r24, Y+6	; 0x06
    28f6:	88 23       	and	r24, r24
    28f8:	11 f0       	breq	.+4      	; 0x28fe <my_memset+0x42>
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	8e 83       	std	Y+6, r24	; 0x06
    28fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2900:	9d 81       	ldd	r25, Y+5	; 0x05
    2902:	91 50       	subi	r25, 0x01	; 1
    2904:	9d 83       	std	Y+5, r25	; 0x05
    2906:	88 23       	and	r24, r24
    2908:	31 f7       	brne	.-52     	; 0x28d6 <my_memset+0x1a>
    {
        *((uint8*)str + counter) = ch;
        counter++;
    }
    return str;
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	9b 81       	ldd	r25, Y+3	; 0x03
}
    290e:	26 96       	adiw	r28, 0x06	; 6
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <LCD_convert_byte_to_string>:

Std_ReturnType LCD_convert_byte_to_string(uint8 data, uint8* str)
{
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	00 d0       	rcall	.+0      	; 0x2926 <LCD_convert_byte_to_string+0x6>
    2926:	00 d0       	rcall	.+0      	; 0x2928 <LCD_convert_byte_to_string+0x8>
    2928:	00 d0       	rcall	.+0      	; 0x292a <LCD_convert_byte_to_string+0xa>
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
    292e:	8c 83       	std	Y+4, r24	; 0x04
    2930:	7e 83       	std	Y+6, r23	; 0x06
    2932:	6d 83       	std	Y+5, r22	; 0x05
    // data range = 0:255. max size of the string is set to 4 (3 for data , 1 for '\0')
    Std_ReturnType ret = E_NOT_OK;
    2934:	1b 82       	std	Y+3, r1	; 0x03
    uint8 index = 0;
    2936:	1a 82       	std	Y+2, r1	; 0x02
    uint8 tens = 100;
    2938:	84 e6       	ldi	r24, 0x64	; 100
    293a:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == str)
    293c:	8d 81       	ldd	r24, Y+5	; 0x05
    293e:	9e 81       	ldd	r25, Y+6	; 0x06
    2940:	00 97       	sbiw	r24, 0x00	; 0
    2942:	11 f4       	brne	.+4      	; 0x2948 <LCD_convert_byte_to_string+0x28>
    {
        ret = E_NOT_OK;
    2944:	1b 82       	std	Y+3, r1	; 0x03
    2946:	39 c0       	rjmp	.+114    	; 0x29ba <LCD_convert_byte_to_string+0x9a>
    }
    else
    {
        ret = E_OK;
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	8b 83       	std	Y+3, r24	; 0x03
        str = (uint8* )my_memset(str, '\0', 4);
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	44 e0       	ldi	r20, 0x04	; 4
    2954:	0e 94 5e 14 	call	0x28bc	; 0x28bc <my_memset>
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	8d 83       	std	Y+5, r24	; 0x05
        // sprintf(str, "%i", data);    // this function return the number as string
        if (0 == data)
    295c:	8c 81       	ldd	r24, Y+4	; 0x04
    295e:	88 23       	and	r24, r24
    2960:	49 f5       	brne	.+82     	; 0x29b4 <LCD_convert_byte_to_string+0x94>
        {
            *(str) = 48;
    2962:	ed 81       	ldd	r30, Y+5	; 0x05
    2964:	fe 81       	ldd	r31, Y+6	; 0x06
    2966:	80 e3       	ldi	r24, 0x30	; 48
    2968:	80 83       	st	Z, r24
    296a:	27 c0       	rjmp	.+78     	; 0x29ba <LCD_convert_byte_to_string+0x9a>
        }
        else
        {
             while (tens > 0)
            {
                if ((data / tens) > 0)
    296c:	8c 81       	ldd	r24, Y+4	; 0x04
    296e:	99 81       	ldd	r25, Y+1	; 0x01
    2970:	69 2f       	mov	r22, r25
    2972:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__udivmodqi4>
    2976:	88 23       	and	r24, r24
    2978:	b9 f0       	breq	.+46     	; 0x29a8 <LCD_convert_byte_to_string+0x88>
                {
                    *(str + index) = ((data / tens) % 10) + 48;
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	28 2f       	mov	r18, r24
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	fc 01       	movw	r30, r24
    2986:	e2 0f       	add	r30, r18
    2988:	f3 1f       	adc	r31, r19
    298a:	8c 81       	ldd	r24, Y+4	; 0x04
    298c:	99 81       	ldd	r25, Y+1	; 0x01
    298e:	69 2f       	mov	r22, r25
    2990:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__udivmodqi4>
    2994:	9a e0       	ldi	r25, 0x0A	; 10
    2996:	69 2f       	mov	r22, r25
    2998:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__udivmodqi4>
    299c:	89 2f       	mov	r24, r25
    299e:	80 5d       	subi	r24, 0xD0	; 208
    29a0:	80 83       	st	Z, r24
                    index++;
    29a2:	8a 81       	ldd	r24, Y+2	; 0x02
    29a4:	8f 5f       	subi	r24, 0xFF	; 255
    29a6:	8a 83       	std	Y+2, r24	; 0x02
                }
                tens = tens / 10;
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	9a e0       	ldi	r25, 0x0A	; 10
    29ac:	69 2f       	mov	r22, r25
    29ae:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__udivmodqi4>
    29b2:	89 83       	std	Y+1, r24	; 0x01
        {
            *(str) = 48;
        }
        else
        {
             while (tens > 0)
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	88 23       	and	r24, r24
    29b8:	c9 f6       	brne	.-78     	; 0x296c <LCD_convert_byte_to_string+0x4c>
                }
                tens = tens / 10;
            }
        }
    }
    return ret;
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
}
    29bc:	26 96       	adiw	r28, 0x06	; 6
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <LCD_convert_short_to_string>:

Std_ReturnType LCD_convert_short_to_string(uint16 data, uint8* str)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	28 97       	sbiw	r28, 0x08	; 8
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	9e 83       	std	Y+6, r25	; 0x06
    29e4:	8d 83       	std	Y+5, r24	; 0x05
    29e6:	78 87       	std	Y+8, r23	; 0x08
    29e8:	6f 83       	std	Y+7, r22	; 0x07
    // data range = 0:65535 max size of the string is set to 6 (5 for data , 1 for '\0')
    Std_ReturnType ret = E_NOT_OK;
    29ea:	1c 82       	std	Y+4, r1	; 0x04
    uint8 index = 0;
    29ec:	1b 82       	std	Y+3, r1	; 0x03
    uint16 tens = 10000;
    29ee:	80 e1       	ldi	r24, 0x10	; 16
    29f0:	97 e2       	ldi	r25, 0x27	; 39
    29f2:	9a 83       	std	Y+2, r25	; 0x02
    29f4:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == str)
    29f6:	8f 81       	ldd	r24, Y+7	; 0x07
    29f8:	98 85       	ldd	r25, Y+8	; 0x08
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	11 f4       	brne	.+4      	; 0x2a02 <LCD_convert_short_to_string+0x34>
    {
        ret = E_NOT_OK;
    29fe:	1c 82       	std	Y+4, r1	; 0x04
    2a00:	4a c0       	rjmp	.+148    	; 0x2a96 <LCD_convert_short_to_string+0xc8>
    }
    else
    {
        ret = E_OK;
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	8c 83       	std	Y+4, r24	; 0x04
        str = (uint8* )my_memset(str, ' ', 5);
    2a06:	8f 81       	ldd	r24, Y+7	; 0x07
    2a08:	98 85       	ldd	r25, Y+8	; 0x08
    2a0a:	60 e2       	ldi	r22, 0x20	; 32
    2a0c:	45 e0       	ldi	r20, 0x05	; 5
    2a0e:	0e 94 5e 14 	call	0x28bc	; 0x28bc <my_memset>
    2a12:	98 87       	std	Y+8, r25	; 0x08
    2a14:	8f 83       	std	Y+7, r24	; 0x07
        str[5] = '\0';
    2a16:	8f 81       	ldd	r24, Y+7	; 0x07
    2a18:	98 85       	ldd	r25, Y+8	; 0x08
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	35 96       	adiw	r30, 0x05	; 5
    2a1e:	10 82       	st	Z, r1
        // sprintf(str, "%i", data);    // this function return the number as string
        if (0 == data)
    2a20:	8d 81       	ldd	r24, Y+5	; 0x05
    2a22:	9e 81       	ldd	r25, Y+6	; 0x06
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	99 f5       	brne	.+102    	; 0x2a8e <LCD_convert_short_to_string+0xc0>
        {
            *(str) = 48;
    2a28:	ef 81       	ldd	r30, Y+7	; 0x07
    2a2a:	f8 85       	ldd	r31, Y+8	; 0x08
    2a2c:	80 e3       	ldi	r24, 0x30	; 48
    2a2e:	80 83       	st	Z, r24
    2a30:	32 c0       	rjmp	.+100    	; 0x2a96 <LCD_convert_short_to_string+0xc8>
        }
        else
        {
             while (tens > 0)
            {
                if ((data / tens) > 0)
    2a32:	8d 81       	ldd	r24, Y+5	; 0x05
    2a34:	9e 81       	ldd	r25, Y+6	; 0x06
    2a36:	29 81       	ldd	r18, Y+1	; 0x01
    2a38:	3a 81       	ldd	r19, Y+2	; 0x02
    2a3a:	b9 01       	movw	r22, r18
    2a3c:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <__udivmodhi4>
    2a40:	cb 01       	movw	r24, r22
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	d1 f0       	breq	.+52     	; 0x2a7a <LCD_convert_short_to_string+0xac>
                {
                    *(str + index) = ((data / tens) % 10) + 48;
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	28 2f       	mov	r18, r24
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a4e:	98 85       	ldd	r25, Y+8	; 0x08
    2a50:	fc 01       	movw	r30, r24
    2a52:	e2 0f       	add	r30, r18
    2a54:	f3 1f       	adc	r31, r19
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5a:	29 81       	ldd	r18, Y+1	; 0x01
    2a5c:	3a 81       	ldd	r19, Y+2	; 0x02
    2a5e:	b9 01       	movw	r22, r18
    2a60:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <__udivmodhi4>
    2a64:	cb 01       	movw	r24, r22
    2a66:	2a e0       	ldi	r18, 0x0A	; 10
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	b9 01       	movw	r22, r18
    2a6c:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <__udivmodhi4>
    2a70:	80 5d       	subi	r24, 0xD0	; 208
    2a72:	80 83       	st	Z, r24
                    index++;
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	8f 5f       	subi	r24, 0xFF	; 255
    2a78:	8b 83       	std	Y+3, r24	; 0x03
                }
                tens = tens / 10;
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7e:	2a e0       	ldi	r18, 0x0A	; 10
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	b9 01       	movw	r22, r18
    2a84:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <__udivmodhi4>
    2a88:	cb 01       	movw	r24, r22
    2a8a:	9a 83       	std	Y+2, r25	; 0x02
    2a8c:	89 83       	std	Y+1, r24	; 0x01
        {
            *(str) = 48;
        }
        else
        {
             while (tens > 0)
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	9a 81       	ldd	r25, Y+2	; 0x02
    2a92:	00 97       	sbiw	r24, 0x00	; 0
    2a94:	71 f6       	brne	.-100    	; 0x2a32 <LCD_convert_short_to_string+0x64>
                }
                tens = tens / 10;
            }
        }
    }
    return ret;
    2a96:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2a98:	28 96       	adiw	r28, 0x08	; 8
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	f8 94       	cli
    2a9e:	de bf       	out	0x3e, r29	; 62
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	08 95       	ret

00002aaa <LCD_convert_int_to_string>:
    
Std_ReturnType LCD_convert_int_to_string(uint32 data, uint8* str)
{
    2aaa:	0f 93       	push	r16
    2aac:	1f 93       	push	r17
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	2c 97       	sbiw	r28, 0x0c	; 12
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	6f 83       	std	Y+7, r22	; 0x07
    2ac4:	78 87       	std	Y+8, r23	; 0x08
    2ac6:	89 87       	std	Y+9, r24	; 0x09
    2ac8:	9a 87       	std	Y+10, r25	; 0x0a
    2aca:	5c 87       	std	Y+12, r21	; 0x0c
    2acc:	4b 87       	std	Y+11, r20	; 0x0b
    // data range = 0:4294967296 max size of the string is set to 11 (10 for data , 1 for '\0')
    Std_ReturnType ret = E_NOT_OK;
    2ace:	1e 82       	std	Y+6, r1	; 0x06
    uint8 index = 0;
    2ad0:	1d 82       	std	Y+5, r1	; 0x05
    uint32 tens = 1000000000;
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	9a ec       	ldi	r25, 0xCA	; 202
    2ad6:	aa e9       	ldi	r26, 0x9A	; 154
    2ad8:	bb e3       	ldi	r27, 0x3B	; 59
    2ada:	89 83       	std	Y+1, r24	; 0x01
    2adc:	9a 83       	std	Y+2, r25	; 0x02
    2ade:	ab 83       	std	Y+3, r26	; 0x03
    2ae0:	bc 83       	std	Y+4, r27	; 0x04
    if (NULL == str)
    2ae2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ae4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	11 f4       	brne	.+4      	; 0x2aee <LCD_convert_int_to_string+0x44>
    {
        ret = E_NOT_OK;
    2aea:	1e 82       	std	Y+6, r1	; 0x06
    2aec:	6b c0       	rjmp	.+214    	; 0x2bc4 <LCD_convert_int_to_string+0x11a>
    }
    else
    {
        ret = E_OK;
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	8e 83       	std	Y+6, r24	; 0x06
        str = (uint8* )my_memset(str, '\0', 11);
    2af2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2af4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2af6:	60 e0       	ldi	r22, 0x00	; 0
    2af8:	4b e0       	ldi	r20, 0x0B	; 11
    2afa:	0e 94 5e 14 	call	0x28bc	; 0x28bc <my_memset>
    2afe:	9c 87       	std	Y+12, r25	; 0x0c
    2b00:	8b 87       	std	Y+11, r24	; 0x0b
        // sprintf(str, "%i", data);    // this function return the number as string
        if (0 == data)
    2b02:	8f 81       	ldd	r24, Y+7	; 0x07
    2b04:	98 85       	ldd	r25, Y+8	; 0x08
    2b06:	a9 85       	ldd	r26, Y+9	; 0x09
    2b08:	ba 85       	ldd	r27, Y+10	; 0x0a
    2b0a:	00 97       	sbiw	r24, 0x00	; 0
    2b0c:	a1 05       	cpc	r26, r1
    2b0e:	b1 05       	cpc	r27, r1
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <LCD_convert_int_to_string+0x6a>
    2b12:	4f c0       	rjmp	.+158    	; 0x2bb2 <LCD_convert_int_to_string+0x108>
        {
            *(str) = 48;
    2b14:	eb 85       	ldd	r30, Y+11	; 0x0b
    2b16:	fc 85       	ldd	r31, Y+12	; 0x0c
    2b18:	80 e3       	ldi	r24, 0x30	; 48
    2b1a:	80 83       	st	Z, r24
    2b1c:	53 c0       	rjmp	.+166    	; 0x2bc4 <LCD_convert_int_to_string+0x11a>
        }
        else
        {
             while (tens > 0)
            {
                if ((data / tens) > 0)
    2b1e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b20:	98 85       	ldd	r25, Y+8	; 0x08
    2b22:	a9 85       	ldd	r26, Y+9	; 0x09
    2b24:	ba 85       	ldd	r27, Y+10	; 0x0a
    2b26:	29 81       	ldd	r18, Y+1	; 0x01
    2b28:	3a 81       	ldd	r19, Y+2	; 0x02
    2b2a:	4b 81       	ldd	r20, Y+3	; 0x03
    2b2c:	5c 81       	ldd	r21, Y+4	; 0x04
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__udivmodsi4>
    2b36:	da 01       	movw	r26, r20
    2b38:	c9 01       	movw	r24, r18
    2b3a:	00 97       	sbiw	r24, 0x00	; 0
    2b3c:	a1 05       	cpc	r26, r1
    2b3e:	b1 05       	cpc	r27, r1
    2b40:	31 f1       	breq	.+76     	; 0x2b8e <LCD_convert_int_to_string+0xe4>
                {
                    *(str + index) = ((data / tens) % 10) + 48;
    2b42:	8d 81       	ldd	r24, Y+5	; 0x05
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b4c:	8c 01       	movw	r16, r24
    2b4e:	02 0f       	add	r16, r18
    2b50:	13 1f       	adc	r17, r19
    2b52:	8f 81       	ldd	r24, Y+7	; 0x07
    2b54:	98 85       	ldd	r25, Y+8	; 0x08
    2b56:	a9 85       	ldd	r26, Y+9	; 0x09
    2b58:	ba 85       	ldd	r27, Y+10	; 0x0a
    2b5a:	29 81       	ldd	r18, Y+1	; 0x01
    2b5c:	3a 81       	ldd	r19, Y+2	; 0x02
    2b5e:	4b 81       	ldd	r20, Y+3	; 0x03
    2b60:	5c 81       	ldd	r21, Y+4	; 0x04
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__udivmodsi4>
    2b6a:	da 01       	movw	r26, r20
    2b6c:	c9 01       	movw	r24, r18
    2b6e:	2a e0       	ldi	r18, 0x0A	; 10
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e0       	ldi	r20, 0x00	; 0
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	bc 01       	movw	r22, r24
    2b78:	cd 01       	movw	r24, r26
    2b7a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__udivmodsi4>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	80 5d       	subi	r24, 0xD0	; 208
    2b84:	f8 01       	movw	r30, r16
    2b86:	80 83       	st	Z, r24
                    index++;
    2b88:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8a:	8f 5f       	subi	r24, 0xFF	; 255
    2b8c:	8d 83       	std	Y+5, r24	; 0x05
                }
                tens = tens / 10;
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	9a 81       	ldd	r25, Y+2	; 0x02
    2b92:	ab 81       	ldd	r26, Y+3	; 0x03
    2b94:	bc 81       	ldd	r27, Y+4	; 0x04
    2b96:	2a e0       	ldi	r18, 0x0A	; 10
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	50 e0       	ldi	r21, 0x00	; 0
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__udivmodsi4>
    2ba6:	da 01       	movw	r26, r20
    2ba8:	c9 01       	movw	r24, r18
    2baa:	89 83       	std	Y+1, r24	; 0x01
    2bac:	9a 83       	std	Y+2, r25	; 0x02
    2bae:	ab 83       	std	Y+3, r26	; 0x03
    2bb0:	bc 83       	std	Y+4, r27	; 0x04
        {
            *(str) = 48;
        }
        else
        {
             while (tens > 0)
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb6:	ab 81       	ldd	r26, Y+3	; 0x03
    2bb8:	bc 81       	ldd	r27, Y+4	; 0x04
    2bba:	00 97       	sbiw	r24, 0x00	; 0
    2bbc:	a1 05       	cpc	r26, r1
    2bbe:	b1 05       	cpc	r27, r1
    2bc0:	09 f0       	breq	.+2      	; 0x2bc4 <LCD_convert_int_to_string+0x11a>
    2bc2:	ad cf       	rjmp	.-166    	; 0x2b1e <LCD_convert_int_to_string+0x74>
                }
                tens = tens / 10;
            }
        }
    }
    return ret;
    2bc4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2bc6:	2c 96       	adiw	r28, 0x0c	; 12
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	f8 94       	cli
    2bcc:	de bf       	out	0x3e, r29	; 62
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	cd bf       	out	0x3d, r28	; 61
    2bd2:	cf 91       	pop	r28
    2bd4:	df 91       	pop	r29
    2bd6:	1f 91       	pop	r17
    2bd8:	0f 91       	pop	r16
    2bda:	08 95       	ret

00002bdc <lcd_4bit_set_cursor_pos>:
    return ret;
}

#elif (LCD_MODE == CHAR_LCD_4BIT_MODE)
static Std_ReturnType lcd_4bit_set_cursor_pos(const char_lcd_t* lcd_obj, uint8 row, uint8 col)
{
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
    2be4:	2b 97       	sbiw	r28, 0x0b	; 11
    2be6:	0f b6       	in	r0, 0x3f	; 63
    2be8:	f8 94       	cli
    2bea:	de bf       	out	0x3e, r29	; 62
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	cd bf       	out	0x3d, r28	; 61
    2bf0:	9f 83       	std	Y+7, r25	; 0x07
    2bf2:	8e 83       	std	Y+6, r24	; 0x06
    2bf4:	68 87       	std	Y+8, r22	; 0x08
    2bf6:	49 87       	std	Y+9, r20	; 0x09
    Std_ReturnType ret = E_OK;
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	8d 83       	std	Y+5, r24	; 0x05
    col--;  // to ensure zero indexing
    2bfc:	89 85       	ldd	r24, Y+9	; 0x09
    2bfe:	81 50       	subi	r24, 0x01	; 1
    2c00:	89 87       	std	Y+9, r24	; 0x09
    uint8 row1_offset = 0x00, 
    2c02:	1c 82       	std	Y+4, r1	; 0x04
            row2_offset = 0x40, 
    2c04:	80 e4       	ldi	r24, 0x40	; 64
    2c06:	8b 83       	std	Y+3, r24	; 0x03
            row3_offset = 0x14, 
    2c08:	84 e1       	ldi	r24, 0x14	; 20
    2c0a:	8a 83       	std	Y+2, r24	; 0x02
            row4_offset = 0x40 + 0x14;
    2c0c:	84 e5       	ldi	r24, 0x54	; 84
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    switch(row)
    2c10:	88 85       	ldd	r24, Y+8	; 0x08
    2c12:	28 2f       	mov	r18, r24
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	3b 87       	std	Y+11, r19	; 0x0b
    2c18:	2a 87       	std	Y+10, r18	; 0x0a
    2c1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c1e:	82 30       	cpi	r24, 0x02	; 2
    2c20:	91 05       	cpc	r25, r1
    2c22:	11 f1       	breq	.+68     	; 0x2c68 <lcd_4bit_set_cursor_pos+0x8c>
    2c24:	2a 85       	ldd	r18, Y+10	; 0x0a
    2c26:	3b 85       	ldd	r19, Y+11	; 0x0b
    2c28:	23 30       	cpi	r18, 0x03	; 3
    2c2a:	31 05       	cpc	r19, r1
    2c2c:	34 f4       	brge	.+12     	; 0x2c3a <lcd_4bit_set_cursor_pos+0x5e>
    2c2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c30:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c32:	81 30       	cpi	r24, 0x01	; 1
    2c34:	91 05       	cpc	r25, r1
    2c36:	61 f0       	breq	.+24     	; 0x2c50 <lcd_4bit_set_cursor_pos+0x74>
    2c38:	3a c0       	rjmp	.+116    	; 0x2cae <lcd_4bit_set_cursor_pos+0xd2>
    2c3a:	2a 85       	ldd	r18, Y+10	; 0x0a
    2c3c:	3b 85       	ldd	r19, Y+11	; 0x0b
    2c3e:	23 30       	cpi	r18, 0x03	; 3
    2c40:	31 05       	cpc	r19, r1
    2c42:	f1 f0       	breq	.+60     	; 0x2c80 <lcd_4bit_set_cursor_pos+0xa4>
    2c44:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c46:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c48:	84 30       	cpi	r24, 0x04	; 4
    2c4a:	91 05       	cpc	r25, r1
    2c4c:	29 f1       	breq	.+74     	; 0x2c98 <lcd_4bit_set_cursor_pos+0xbc>
    2c4e:	2f c0       	rjmp	.+94     	; 0x2cae <lcd_4bit_set_cursor_pos+0xd2>
    {
        case ROW1:
            ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS + row1_offset + col);    // 0x80 + col
    2c50:	9c 81       	ldd	r25, Y+4	; 0x04
    2c52:	89 85       	ldd	r24, Y+9	; 0x09
    2c54:	89 0f       	add	r24, r25
    2c56:	28 2f       	mov	r18, r24
    2c58:	20 58       	subi	r18, 0x80	; 128
    2c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c5e:	62 2f       	mov	r22, r18
    2c60:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    2c64:	8d 83       	std	Y+5, r24	; 0x05
    2c66:	23 c0       	rjmp	.+70     	; 0x2cae <lcd_4bit_set_cursor_pos+0xd2>
            break;
        case ROW2:
            ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS + row2_offset + col);   // 0xC0 + col
    2c68:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6a:	89 85       	ldd	r24, Y+9	; 0x09
    2c6c:	89 0f       	add	r24, r25
    2c6e:	28 2f       	mov	r18, r24
    2c70:	20 58       	subi	r18, 0x80	; 128
    2c72:	8e 81       	ldd	r24, Y+6	; 0x06
    2c74:	9f 81       	ldd	r25, Y+7	; 0x07
    2c76:	62 2f       	mov	r22, r18
    2c78:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    2c7c:	8d 83       	std	Y+5, r24	; 0x05
    2c7e:	17 c0       	rjmp	.+46     	; 0x2cae <lcd_4bit_set_cursor_pos+0xd2>
            break;
        case ROW3:
            ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS + row3_offset + col); // 0x94 + col
    2c80:	9a 81       	ldd	r25, Y+2	; 0x02
    2c82:	89 85       	ldd	r24, Y+9	; 0x09
    2c84:	89 0f       	add	r24, r25
    2c86:	28 2f       	mov	r18, r24
    2c88:	20 58       	subi	r18, 0x80	; 128
    2c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c8c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c8e:	62 2f       	mov	r22, r18
    2c90:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    2c94:	8d 83       	std	Y+5, r24	; 0x05
    2c96:	0b c0       	rjmp	.+22     	; 0x2cae <lcd_4bit_set_cursor_pos+0xd2>
            break;
        case ROW4:
            ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS + row4_offset + col); // 0xD4 + col
    2c98:	99 81       	ldd	r25, Y+1	; 0x01
    2c9a:	89 85       	ldd	r24, Y+9	; 0x09
    2c9c:	89 0f       	add	r24, r25
    2c9e:	28 2f       	mov	r18, r24
    2ca0:	20 58       	subi	r18, 0x80	; 128
    2ca2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ca4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ca6:	62 2f       	mov	r22, r18
    2ca8:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    2cac:	8d 83       	std	Y+5, r24	; 0x05
            break;
        default:
            break;
    }
    return ret;
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2cb0:	2b 96       	adiw	r28, 0x0b	; 11
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	de bf       	out	0x3e, r29	; 62
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	cd bf       	out	0x3d, r28	; 61
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	08 95       	ret

00002cc2 <lcd_send_4bit>:

static Std_ReturnType lcd_send_4bit(const char_lcd_t* lcd_obj, uint8 _data_command)
{
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <lcd_send_4bit+0x6>
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <lcd_send_4bit+0x8>
    2cca:	0f 92       	push	r0
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	9c 83       	std	Y+4, r25	; 0x04
    2cd2:	8b 83       	std	Y+3, r24	; 0x03
    2cd4:	6d 83       	std	Y+5, r22	; 0x05
    Std_ReturnType ret = E_NOT_OK;
    2cd6:	1a 82       	std	Y+2, r1	; 0x02
    uint8 l_pin_counter = ZERO_INIT;
    2cd8:	19 82       	std	Y+1, r1	; 0x01
    for (l_pin_counter = 0; l_pin_counter < 4; l_pin_counter++)
    2cda:	19 82       	std	Y+1, r1	; 0x01
    2cdc:	22 c0       	rjmp	.+68     	; 0x2d22 <lcd_send_4bit+0x60>
    {
        ret = GPIO_pin_write_logic(&(lcd_obj->lcd_data_pins[l_pin_counter]), ((_data_command >> l_pin_counter) & BIT_MASK));
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce2:	9c 01       	movw	r18, r24
    2ce4:	2e 5f       	subi	r18, 0xFE	; 254
    2ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	88 2f       	mov	r24, r24
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	a9 01       	movw	r20, r18
    2cf0:	48 0f       	add	r20, r24
    2cf2:	59 1f       	adc	r21, r25
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	88 2f       	mov	r24, r24
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	b9 01       	movw	r22, r18
    2d02:	02 c0       	rjmp	.+4      	; 0x2d08 <lcd_send_4bit+0x46>
    2d04:	75 95       	asr	r23
    2d06:	67 95       	ror	r22
    2d08:	8a 95       	dec	r24
    2d0a:	e2 f7       	brpl	.-8      	; 0x2d04 <lcd_send_4bit+0x42>
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	28 2f       	mov	r18, r24
    2d10:	21 70       	andi	r18, 0x01	; 1
    2d12:	ca 01       	movw	r24, r20
    2d14:	62 2f       	mov	r22, r18
    2d16:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <GPIO_pin_write_logic>
    2d1a:	8a 83       	std	Y+2, r24	; 0x02

static Std_ReturnType lcd_send_4bit(const char_lcd_t* lcd_obj, uint8 _data_command)
{
    Std_ReturnType ret = E_NOT_OK;
    uint8 l_pin_counter = ZERO_INIT;
    for (l_pin_counter = 0; l_pin_counter < 4; l_pin_counter++)
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	8f 5f       	subi	r24, 0xFF	; 255
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	84 30       	cpi	r24, 0x04	; 4
    2d26:	d8 f2       	brcs	.-74     	; 0x2cde <lcd_send_4bit+0x1c>
    {
        ret = GPIO_pin_write_logic(&(lcd_obj->lcd_data_pins[l_pin_counter]), ((_data_command >> l_pin_counter) & BIT_MASK));
    }
    return ret;
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	08 95       	ret

00002d3a <lcd_send_enable_signal>:
#endif

static Std_ReturnType lcd_send_enable_signal(const char_lcd_t* lcd_obj)
{
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
    2d42:	6b 97       	sbiw	r28, 0x1b	; 27
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	f8 94       	cli
    2d48:	de bf       	out	0x3e, r29	; 62
    2d4a:	0f be       	out	0x3f, r0	; 63
    2d4c:	cd bf       	out	0x3d, r28	; 61
    2d4e:	9b 8f       	std	Y+27, r25	; 0x1b
    2d50:	8a 8f       	std	Y+26, r24	; 0x1a
    Std_ReturnType ret = E_OK;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	89 8f       	std	Y+25, r24	; 0x19
    ret = GPIO_pin_write_logic(&(lcd_obj->E_pin), GPIO_HIGH);
    2d56:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d58:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d5a:	01 96       	adiw	r24, 0x01	; 1
    2d5c:	61 e0       	ldi	r22, 0x01	; 1
    2d5e:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <GPIO_pin_write_logic>
    2d62:	89 8f       	std	Y+25, r24	; 0x19
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	a0 ea       	ldi	r26, 0xA0	; 160
    2d6a:	b0 e4       	ldi	r27, 0x40	; 64
    2d6c:	8d 8b       	std	Y+21, r24	; 0x15
    2d6e:	9e 8b       	std	Y+22, r25	; 0x16
    2d70:	af 8b       	std	Y+23, r26	; 0x17
    2d72:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d74:	6d 89       	ldd	r22, Y+21	; 0x15
    2d76:	7e 89       	ldd	r23, Y+22	; 0x16
    2d78:	8f 89       	ldd	r24, Y+23	; 0x17
    2d7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d7c:	2b ea       	ldi	r18, 0xAB	; 171
    2d7e:	3a ea       	ldi	r19, 0xAA	; 170
    2d80:	4a e2       	ldi	r20, 0x2A	; 42
    2d82:	50 e4       	ldi	r21, 0x40	; 64
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	89 8b       	std	Y+17, r24	; 0x11
    2d8e:	9a 8b       	std	Y+18, r25	; 0x12
    2d90:	ab 8b       	std	Y+19, r26	; 0x13
    2d92:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2d94:	69 89       	ldd	r22, Y+17	; 0x11
    2d96:	7a 89       	ldd	r23, Y+18	; 0x12
    2d98:	8b 89       	ldd	r24, Y+19	; 0x13
    2d9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e8       	ldi	r20, 0x80	; 128
    2da2:	5f e3       	ldi	r21, 0x3F	; 63
    2da4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2da8:	88 23       	and	r24, r24
    2daa:	1c f4       	brge	.+6      	; 0x2db2 <lcd_send_enable_signal+0x78>
		__ticks = 1;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	88 8b       	std	Y+16, r24	; 0x10
    2db0:	91 c0       	rjmp	.+290    	; 0x2ed4 <lcd_send_enable_signal+0x19a>
	else if (__tmp > 255)
    2db2:	69 89       	ldd	r22, Y+17	; 0x11
    2db4:	7a 89       	ldd	r23, Y+18	; 0x12
    2db6:	8b 89       	ldd	r24, Y+19	; 0x13
    2db8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	4f e7       	ldi	r20, 0x7F	; 127
    2dc0:	53 e4       	ldi	r21, 0x43	; 67
    2dc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc6:	18 16       	cp	r1, r24
    2dc8:	0c f0       	brlt	.+2      	; 0x2dcc <lcd_send_enable_signal+0x92>
    2dca:	7b c0       	rjmp	.+246    	; 0x2ec2 <lcd_send_enable_signal+0x188>
	{
		_delay_ms(__us / 1000.0);
    2dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dce:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	4a e7       	ldi	r20, 0x7A	; 122
    2dda:	54 e4       	ldi	r21, 0x44	; 68
    2ddc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	8c 87       	std	Y+12, r24	; 0x0c
    2de6:	9d 87       	std	Y+13, r25	; 0x0d
    2de8:	ae 87       	std	Y+14, r26	; 0x0e
    2dea:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dec:	6c 85       	ldd	r22, Y+12	; 0x0c
    2dee:	7d 85       	ldd	r23, Y+13	; 0x0d
    2df0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2df2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	4a ef       	ldi	r20, 0xFA	; 250
    2dfa:	54 e4       	ldi	r21, 0x44	; 68
    2dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	88 87       	std	Y+8, r24	; 0x08
    2e06:	99 87       	std	Y+9, r25	; 0x09
    2e08:	aa 87       	std	Y+10, r26	; 0x0a
    2e0a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e0c:	68 85       	ldd	r22, Y+8	; 0x08
    2e0e:	79 85       	ldd	r23, Y+9	; 0x09
    2e10:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e12:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e8       	ldi	r20, 0x80	; 128
    2e1a:	5f e3       	ldi	r21, 0x3F	; 63
    2e1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e20:	88 23       	and	r24, r24
    2e22:	2c f4       	brge	.+10     	; 0x2e2e <lcd_send_enable_signal+0xf4>
		__ticks = 1;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	9f 83       	std	Y+7, r25	; 0x07
    2e2a:	8e 83       	std	Y+6, r24	; 0x06
    2e2c:	3f c0       	rjmp	.+126    	; 0x2eac <lcd_send_enable_signal+0x172>
	else if (__tmp > 65535)
    2e2e:	68 85       	ldd	r22, Y+8	; 0x08
    2e30:	79 85       	ldd	r23, Y+9	; 0x09
    2e32:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e34:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	3f ef       	ldi	r19, 0xFF	; 255
    2e3a:	4f e7       	ldi	r20, 0x7F	; 127
    2e3c:	57 e4       	ldi	r21, 0x47	; 71
    2e3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e42:	18 16       	cp	r1, r24
    2e44:	4c f5       	brge	.+82     	; 0x2e98 <lcd_send_enable_signal+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e46:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e48:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	40 e2       	ldi	r20, 0x20	; 32
    2e54:	51 e4       	ldi	r21, 0x41	; 65
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	bc 01       	movw	r22, r24
    2e60:	cd 01       	movw	r24, r26
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	9f 83       	std	Y+7, r25	; 0x07
    2e6c:	8e 83       	std	Y+6, r24	; 0x06
    2e6e:	0f c0       	rjmp	.+30     	; 0x2e8e <lcd_send_enable_signal+0x154>
    2e70:	88 ec       	ldi	r24, 0xC8	; 200
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	9d 83       	std	Y+5, r25	; 0x05
    2e76:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e78:	8c 81       	ldd	r24, Y+4	; 0x04
    2e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	f1 f7       	brne	.-4      	; 0x2e7c <lcd_send_enable_signal+0x142>
    2e80:	9d 83       	std	Y+5, r25	; 0x05
    2e82:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e84:	8e 81       	ldd	r24, Y+6	; 0x06
    2e86:	9f 81       	ldd	r25, Y+7	; 0x07
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	9f 83       	std	Y+7, r25	; 0x07
    2e8c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e90:	9f 81       	ldd	r25, Y+7	; 0x07
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	69 f7       	brne	.-38     	; 0x2e70 <lcd_send_enable_signal+0x136>
    2e96:	24 c0       	rjmp	.+72     	; 0x2ee0 <lcd_send_enable_signal+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e98:	68 85       	ldd	r22, Y+8	; 0x08
    2e9a:	79 85       	ldd	r23, Y+9	; 0x09
    2e9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	9f 83       	std	Y+7, r25	; 0x07
    2eaa:	8e 83       	std	Y+6, r24	; 0x06
    2eac:	8e 81       	ldd	r24, Y+6	; 0x06
    2eae:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb0:	9b 83       	std	Y+3, r25	; 0x03
    2eb2:	8a 83       	std	Y+2, r24	; 0x02
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	f1 f7       	brne	.-4      	; 0x2eb8 <lcd_send_enable_signal+0x17e>
    2ebc:	9b 83       	std	Y+3, r25	; 0x03
    2ebe:	8a 83       	std	Y+2, r24	; 0x02
    2ec0:	0f c0       	rjmp	.+30     	; 0x2ee0 <lcd_send_enable_signal+0x1a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ec2:	69 89       	ldd	r22, Y+17	; 0x11
    2ec4:	7a 89       	ldd	r23, Y+18	; 0x12
    2ec6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	88 8b       	std	Y+16, r24	; 0x10
    2ed4:	88 89       	ldd	r24, Y+16	; 0x10
    2ed6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	8a 95       	dec	r24
    2edc:	f1 f7       	brne	.-4      	; 0x2eda <lcd_send_enable_signal+0x1a0>
    2ede:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
    ret = GPIO_pin_write_logic(&(lcd_obj->E_pin), GPIO_LOW);
    2ee0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ee2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ee4:	01 96       	adiw	r24, 0x01	; 1
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <GPIO_pin_write_logic>
    2eec:	89 8f       	std	Y+25, r24	; 0x19
    return ret;
    2eee:	89 8d       	ldd	r24, Y+25	; 0x19
}
    2ef0:	6b 96       	adiw	r28, 0x1b	; 27
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <Keypad_init>:
 * @return Status of the Function
 *          E_OK     : The Function done successfully
 *          E_NOT_OK : The Function has issue to perform this task
 */
Std_ReturnType Keypad_init(const keypad_matrix_t* key_obj)
{
    2f02:	df 93       	push	r29
    2f04:	cf 93       	push	r28
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <Keypad_init+0x6>
    2f08:	00 d0       	rcall	.+0      	; 0x2f0a <Keypad_init+0x8>
    2f0a:	0f 92       	push	r0
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
    2f10:	9d 83       	std	Y+5, r25	; 0x05
    2f12:	8c 83       	std	Y+4, r24	; 0x04
    Std_ReturnType ret = E_NOT_OK;
    2f14:	1b 82       	std	Y+3, r1	; 0x03
    uint8 row_counter=ZERO_INIT, col_counter=ZERO_INIT;
    2f16:	1a 82       	std	Y+2, r1	; 0x02
    2f18:	19 82       	std	Y+1, r1	; 0x01
    if (key_obj == NULL)
    2f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f1e:	00 97       	sbiw	r24, 0x00	; 0
    2f20:	11 f4       	brne	.+4      	; 0x2f26 <Keypad_init+0x24>
    {
        ret = E_NOT_OK;
    2f22:	1b 82       	std	Y+3, r1	; 0x03
    2f24:	2a c0       	rjmp	.+84     	; 0x2f7a <Keypad_init+0x78>
    }
    else
    {
        for (row_counter=ZERO_INIT; row_counter<KEYPAD_MATRIX_ROWS; row_counter++)
    2f26:	1a 82       	std	Y+2, r1	; 0x02
    2f28:	10 c0       	rjmp	.+32     	; 0x2f4a <Keypad_init+0x48>
        {
            ret = GPIO_pin_initialize(&(key_obj->keypad_rows_pins[row_counter]));
    2f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f2e:	9c 01       	movw	r18, r24
    2f30:	2f 5f       	subi	r18, 0xFF	; 255
    2f32:	3f 4f       	sbci	r19, 0xFF	; 255
    2f34:	8a 81       	ldd	r24, Y+2	; 0x02
    2f36:	88 2f       	mov	r24, r24
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	82 0f       	add	r24, r18
    2f3c:	93 1f       	adc	r25, r19
    2f3e:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <GPIO_pin_initialize>
    2f42:	8b 83       	std	Y+3, r24	; 0x03
    {
        ret = E_NOT_OK;
    }
    else
    {
        for (row_counter=ZERO_INIT; row_counter<KEYPAD_MATRIX_ROWS; row_counter++)
    2f44:	8a 81       	ldd	r24, Y+2	; 0x02
    2f46:	8f 5f       	subi	r24, 0xFF	; 255
    2f48:	8a 83       	std	Y+2, r24	; 0x02
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	84 30       	cpi	r24, 0x04	; 4
    2f4e:	68 f3       	brcs	.-38     	; 0x2f2a <Keypad_init+0x28>
        {
            ret = GPIO_pin_initialize(&(key_obj->keypad_rows_pins[row_counter]));
        }
        for(col_counter=ZERO_INIT; col_counter<KEYPAD_MATRIX_COLS; col_counter++)
    2f50:	19 82       	std	Y+1, r1	; 0x01
    2f52:	10 c0       	rjmp	.+32     	; 0x2f74 <Keypad_init+0x72>
        {
            ret = GPIO_pin_direction_initialize(&(key_obj->keypad_cols_pins[col_counter]));
    2f54:	8c 81       	ldd	r24, Y+4	; 0x04
    2f56:	9d 81       	ldd	r25, Y+5	; 0x05
    2f58:	9c 01       	movw	r18, r24
    2f5a:	2b 5f       	subi	r18, 0xFB	; 251
    2f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	88 2f       	mov	r24, r24
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	82 0f       	add	r24, r18
    2f66:	93 1f       	adc	r25, r19
    2f68:	0e 94 a3 0c 	call	0x1946	; 0x1946 <GPIO_pin_direction_initialize>
    2f6c:	8b 83       	std	Y+3, r24	; 0x03
    {
        for (row_counter=ZERO_INIT; row_counter<KEYPAD_MATRIX_ROWS; row_counter++)
        {
            ret = GPIO_pin_initialize(&(key_obj->keypad_rows_pins[row_counter]));
        }
        for(col_counter=ZERO_INIT; col_counter<KEYPAD_MATRIX_COLS; col_counter++)
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	84 30       	cpi	r24, 0x04	; 4
    2f78:	68 f3       	brcs	.-38     	; 0x2f54 <Keypad_init+0x52>
        {
            ret = GPIO_pin_direction_initialize(&(key_obj->keypad_cols_pins[col_counter]));
        }
    }
    return ret; 
    2f7a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2f7c:	0f 90       	pop	r0
    2f7e:	0f 90       	pop	r0
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	0f 90       	pop	r0
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	08 95       	ret

00002f8c <Keypad_getValue>:
 * @return Status of the Function
 *          E_OK     : The Function done successfully
 *          E_NOT_OK : The Function has issue to perform this task
 */
Std_ReturnType Keypad_getValue(const keypad_matrix_t* key_obj, uint8* key_value)
{
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	6d 97       	sbiw	r28, 0x1d	; 29
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
    2fa0:	9e 8b       	std	Y+22, r25	; 0x16
    2fa2:	8d 8b       	std	Y+21, r24	; 0x15
    2fa4:	78 8f       	std	Y+24, r23	; 0x18
    2fa6:	6f 8b       	std	Y+23, r22	; 0x17
    Std_ReturnType ret, state = E_NOT_OK;
    2fa8:	1a 8a       	std	Y+18, r1	; 0x12
    uint8 row_counter=ZERO_INIT, col_counter=ZERO_INIT, counter=ZERO_INIT; 
    2faa:	19 8a       	std	Y+17, r1	; 0x11
    2fac:	18 8a       	std	Y+16, r1	; 0x10
    2fae:	1f 86       	std	Y+15, r1	; 0x0f
    uint8 col_logic = GPIO_LOW;
    2fb0:	1c 8a       	std	Y+20, r1	; 0x14
    if ((key_obj == NULL) || ( NULL == key_value))
    2fb2:	8d 89       	ldd	r24, Y+21	; 0x15
    2fb4:	9e 89       	ldd	r25, Y+22	; 0x16
    2fb6:	00 97       	sbiw	r24, 0x00	; 0
    2fb8:	21 f0       	breq	.+8      	; 0x2fc2 <Keypad_getValue+0x36>
    2fba:	8f 89       	ldd	r24, Y+23	; 0x17
    2fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2fbe:	00 97       	sbiw	r24, 0x00	; 0
    2fc0:	21 f4       	brne	.+8      	; 0x2fca <Keypad_getValue+0x3e>
    {
        ret = E_NOT_OK;
    2fc2:	1b 8a       	std	Y+19, r1	; 0x13
                }
            }
    	}
    	}
    }
    return ret; 
    2fc4:	2b 89       	ldd	r18, Y+19	; 0x13
    2fc6:	29 8f       	std	Y+25, r18	; 0x19
    2fc8:	30 c1       	rjmp	.+608    	; 0x322a <Keypad_getValue+0x29e>
    }
    else
    {
    	while(1)
    	{
        for(row_counter=ZERO_INIT; row_counter<KEYPAD_MATRIX_ROWS; row_counter++)
    2fca:	19 8a       	std	Y+17, r1	; 0x11
    2fcc:	29 c1       	rjmp	.+594    	; 0x3220 <Keypad_getValue+0x294>
        {            
            for(counter=ZERO_INIT; counter<KEYPAD_MATRIX_ROWS; counter++)
    2fce:	1f 86       	std	Y+15, r1	; 0x0f
    2fd0:	2a c0       	rjmp	.+84     	; 0x3026 <Keypad_getValue+0x9a>
            {   // put all row pins in idle state
               if(key_obj->rows_idleLogic == GPIO_LOW)
    2fd2:	ed 89       	ldd	r30, Y+21	; 0x15
    2fd4:	fe 89       	ldd	r31, Y+22	; 0x16
    2fd6:	80 81       	ld	r24, Z
    2fd8:	88 23       	and	r24, r24
    2fda:	79 f4       	brne	.+30     	; 0x2ffa <Keypad_getValue+0x6e>
            	   state= GPIO_pin_write_logic(&(key_obj->keypad_rows_pins[counter]), GPIO_LOW);
    2fdc:	8d 89       	ldd	r24, Y+21	; 0x15
    2fde:	9e 89       	ldd	r25, Y+22	; 0x16
    2fe0:	9c 01       	movw	r18, r24
    2fe2:	2f 5f       	subi	r18, 0xFF	; 255
    2fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fe8:	88 2f       	mov	r24, r24
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	82 0f       	add	r24, r18
    2fee:	93 1f       	adc	r25, r19
    2ff0:	60 e0       	ldi	r22, 0x00	; 0
    2ff2:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <GPIO_pin_write_logic>
    2ff6:	8a 8b       	std	Y+18, r24	; 0x12
    2ff8:	13 c0       	rjmp	.+38     	; 0x3020 <Keypad_getValue+0x94>
               else if(key_obj->rows_idleLogic == GPIO_HIGH)
    2ffa:	ed 89       	ldd	r30, Y+21	; 0x15
    2ffc:	fe 89       	ldd	r31, Y+22	; 0x16
    2ffe:	80 81       	ld	r24, Z
    3000:	81 30       	cpi	r24, 0x01	; 1
    3002:	71 f4       	brne	.+28     	; 0x3020 <Keypad_getValue+0x94>
            	   state= GPIO_pin_write_logic(&(key_obj->keypad_rows_pins[counter]), GPIO_HIGH);
    3004:	8d 89       	ldd	r24, Y+21	; 0x15
    3006:	9e 89       	ldd	r25, Y+22	; 0x16
    3008:	9c 01       	movw	r18, r24
    300a:	2f 5f       	subi	r18, 0xFF	; 255
    300c:	3f 4f       	sbci	r19, 0xFF	; 255
    300e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3010:	88 2f       	mov	r24, r24
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	82 0f       	add	r24, r18
    3016:	93 1f       	adc	r25, r19
    3018:	61 e0       	ldi	r22, 0x01	; 1
    301a:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <GPIO_pin_write_logic>
    301e:	8a 8b       	std	Y+18, r24	; 0x12
    {
    	while(1)
    	{
        for(row_counter=ZERO_INIT; row_counter<KEYPAD_MATRIX_ROWS; row_counter++)
        {            
            for(counter=ZERO_INIT; counter<KEYPAD_MATRIX_ROWS; counter++)
    3020:	8f 85       	ldd	r24, Y+15	; 0x0f
    3022:	8f 5f       	subi	r24, 0xFF	; 255
    3024:	8f 87       	std	Y+15, r24	; 0x0f
    3026:	8f 85       	ldd	r24, Y+15	; 0x0f
    3028:	84 30       	cpi	r24, 0x04	; 4
    302a:	98 f2       	brcs	.-90     	; 0x2fd2 <Keypad_getValue+0x46>
            	   state= GPIO_pin_write_logic(&(key_obj->keypad_rows_pins[counter]), GPIO_LOW);
               else if(key_obj->rows_idleLogic == GPIO_HIGH)
            	   state= GPIO_pin_write_logic(&(key_obj->keypad_rows_pins[counter]), GPIO_HIGH);
            }
            // activate only one row and scan all columns
            if(key_obj->rows_idleLogic == GPIO_LOW)
    302c:	ed 89       	ldd	r30, Y+21	; 0x15
    302e:	fe 89       	ldd	r31, Y+22	; 0x16
    3030:	80 81       	ld	r24, Z
    3032:	88 23       	and	r24, r24
    3034:	79 f4       	brne	.+30     	; 0x3054 <Keypad_getValue+0xc8>
				   {state= GPIO_pin_write_logic(&(key_obj->keypad_rows_pins[row_counter]), GPIO_HIGH);}
    3036:	8d 89       	ldd	r24, Y+21	; 0x15
    3038:	9e 89       	ldd	r25, Y+22	; 0x16
    303a:	9c 01       	movw	r18, r24
    303c:	2f 5f       	subi	r18, 0xFF	; 255
    303e:	3f 4f       	sbci	r19, 0xFF	; 255
    3040:	89 89       	ldd	r24, Y+17	; 0x11
    3042:	88 2f       	mov	r24, r24
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	82 0f       	add	r24, r18
    3048:	93 1f       	adc	r25, r19
    304a:	61 e0       	ldi	r22, 0x01	; 1
    304c:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <GPIO_pin_write_logic>
    3050:	8a 8b       	std	Y+18, r24	; 0x12
    3052:	13 c0       	rjmp	.+38     	; 0x307a <Keypad_getValue+0xee>
			   else if(key_obj->rows_idleLogic == GPIO_HIGH)
    3054:	ed 89       	ldd	r30, Y+21	; 0x15
    3056:	fe 89       	ldd	r31, Y+22	; 0x16
    3058:	80 81       	ld	r24, Z
    305a:	81 30       	cpi	r24, 0x01	; 1
    305c:	71 f4       	brne	.+28     	; 0x307a <Keypad_getValue+0xee>
				   {state= GPIO_pin_write_logic(&(key_obj->keypad_rows_pins[row_counter]), GPIO_LOW);}
    305e:	8d 89       	ldd	r24, Y+21	; 0x15
    3060:	9e 89       	ldd	r25, Y+22	; 0x16
    3062:	9c 01       	movw	r18, r24
    3064:	2f 5f       	subi	r18, 0xFF	; 255
    3066:	3f 4f       	sbci	r19, 0xFF	; 255
    3068:	89 89       	ldd	r24, Y+17	; 0x11
    306a:	88 2f       	mov	r24, r24
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	82 0f       	add	r24, r18
    3070:	93 1f       	adc	r25, r19
    3072:	60 e0       	ldi	r22, 0x00	; 0
    3074:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <GPIO_pin_write_logic>
    3078:	8a 8b       	std	Y+18, r24	; 0x12
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	a0 e2       	ldi	r26, 0x20	; 32
    3080:	b1 e4       	ldi	r27, 0x41	; 65
    3082:	8b 87       	std	Y+11, r24	; 0x0b
    3084:	9c 87       	std	Y+12, r25	; 0x0c
    3086:	ad 87       	std	Y+13, r26	; 0x0d
    3088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    308a:	6b 85       	ldd	r22, Y+11	; 0x0b
    308c:	7c 85       	ldd	r23, Y+12	; 0x0c
    308e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3090:	9e 85       	ldd	r25, Y+14	; 0x0e
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	4a ef       	ldi	r20, 0xFA	; 250
    3098:	54 e4       	ldi	r21, 0x44	; 68
    309a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	8f 83       	std	Y+7, r24	; 0x07
    30a4:	98 87       	std	Y+8, r25	; 0x08
    30a6:	a9 87       	std	Y+9, r26	; 0x09
    30a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30aa:	6f 81       	ldd	r22, Y+7	; 0x07
    30ac:	78 85       	ldd	r23, Y+8	; 0x08
    30ae:	89 85       	ldd	r24, Y+9	; 0x09
    30b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	40 e8       	ldi	r20, 0x80	; 128
    30b8:	5f e3       	ldi	r21, 0x3F	; 63
    30ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30be:	88 23       	and	r24, r24
    30c0:	2c f4       	brge	.+10     	; 0x30cc <Keypad_getValue+0x140>
		__ticks = 1;
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	9e 83       	std	Y+6, r25	; 0x06
    30c8:	8d 83       	std	Y+5, r24	; 0x05
    30ca:	3f c0       	rjmp	.+126    	; 0x314a <Keypad_getValue+0x1be>
	else if (__tmp > 65535)
    30cc:	6f 81       	ldd	r22, Y+7	; 0x07
    30ce:	78 85       	ldd	r23, Y+8	; 0x08
    30d0:	89 85       	ldd	r24, Y+9	; 0x09
    30d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	3f ef       	ldi	r19, 0xFF	; 255
    30d8:	4f e7       	ldi	r20, 0x7F	; 127
    30da:	57 e4       	ldi	r21, 0x47	; 71
    30dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30e0:	18 16       	cp	r1, r24
    30e2:	4c f5       	brge	.+82     	; 0x3136 <Keypad_getValue+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	40 e2       	ldi	r20, 0x20	; 32
    30f2:	51 e4       	ldi	r21, 0x41	; 65
    30f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	bc 01       	movw	r22, r24
    30fe:	cd 01       	movw	r24, r26
    3100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	9e 83       	std	Y+6, r25	; 0x06
    310a:	8d 83       	std	Y+5, r24	; 0x05
    310c:	0f c0       	rjmp	.+30     	; 0x312c <Keypad_getValue+0x1a0>
    310e:	88 ec       	ldi	r24, 0xC8	; 200
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	9c 83       	std	Y+4, r25	; 0x04
    3114:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3116:	8b 81       	ldd	r24, Y+3	; 0x03
    3118:	9c 81       	ldd	r25, Y+4	; 0x04
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	f1 f7       	brne	.-4      	; 0x311a <Keypad_getValue+0x18e>
    311e:	9c 83       	std	Y+4, r25	; 0x04
    3120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3122:	8d 81       	ldd	r24, Y+5	; 0x05
    3124:	9e 81       	ldd	r25, Y+6	; 0x06
    3126:	01 97       	sbiw	r24, 0x01	; 1
    3128:	9e 83       	std	Y+6, r25	; 0x06
    312a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    312c:	8d 81       	ldd	r24, Y+5	; 0x05
    312e:	9e 81       	ldd	r25, Y+6	; 0x06
    3130:	00 97       	sbiw	r24, 0x00	; 0
    3132:	69 f7       	brne	.-38     	; 0x310e <Keypad_getValue+0x182>
    3134:	14 c0       	rjmp	.+40     	; 0x315e <Keypad_getValue+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3136:	6f 81       	ldd	r22, Y+7	; 0x07
    3138:	78 85       	ldd	r23, Y+8	; 0x08
    313a:	89 85       	ldd	r24, Y+9	; 0x09
    313c:	9a 85       	ldd	r25, Y+10	; 0x0a
    313e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	9e 83       	std	Y+6, r25	; 0x06
    3148:	8d 83       	std	Y+5, r24	; 0x05
    314a:	8d 81       	ldd	r24, Y+5	; 0x05
    314c:	9e 81       	ldd	r25, Y+6	; 0x06
    314e:	9a 83       	std	Y+2, r25	; 0x02
    3150:	89 83       	std	Y+1, r24	; 0x01
    3152:	89 81       	ldd	r24, Y+1	; 0x01
    3154:	9a 81       	ldd	r25, Y+2	; 0x02
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	f1 f7       	brne	.-4      	; 0x3156 <Keypad_getValue+0x1ca>
    315a:	9a 83       	std	Y+2, r25	; 0x02
    315c:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(10);
            for(col_counter=ZERO_INIT; col_counter<KEYPAD_MATRIX_COLS; col_counter++)
    315e:	18 8a       	std	Y+16, r1	; 0x10
    3160:	58 c0       	rjmp	.+176    	; 0x3212 <Keypad_getValue+0x286>
            {
                state= GPIO_pin_read_logic(&(key_obj->keypad_cols_pins[col_counter]), &col_logic);
    3162:	8d 89       	ldd	r24, Y+21	; 0x15
    3164:	9e 89       	ldd	r25, Y+22	; 0x16
    3166:	9c 01       	movw	r18, r24
    3168:	2b 5f       	subi	r18, 0xFB	; 251
    316a:	3f 4f       	sbci	r19, 0xFF	; 255
    316c:	88 89       	ldd	r24, Y+16	; 0x10
    316e:	88 2f       	mov	r24, r24
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	82 0f       	add	r24, r18
    3174:	93 1f       	adc	r25, r19
    3176:	9e 01       	movw	r18, r28
    3178:	2c 5e       	subi	r18, 0xEC	; 236
    317a:	3f 4f       	sbci	r19, 0xFF	; 255
    317c:	b9 01       	movw	r22, r18
    317e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <GPIO_pin_read_logic>
    3182:	8a 8b       	std	Y+18, r24	; 0x12
                if(col_logic == !key_obj->rows_idleLogic)
    3184:	8c 89       	ldd	r24, Y+20	; 0x14
    3186:	28 2f       	mov	r18, r24
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	3d 8f       	std	Y+29, r19	; 0x1d
    318c:	2c 8f       	std	Y+28, r18	; 0x1c
    318e:	ed 89       	ldd	r30, Y+21	; 0x15
    3190:	fe 89       	ldd	r31, Y+22	; 0x16
    3192:	80 81       	ld	r24, Z
    3194:	1b 8e       	std	Y+27, r1	; 0x1b
    3196:	1a 8e       	std	Y+26, r1	; 0x1a
    3198:	88 23       	and	r24, r24
    319a:	21 f4       	brne	.+8      	; 0x31a4 <Keypad_getValue+0x218>
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	9b 8f       	std	Y+27, r25	; 0x1b
    31a2:	8a 8f       	std	Y+26, r24	; 0x1a
    31a4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    31a6:	3d 8d       	ldd	r19, Y+29	; 0x1d
    31a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31ac:	28 17       	cp	r18, r24
    31ae:	39 07       	cpc	r19, r25
    31b0:	69 f5       	brne	.+90     	; 0x320c <Keypad_getValue+0x280>
                {   // Button has been pressed, saving pressed value
                    *key_value = btn_values[row_counter][col_counter];
    31b2:	89 89       	ldd	r24, Y+17	; 0x11
    31b4:	48 2f       	mov	r20, r24
    31b6:	50 e0       	ldi	r21, 0x00	; 0
    31b8:	88 89       	ldd	r24, Y+16	; 0x10
    31ba:	28 2f       	mov	r18, r24
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	ca 01       	movw	r24, r20
    31c0:	88 0f       	add	r24, r24
    31c2:	99 1f       	adc	r25, r25
    31c4:	88 0f       	add	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	82 0f       	add	r24, r18
    31ca:	93 1f       	adc	r25, r19
    31cc:	fc 01       	movw	r30, r24
    31ce:	e9 59       	subi	r30, 0x99	; 153
    31d0:	fd 4f       	sbci	r31, 0xFD	; 253
    31d2:	80 81       	ld	r24, Z
    31d4:	ef 89       	ldd	r30, Y+23	; 0x17
    31d6:	f8 8d       	ldd	r31, Y+24	; 0x18
    31d8:	80 83       	st	Z, r24
                    ret = E_OK;
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	8b 8b       	std	Y+19, r24	; 0x13
                    // ensure that user has released the key
                    do{
                    	state= GPIO_pin_read_logic(&(key_obj->keypad_cols_pins[col_counter]), &col_logic);
    31de:	8d 89       	ldd	r24, Y+21	; 0x15
    31e0:	9e 89       	ldd	r25, Y+22	; 0x16
    31e2:	9c 01       	movw	r18, r24
    31e4:	2b 5f       	subi	r18, 0xFB	; 251
    31e6:	3f 4f       	sbci	r19, 0xFF	; 255
    31e8:	88 89       	ldd	r24, Y+16	; 0x10
    31ea:	88 2f       	mov	r24, r24
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	82 0f       	add	r24, r18
    31f0:	93 1f       	adc	r25, r19
    31f2:	9e 01       	movw	r18, r28
    31f4:	2c 5e       	subi	r18, 0xEC	; 236
    31f6:	3f 4f       	sbci	r19, 0xFF	; 255
    31f8:	b9 01       	movw	r22, r18
    31fa:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <GPIO_pin_read_logic>
    31fe:	8a 8b       	std	Y+18, r24	; 0x12
                    }while(GPIO_HIGH == col_logic);
    3200:	8c 89       	ldd	r24, Y+20	; 0x14
    3202:	81 30       	cpi	r24, 0x01	; 1
    3204:	61 f3       	breq	.-40     	; 0x31de <Keypad_getValue+0x252>
                    return ret;
    3206:	9b 89       	ldd	r25, Y+19	; 0x13
    3208:	99 8f       	std	Y+25, r25	; 0x19
    320a:	0f c0       	rjmp	.+30     	; 0x322a <Keypad_getValue+0x29e>
            if(key_obj->rows_idleLogic == GPIO_LOW)
				   {state= GPIO_pin_write_logic(&(key_obj->keypad_rows_pins[row_counter]), GPIO_HIGH);}
			   else if(key_obj->rows_idleLogic == GPIO_HIGH)
				   {state= GPIO_pin_write_logic(&(key_obj->keypad_rows_pins[row_counter]), GPIO_LOW);}
            _delay_ms(10);
            for(col_counter=ZERO_INIT; col_counter<KEYPAD_MATRIX_COLS; col_counter++)
    320c:	88 89       	ldd	r24, Y+16	; 0x10
    320e:	8f 5f       	subi	r24, 0xFF	; 255
    3210:	88 8b       	std	Y+16, r24	; 0x10
    3212:	88 89       	ldd	r24, Y+16	; 0x10
    3214:	84 30       	cpi	r24, 0x04	; 4
    3216:	08 f4       	brcc	.+2      	; 0x321a <Keypad_getValue+0x28e>
    3218:	a4 cf       	rjmp	.-184    	; 0x3162 <Keypad_getValue+0x1d6>
    }
    else
    {
    	while(1)
    	{
        for(row_counter=ZERO_INIT; row_counter<KEYPAD_MATRIX_ROWS; row_counter++)
    321a:	89 89       	ldd	r24, Y+17	; 0x11
    321c:	8f 5f       	subi	r24, 0xFF	; 255
    321e:	89 8b       	std	Y+17, r24	; 0x11
    3220:	89 89       	ldd	r24, Y+17	; 0x11
    3222:	84 30       	cpi	r24, 0x04	; 4
    3224:	08 f4       	brcc	.+2      	; 0x3228 <Keypad_getValue+0x29c>
    3226:	d3 ce       	rjmp	.-602    	; 0x2fce <Keypad_getValue+0x42>
    3228:	d0 ce       	rjmp	.-608    	; 0x2fca <Keypad_getValue+0x3e>
                    }while(GPIO_HIGH == col_logic);
                    return ret;
                }
            }
    	}
    	}
    322a:	89 8d       	ldd	r24, Y+25	; 0x19
    }
    return ret; 
}
    322c:	6d 96       	adiw	r28, 0x1d	; 29
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	cd bf       	out	0x3d, r28	; 61
    3238:	cf 91       	pop	r28
    323a:	df 91       	pop	r29
    323c:	08 95       	ret

0000323e <HAL_init>:
};

extern Std_ReturnType ret;

Std_ReturnType HAL_init(void)
{
    323e:	df 93       	push	r29
    3240:	cf 93       	push	r28
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
	ret = lcd_4bit_initialize(&g_lcdObj_4bitMode);
    3246:	80 e8       	ldi	r24, 0x80	; 128
    3248:	92 e0       	ldi	r25, 0x02	; 2
    324a:	0e 94 c8 10 	call	0x2190	; 0x2190 <lcd_4bit_initialize>
    324e:	80 93 57 02 	sts	0x0257, r24
	ret = Keypad_init(&g_keypadObj);
    3252:	87 e7       	ldi	r24, 0x77	; 119
    3254:	92 e0       	ldi	r25, 0x02	; 2
    3256:	0e 94 81 17 	call	0x2f02	; 0x2f02 <Keypad_init>
    325a:	80 93 57 02 	sts	0x0257, r24
	return ret;
    325e:	80 91 57 02 	lds	r24, 0x0257
}
    3262:	cf 91       	pop	r28
    3264:	df 91       	pop	r29
    3266:	08 95       	ret

00003268 <main>:
uint8 g_userPassword_len = 0;
uint8 g_keyValue = 0;
volatile uint8 g_doorFlag = 0;

int main(void)
{
    3268:	df 93       	push	r29
    326a:	cf 93       	push	r28
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
	application_initialize();
    3270:	0e 94 c8 19 	call	0x3390	; 0x3390 <application_initialize>

	ret = USART_Send_Byte_Blocking(0x00);	// command to initiate the communication
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	0e 94 6c 07 	call	0xed8	; 0xed8 <USART_Send_Byte_Blocking>
    327a:	80 93 57 02 	sts	0x0257, r24

	// check if there is stored password or not
	ret = USART_Receive_Byte_Blocking(&g_uartObj1, &g_uartCode);
    327e:	8c e4       	ldi	r24, 0x4C	; 76
    3280:	92 e0       	ldi	r25, 0x02	; 2
    3282:	28 e8       	ldi	r18, 0x88	; 136
    3284:	32 e0       	ldi	r19, 0x02	; 2
    3286:	b9 01       	movw	r22, r18
    3288:	0e 94 9e 07 	call	0xf3c	; 0xf3c <USART_Receive_Byte_Blocking>
    328c:	80 93 57 02 	sts	0x0257, r24
	if(0x00 == g_uartCode)
    3290:	80 91 88 02 	lds	r24, 0x0288
    3294:	88 23       	and	r24, r24
    3296:	51 f4       	brne	.+20     	; 0x32ac <main+0x44>
	{	// view system initial password then option
		ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 2, 1, "Sys. Password= 0000");
    3298:	80 e8       	ldi	r24, 0x80	; 128
    329a:	92 e0       	ldi	r25, 0x02	; 2
    329c:	20 e6       	ldi	r18, 0x60	; 96
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	62 e0       	ldi	r22, 0x02	; 2
    32a2:	41 e0       	ldi	r20, 0x01	; 1
    32a4:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    32a8:	80 93 57 02 	sts	0x0257, r24
	{	// view options direct

	}
	while(1)
	{
		display_options();
    32ac:	0e 94 ba 1b 	call	0x3774	; 0x3774 <display_options>
		g_keyValue = 0;
    32b0:	10 92 93 02 	sts	0x0293, r1
		// get option from user
		do{
			ret = Keypad_getValue(&g_keypadObj, &g_keyValue);
    32b4:	87 e7       	ldi	r24, 0x77	; 119
    32b6:	92 e0       	ldi	r25, 0x02	; 2
    32b8:	23 e9       	ldi	r18, 0x93	; 147
    32ba:	32 e0       	ldi	r19, 0x02	; 2
    32bc:	b9 01       	movw	r22, r18
    32be:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <Keypad_getValue>
    32c2:	80 93 57 02 	sts	0x0257, r24
		}while(!(g_keyValue >= '1' && g_keyValue <= '2'));
    32c6:	80 91 93 02 	lds	r24, 0x0293
    32ca:	81 33       	cpi	r24, 0x31	; 49
    32cc:	98 f3       	brcs	.-26     	; 0x32b4 <main+0x4c>
    32ce:	80 91 93 02 	lds	r24, 0x0293
    32d2:	83 33       	cpi	r24, 0x33	; 51
    32d4:	78 f7       	brcc	.-34     	; 0x32b4 <main+0x4c>
		g_userOption = g_keyValue;
    32d6:	80 91 93 02 	lds	r24, 0x0293
    32da:	80 93 89 02 	sts	0x0289, r24
		ret = lcd_4bit_send_command(&g_lcdObj_4bitMode, _LCD_CLEAR);
    32de:	80 e8       	ldi	r24, 0x80	; 128
    32e0:	92 e0       	ldi	r25, 0x02	; 2
    32e2:	61 e0       	ldi	r22, 0x01	; 1
    32e4:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    32e8:	80 93 57 02 	sts	0x0257, r24
		ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode,1, 1, "Enter pass: ");
    32ec:	80 e8       	ldi	r24, 0x80	; 128
    32ee:	92 e0       	ldi	r25, 0x02	; 2
    32f0:	24 e7       	ldi	r18, 0x74	; 116
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	61 e0       	ldi	r22, 0x01	; 1
    32f6:	41 e0       	ldi	r20, 0x01	; 1
    32f8:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    32fc:	80 93 57 02 	sts	0x0257, r24
		ret = USART_Send_Byte_Blocking(0xAA);	// prepare processing unit for receiving user password
    3300:	8a ea       	ldi	r24, 0xAA	; 170
    3302:	0e 94 6c 07 	call	0xed8	; 0xed8 <USART_Send_Byte_Blocking>
    3306:	80 93 57 02 	sts	0x0257, r24
		g_keyValue = 0;
    330a:	10 92 93 02 	sts	0x0293, r1
		get_password_from_user();
    330e:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <get_password_from_user>
		// send password to Processing MCU
		ret = USART_sendString_Blocking(&g_userPassword[0]);
    3312:	8a e8       	ldi	r24, 0x8A	; 138
    3314:	92 e0       	ldi	r25, 0x02	; 2
    3316:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <USART_sendString_Blocking>
    331a:	80 93 57 02 	sts	0x0257, r24
		ret = USART_Send_Byte_Blocking('#');	// to end process of sending string
    331e:	83 e2       	ldi	r24, 0x23	; 35
    3320:	0e 94 6c 07 	call	0xed8	; 0xed8 <USART_Send_Byte_Blocking>
    3324:	80 93 57 02 	sts	0x0257, r24
		ret = USART_Send_Byte_Blocking(g_userPassword_len-1);
    3328:	80 91 92 02 	lds	r24, 0x0292
    332c:	81 50       	subi	r24, 0x01	; 1
    332e:	0e 94 6c 07 	call	0xed8	; 0xed8 <USART_Send_Byte_Blocking>
    3332:	80 93 57 02 	sts	0x0257, r24
		// receive validation result
		ret = USART_Receive_Byte_Blocking(&g_uartObj1, &g_uartCode);
    3336:	8c e4       	ldi	r24, 0x4C	; 76
    3338:	92 e0       	ldi	r25, 0x02	; 2
    333a:	28 e8       	ldi	r18, 0x88	; 136
    333c:	32 e0       	ldi	r19, 0x02	; 2
    333e:	b9 01       	movw	r22, r18
    3340:	0e 94 9e 07 	call	0xf3c	; 0xf3c <USART_Receive_Byte_Blocking>
    3344:	80 93 57 02 	sts	0x0257, r24
		if(g_uartCode == 0xA0)
    3348:	80 91 88 02 	lds	r24, 0x0288
    334c:	80 3a       	cpi	r24, 0xA0	; 160
    334e:	31 f4       	brne	.+12     	; 0x335c <main+0xf4>
		{	// validation failed
			_delay_sec = 6;					// delay system for 6 seconds
    3350:	86 e0       	ldi	r24, 0x06	; 6
    3352:	80 93 58 02 	sts	0x0258, r24
			invalid_password_handler();
    3356:	0e 94 cd 1c 	call	0x399a	; 0x399a <invalid_password_handler>
    335a:	a8 cf       	rjmp	.-176    	; 0x32ac <main+0x44>
		}
		else if(g_uartCode == 0xA1)
    335c:	80 91 88 02 	lds	r24, 0x0288
    3360:	81 3a       	cpi	r24, 0xA1	; 161
    3362:	09 f0       	breq	.+2      	; 0x3366 <main+0xfe>
    3364:	a3 cf       	rjmp	.-186    	; 0x32ac <main+0x44>
		{	// validation passed
			//send user option
			ret = USART_Send_Byte_Blocking(g_userOption);
    3366:	80 91 89 02 	lds	r24, 0x0289
    336a:	0e 94 6c 07 	call	0xed8	; 0xed8 <USART_Send_Byte_Blocking>
    336e:	80 93 57 02 	sts	0x0257, r24
			if('1' == g_userOption)
    3372:	80 91 89 02 	lds	r24, 0x0289
    3376:	81 33       	cpi	r24, 0x31	; 49
    3378:	19 f4       	brne	.+6      	; 0x3380 <main+0x118>
			{	// option: open door
				door_option_handler();
    337a:	0e 94 1f 1c 	call	0x383e	; 0x383e <door_option_handler>
    337e:	96 cf       	rjmp	.-212    	; 0x32ac <main+0x44>
			}
			else if('2' == g_userOption)
    3380:	80 91 89 02 	lds	r24, 0x0289
    3384:	82 33       	cpi	r24, 0x32	; 50
    3386:	09 f0       	breq	.+2      	; 0x338a <main+0x122>
    3388:	91 cf       	rjmp	.-222    	; 0x32ac <main+0x44>
			{
				chnage_password_option_handler();
    338a:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <chnage_password_option_handler>
    338e:	8e cf       	rjmp	.-228    	; 0x32ac <main+0x44>

00003390 <application_initialize>:
	return 0;
}


void application_initialize(void)
{
    3390:	df 93       	push	r29
    3392:	cf 93       	push	r28
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
	ret = HAL_init();
    3398:	0e 94 1f 19 	call	0x323e	; 0x323e <HAL_init>
    339c:	80 93 57 02 	sts	0x0257, r24
	ret = MCAL_init();
    33a0:	0e 94 b9 10 	call	0x2172	; 0x2172 <MCAL_init>
    33a4:	80 93 57 02 	sts	0x0257, r24
}
    33a8:	cf 91       	pop	r28
    33aa:	df 91       	pop	r29
    33ac:	08 95       	ret

000033ae <tmr_callBackNotify>:


void tmr_callBackNotify(void)
{
    33ae:	df 93       	push	r29
    33b0:	cf 93       	push	r28
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
	_delay_sec--;
    33b6:	80 91 58 02 	lds	r24, 0x0258
    33ba:	81 50       	subi	r24, 0x01	; 1
    33bc:	80 93 58 02 	sts	0x0258, r24
	if(!_delay_sec)
    33c0:	80 91 58 02 	lds	r24, 0x0258
    33c4:	88 23       	and	r24, r24
    33c6:	31 f4       	brne	.+12     	; 0x33d4 <tmr_callBackNotify+0x26>
	{
		ret = timer1_Deinit(&g_tmr1Obj);
    33c8:	83 e6       	ldi	r24, 0x63	; 99
    33ca:	92 e0       	ldi	r25, 0x02	; 2
    33cc:	0e 94 12 0a 	call	0x1424	; 0x1424 <timer1_Deinit>
    33d0:	80 93 57 02 	sts	0x0257, r24
	}
	ret = timer1_write_counter_value(&g_tmr1Obj, 34286);
    33d4:	83 e6       	ldi	r24, 0x63	; 99
    33d6:	92 e0       	ldi	r25, 0x02	; 2
    33d8:	6e ee       	ldi	r22, 0xEE	; 238
    33da:	75 e8       	ldi	r23, 0x85	; 133
    33dc:	0e 94 36 0a 	call	0x146c	; 0x146c <timer1_write_counter_value>
    33e0:	80 93 57 02 	sts	0x0257, r24
}
    33e4:	cf 91       	pop	r28
    33e6:	df 91       	pop	r29
    33e8:	08 95       	ret

000033ea <display_door_msg>:

void display_door_msg(void)
{
    33ea:	df 93       	push	r29
    33ec:	cf 93       	push	r28
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
	ret = lcd_4bit_send_command(&g_lcdObj_4bitMode, _LCD_CLEAR);
    33f2:	80 e8       	ldi	r24, 0x80	; 128
    33f4:	92 e0       	ldi	r25, 0x02	; 2
    33f6:	61 e0       	ldi	r22, 0x01	; 1
    33f8:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    33fc:	80 93 57 02 	sts	0x0257, r24
	ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 1, 1, "Door Lock Sys.");
    3400:	80 e8       	ldi	r24, 0x80	; 128
    3402:	92 e0       	ldi	r25, 0x02	; 2
    3404:	21 e8       	ldi	r18, 0x81	; 129
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	61 e0       	ldi	r22, 0x01	; 1
    340a:	41 e0       	ldi	r20, 0x01	; 1
    340c:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    3410:	80 93 57 02 	sts	0x0257, r24
	if(g_doorFlag == 0){
    3414:	80 91 94 02 	lds	r24, 0x0294
    3418:	88 23       	and	r24, r24
    341a:	59 f4       	brne	.+22     	; 0x3432 <display_door_msg+0x48>
		ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 2, 4, "Door is opening!");
    341c:	80 e8       	ldi	r24, 0x80	; 128
    341e:	92 e0       	ldi	r25, 0x02	; 2
    3420:	20 e9       	ldi	r18, 0x90	; 144
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	62 e0       	ldi	r22, 0x02	; 2
    3426:	44 e0       	ldi	r20, 0x04	; 4
    3428:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    342c:	80 93 57 02 	sts	0x0257, r24
    3430:	0e c0       	rjmp	.+28     	; 0x344e <display_door_msg+0x64>
	}
	else if(g_doorFlag == 1){
    3432:	80 91 94 02 	lds	r24, 0x0294
    3436:	81 30       	cpi	r24, 0x01	; 1
    3438:	51 f4       	brne	.+20     	; 0x344e <display_door_msg+0x64>
		ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 2, 4, "Door is closing!");
    343a:	80 e8       	ldi	r24, 0x80	; 128
    343c:	92 e0       	ldi	r25, 0x02	; 2
    343e:	21 ea       	ldi	r18, 0xA1	; 161
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	62 e0       	ldi	r22, 0x02	; 2
    3444:	44 e0       	ldi	r20, 0x04	; 4
    3446:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    344a:	80 93 57 02 	sts	0x0257, r24
	}
}
    344e:	cf 91       	pop	r28
    3450:	df 91       	pop	r29
    3452:	08 95       	ret

00003454 <display_alarm_msg>:

void display_alarm_msg(void)
{
    3454:	df 93       	push	r29
    3456:	cf 93       	push	r28
    3458:	cd b7       	in	r28, 0x3d	; 61
    345a:	de b7       	in	r29, 0x3e	; 62
    345c:	6c 97       	sbiw	r28, 0x1c	; 28
    345e:	0f b6       	in	r0, 0x3f	; 63
    3460:	f8 94       	cli
    3462:	de bf       	out	0x3e, r29	; 62
    3464:	0f be       	out	0x3f, r0	; 63
    3466:	cd bf       	out	0x3d, r28	; 61
	ret = lcd_4bit_send_command(&g_lcdObj_4bitMode, _LCD_CLEAR);
    3468:	80 e8       	ldi	r24, 0x80	; 128
    346a:	92 e0       	ldi	r25, 0x02	; 2
    346c:	61 e0       	ldi	r22, 0x01	; 1
    346e:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    3472:	80 93 57 02 	sts	0x0257, r24
	ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 1, 1, "Door Lock Sys.");
    3476:	80 e8       	ldi	r24, 0x80	; 128
    3478:	92 e0       	ldi	r25, 0x02	; 2
    347a:	21 e8       	ldi	r18, 0x81	; 129
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	61 e0       	ldi	r22, 0x01	; 1
    3480:	41 e0       	ldi	r20, 0x01	; 1
    3482:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    3486:	80 93 57 02 	sts	0x0257, r24
	ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 2, 1, "Invalid Password!!");
    348a:	80 e8       	ldi	r24, 0x80	; 128
    348c:	92 e0       	ldi	r25, 0x02	; 2
    348e:	22 eb       	ldi	r18, 0xB2	; 178
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	62 e0       	ldi	r22, 0x02	; 2
    3494:	41 e0       	ldi	r20, 0x01	; 1
    3496:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    349a:	80 93 57 02 	sts	0x0257, r24
    349e:	ff c0       	rjmp	.+510    	; 0x369e <display_alarm_msg+0x24a>
	// flashing alarm!
	while(_delay_sec)
	{
		ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 3, 9,"Alarm !!");
    34a0:	80 e8       	ldi	r24, 0x80	; 128
    34a2:	92 e0       	ldi	r25, 0x02	; 2
    34a4:	25 ec       	ldi	r18, 0xC5	; 197
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	63 e0       	ldi	r22, 0x03	; 3
    34aa:	49 e0       	ldi	r20, 0x09	; 9
    34ac:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    34b0:	80 93 57 02 	sts	0x0257, r24
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	aa e7       	ldi	r26, 0x7A	; 122
    34ba:	b3 e4       	ldi	r27, 0x43	; 67
    34bc:	89 8f       	std	Y+25, r24	; 0x19
    34be:	9a 8f       	std	Y+26, r25	; 0x1a
    34c0:	ab 8f       	std	Y+27, r26	; 0x1b
    34c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34c4:	69 8d       	ldd	r22, Y+25	; 0x19
    34c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	4a ef       	ldi	r20, 0xFA	; 250
    34d2:	54 e4       	ldi	r21, 0x44	; 68
    34d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	8d 8b       	std	Y+21, r24	; 0x15
    34de:	9e 8b       	std	Y+22, r25	; 0x16
    34e0:	af 8b       	std	Y+23, r26	; 0x17
    34e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34e4:	6d 89       	ldd	r22, Y+21	; 0x15
    34e6:	7e 89       	ldd	r23, Y+22	; 0x16
    34e8:	8f 89       	ldd	r24, Y+23	; 0x17
    34ea:	98 8d       	ldd	r25, Y+24	; 0x18
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	40 e8       	ldi	r20, 0x80	; 128
    34f2:	5f e3       	ldi	r21, 0x3F	; 63
    34f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34f8:	88 23       	and	r24, r24
    34fa:	2c f4       	brge	.+10     	; 0x3506 <display_alarm_msg+0xb2>
		__ticks = 1;
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	9c 8b       	std	Y+20, r25	; 0x14
    3502:	8b 8b       	std	Y+19, r24	; 0x13
    3504:	3f c0       	rjmp	.+126    	; 0x3584 <display_alarm_msg+0x130>
	else if (__tmp > 65535)
    3506:	6d 89       	ldd	r22, Y+21	; 0x15
    3508:	7e 89       	ldd	r23, Y+22	; 0x16
    350a:	8f 89       	ldd	r24, Y+23	; 0x17
    350c:	98 8d       	ldd	r25, Y+24	; 0x18
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	3f ef       	ldi	r19, 0xFF	; 255
    3512:	4f e7       	ldi	r20, 0x7F	; 127
    3514:	57 e4       	ldi	r21, 0x47	; 71
    3516:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    351a:	18 16       	cp	r1, r24
    351c:	4c f5       	brge	.+82     	; 0x3570 <display_alarm_msg+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    351e:	69 8d       	ldd	r22, Y+25	; 0x19
    3520:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3522:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3524:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	40 e2       	ldi	r20, 0x20	; 32
    352c:	51 e4       	ldi	r21, 0x41	; 65
    352e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	bc 01       	movw	r22, r24
    3538:	cd 01       	movw	r24, r26
    353a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	9c 8b       	std	Y+20, r25	; 0x14
    3544:	8b 8b       	std	Y+19, r24	; 0x13
    3546:	0f c0       	rjmp	.+30     	; 0x3566 <display_alarm_msg+0x112>
    3548:	88 ec       	ldi	r24, 0xC8	; 200
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	9a 8b       	std	Y+18, r25	; 0x12
    354e:	89 8b       	std	Y+17, r24	; 0x11
    3550:	89 89       	ldd	r24, Y+17	; 0x11
    3552:	9a 89       	ldd	r25, Y+18	; 0x12
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	f1 f7       	brne	.-4      	; 0x3554 <display_alarm_msg+0x100>
    3558:	9a 8b       	std	Y+18, r25	; 0x12
    355a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    355c:	8b 89       	ldd	r24, Y+19	; 0x13
    355e:	9c 89       	ldd	r25, Y+20	; 0x14
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	9c 8b       	std	Y+20, r25	; 0x14
    3564:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3566:	8b 89       	ldd	r24, Y+19	; 0x13
    3568:	9c 89       	ldd	r25, Y+20	; 0x14
    356a:	00 97       	sbiw	r24, 0x00	; 0
    356c:	69 f7       	brne	.-38     	; 0x3548 <display_alarm_msg+0xf4>
    356e:	14 c0       	rjmp	.+40     	; 0x3598 <display_alarm_msg+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3570:	6d 89       	ldd	r22, Y+21	; 0x15
    3572:	7e 89       	ldd	r23, Y+22	; 0x16
    3574:	8f 89       	ldd	r24, Y+23	; 0x17
    3576:	98 8d       	ldd	r25, Y+24	; 0x18
    3578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	9c 8b       	std	Y+20, r25	; 0x14
    3582:	8b 8b       	std	Y+19, r24	; 0x13
    3584:	8b 89       	ldd	r24, Y+19	; 0x13
    3586:	9c 89       	ldd	r25, Y+20	; 0x14
    3588:	98 8b       	std	Y+16, r25	; 0x10
    358a:	8f 87       	std	Y+15, r24	; 0x0f
    358c:	8f 85       	ldd	r24, Y+15	; 0x0f
    358e:	98 89       	ldd	r25, Y+16	; 0x10
    3590:	01 97       	sbiw	r24, 0x01	; 1
    3592:	f1 f7       	brne	.-4      	; 0x3590 <display_alarm_msg+0x13c>
    3594:	98 8b       	std	Y+16, r25	; 0x10
    3596:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		ret = lcd_4bit_send_command(&g_lcdObj_4bitMode, DDRAM_START_ADDRESS + ROW3_OFFSET);
    3598:	80 e8       	ldi	r24, 0x80	; 128
    359a:	92 e0       	ldi	r25, 0x02	; 2
    359c:	64 e9       	ldi	r22, 0x94	; 148
    359e:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    35a2:	80 93 57 02 	sts	0x0257, r24
		ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 3, 9,  "        ");
    35a6:	80 e8       	ldi	r24, 0x80	; 128
    35a8:	92 e0       	ldi	r25, 0x02	; 2
    35aa:	2e ec       	ldi	r18, 0xCE	; 206
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	63 e0       	ldi	r22, 0x03	; 3
    35b0:	49 e0       	ldi	r20, 0x09	; 9
    35b2:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    35b6:	80 93 57 02 	sts	0x0257, r24
    35ba:	80 e0       	ldi	r24, 0x00	; 0
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	aa e7       	ldi	r26, 0x7A	; 122
    35c0:	b3 e4       	ldi	r27, 0x43	; 67
    35c2:	8b 87       	std	Y+11, r24	; 0x0b
    35c4:	9c 87       	std	Y+12, r25	; 0x0c
    35c6:	ad 87       	std	Y+13, r26	; 0x0d
    35c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    35cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    35ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	4a ef       	ldi	r20, 0xFA	; 250
    35d8:	54 e4       	ldi	r21, 0x44	; 68
    35da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	8f 83       	std	Y+7, r24	; 0x07
    35e4:	98 87       	std	Y+8, r25	; 0x08
    35e6:	a9 87       	std	Y+9, r26	; 0x09
    35e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35ea:	6f 81       	ldd	r22, Y+7	; 0x07
    35ec:	78 85       	ldd	r23, Y+8	; 0x08
    35ee:	89 85       	ldd	r24, Y+9	; 0x09
    35f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	40 e8       	ldi	r20, 0x80	; 128
    35f8:	5f e3       	ldi	r21, 0x3F	; 63
    35fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35fe:	88 23       	and	r24, r24
    3600:	2c f4       	brge	.+10     	; 0x360c <display_alarm_msg+0x1b8>
		__ticks = 1;
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	9e 83       	std	Y+6, r25	; 0x06
    3608:	8d 83       	std	Y+5, r24	; 0x05
    360a:	3f c0       	rjmp	.+126    	; 0x368a <display_alarm_msg+0x236>
	else if (__tmp > 65535)
    360c:	6f 81       	ldd	r22, Y+7	; 0x07
    360e:	78 85       	ldd	r23, Y+8	; 0x08
    3610:	89 85       	ldd	r24, Y+9	; 0x09
    3612:	9a 85       	ldd	r25, Y+10	; 0x0a
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	3f ef       	ldi	r19, 0xFF	; 255
    3618:	4f e7       	ldi	r20, 0x7F	; 127
    361a:	57 e4       	ldi	r21, 0x47	; 71
    361c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3620:	18 16       	cp	r1, r24
    3622:	4c f5       	brge	.+82     	; 0x3676 <display_alarm_msg+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3624:	6b 85       	ldd	r22, Y+11	; 0x0b
    3626:	7c 85       	ldd	r23, Y+12	; 0x0c
    3628:	8d 85       	ldd	r24, Y+13	; 0x0d
    362a:	9e 85       	ldd	r25, Y+14	; 0x0e
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	40 e2       	ldi	r20, 0x20	; 32
    3632:	51 e4       	ldi	r21, 0x41	; 65
    3634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	bc 01       	movw	r22, r24
    363e:	cd 01       	movw	r24, r26
    3640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	9e 83       	std	Y+6, r25	; 0x06
    364a:	8d 83       	std	Y+5, r24	; 0x05
    364c:	0f c0       	rjmp	.+30     	; 0x366c <display_alarm_msg+0x218>
    364e:	88 ec       	ldi	r24, 0xC8	; 200
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	9c 83       	std	Y+4, r25	; 0x04
    3654:	8b 83       	std	Y+3, r24	; 0x03
    3656:	8b 81       	ldd	r24, Y+3	; 0x03
    3658:	9c 81       	ldd	r25, Y+4	; 0x04
    365a:	01 97       	sbiw	r24, 0x01	; 1
    365c:	f1 f7       	brne	.-4      	; 0x365a <display_alarm_msg+0x206>
    365e:	9c 83       	std	Y+4, r25	; 0x04
    3660:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3662:	8d 81       	ldd	r24, Y+5	; 0x05
    3664:	9e 81       	ldd	r25, Y+6	; 0x06
    3666:	01 97       	sbiw	r24, 0x01	; 1
    3668:	9e 83       	std	Y+6, r25	; 0x06
    366a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    366c:	8d 81       	ldd	r24, Y+5	; 0x05
    366e:	9e 81       	ldd	r25, Y+6	; 0x06
    3670:	00 97       	sbiw	r24, 0x00	; 0
    3672:	69 f7       	brne	.-38     	; 0x364e <display_alarm_msg+0x1fa>
    3674:	14 c0       	rjmp	.+40     	; 0x369e <display_alarm_msg+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3676:	6f 81       	ldd	r22, Y+7	; 0x07
    3678:	78 85       	ldd	r23, Y+8	; 0x08
    367a:	89 85       	ldd	r24, Y+9	; 0x09
    367c:	9a 85       	ldd	r25, Y+10	; 0x0a
    367e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	9e 83       	std	Y+6, r25	; 0x06
    3688:	8d 83       	std	Y+5, r24	; 0x05
    368a:	8d 81       	ldd	r24, Y+5	; 0x05
    368c:	9e 81       	ldd	r25, Y+6	; 0x06
    368e:	9a 83       	std	Y+2, r25	; 0x02
    3690:	89 83       	std	Y+1, r24	; 0x01
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	9a 81       	ldd	r25, Y+2	; 0x02
    3696:	01 97       	sbiw	r24, 0x01	; 1
    3698:	f1 f7       	brne	.-4      	; 0x3696 <display_alarm_msg+0x242>
    369a:	9a 83       	std	Y+2, r25	; 0x02
    369c:	89 83       	std	Y+1, r24	; 0x01
{
	ret = lcd_4bit_send_command(&g_lcdObj_4bitMode, _LCD_CLEAR);
	ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 1, 1, "Door Lock Sys.");
	ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 2, 1, "Invalid Password!!");
	// flashing alarm!
	while(_delay_sec)
    369e:	80 91 58 02 	lds	r24, 0x0258
    36a2:	88 23       	and	r24, r24
    36a4:	09 f0       	breq	.+2      	; 0x36a8 <display_alarm_msg+0x254>
    36a6:	fc ce       	rjmp	.-520    	; 0x34a0 <display_alarm_msg+0x4c>
		_delay_ms(250);
		ret = lcd_4bit_send_command(&g_lcdObj_4bitMode, DDRAM_START_ADDRESS + ROW3_OFFSET);
		ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 3, 9,  "        ");
		_delay_ms(250);
	}
}
    36a8:	6c 96       	adiw	r28, 0x1c	; 28
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	f8 94       	cli
    36ae:	de bf       	out	0x3e, r29	; 62
    36b0:	0f be       	out	0x3f, r0	; 63
    36b2:	cd bf       	out	0x3d, r28	; 61
    36b4:	cf 91       	pop	r28
    36b6:	df 91       	pop	r29
    36b8:	08 95       	ret

000036ba <get_new_password>:

void get_new_password(void)
{
    36ba:	df 93       	push	r29
    36bc:	cf 93       	push	r28
    36be:	cd b7       	in	r28, 0x3d	; 61
    36c0:	de b7       	in	r29, 0x3e	; 62
	ret = lcd_4bit_send_command(&g_lcdObj_4bitMode, _LCD_CLEAR);
    36c2:	80 e8       	ldi	r24, 0x80	; 128
    36c4:	92 e0       	ldi	r25, 0x02	; 2
    36c6:	61 e0       	ldi	r22, 0x01	; 1
    36c8:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    36cc:	80 93 57 02 	sts	0x0257, r24
	ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 1, 1, "Door Lock Sys.");
    36d0:	80 e8       	ldi	r24, 0x80	; 128
    36d2:	92 e0       	ldi	r25, 0x02	; 2
    36d4:	21 e8       	ldi	r18, 0x81	; 129
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	61 e0       	ldi	r22, 0x01	; 1
    36da:	41 e0       	ldi	r20, 0x01	; 1
    36dc:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    36e0:	80 93 57 02 	sts	0x0257, r24
	ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 2, 1, "Enter new Password");
    36e4:	80 e8       	ldi	r24, 0x80	; 128
    36e6:	92 e0       	ldi	r25, 0x02	; 2
    36e8:	27 ed       	ldi	r18, 0xD7	; 215
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	62 e0       	ldi	r22, 0x02	; 2
    36ee:	41 e0       	ldi	r20, 0x01	; 1
    36f0:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    36f4:	80 93 57 02 	sts	0x0257, r24
	ret = lcd_4bit_send_command(&g_lcdObj_4bitMode, DDRAM_START_ADDRESS + ROW3_OFFSET+6);
    36f8:	80 e8       	ldi	r24, 0x80	; 128
    36fa:	92 e0       	ldi	r25, 0x02	; 2
    36fc:	6a e9       	ldi	r22, 0x9A	; 154
    36fe:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    3702:	80 93 57 02 	sts	0x0257, r24
	g_userPassword_len = 0;
    3706:	10 92 92 02 	sts	0x0292, r1
	g_keyValue = 0;
    370a:	10 92 93 02 	sts	0x0293, r1
	do{
		g_userPassword_len++;
    370e:	80 91 92 02 	lds	r24, 0x0292
    3712:	8f 5f       	subi	r24, 0xFF	; 255
    3714:	80 93 92 02 	sts	0x0292, r24
		ret = Keypad_getValue(&g_keypadObj, &g_keyValue);
    3718:	87 e7       	ldi	r24, 0x77	; 119
    371a:	92 e0       	ldi	r25, 0x02	; 2
    371c:	23 e9       	ldi	r18, 0x93	; 147
    371e:	32 e0       	ldi	r19, 0x02	; 2
    3720:	b9 01       	movw	r22, r18
    3722:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <Keypad_getValue>
    3726:	80 93 57 02 	sts	0x0257, r24
		// display star corresponding to enter one character
		ret = lcd_4bit_send_char_data(&g_lcdObj_4bitMode, '*');
    372a:	80 e8       	ldi	r24, 0x80	; 128
    372c:	92 e0       	ldi	r25, 0x02	; 2
    372e:	6a e2       	ldi	r22, 0x2A	; 42
    3730:	0e 94 22 13 	call	0x2644	; 0x2644 <lcd_4bit_send_char_data>
    3734:	80 93 57 02 	sts	0x0257, r24
		if(g_keyValue != '='  && g_userPassword_len <= 8)
    3738:	80 91 93 02 	lds	r24, 0x0293
    373c:	8d 33       	cpi	r24, 0x3D	; 61
    373e:	79 f0       	breq	.+30     	; 0x375e <get_new_password+0xa4>
    3740:	80 91 92 02 	lds	r24, 0x0292
    3744:	89 30       	cpi	r24, 0x09	; 9
    3746:	58 f4       	brcc	.+22     	; 0x375e <get_new_password+0xa4>
		{
			g_userPassword[g_userPassword_len-1] = g_keyValue;
    3748:	80 91 92 02 	lds	r24, 0x0292
    374c:	88 2f       	mov	r24, r24
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	20 91 93 02 	lds	r18, 0x0293
    3756:	fc 01       	movw	r30, r24
    3758:	e6 57       	subi	r30, 0x76	; 118
    375a:	fd 4f       	sbci	r31, 0xFD	; 253
    375c:	20 83       	st	Z, r18
		}
	}while(g_keyValue != '=' && g_userPassword_len < 8);
    375e:	80 91 93 02 	lds	r24, 0x0293
    3762:	8d 33       	cpi	r24, 0x3D	; 61
    3764:	21 f0       	breq	.+8      	; 0x376e <get_new_password+0xb4>
    3766:	80 91 92 02 	lds	r24, 0x0292
    376a:	88 30       	cpi	r24, 0x08	; 8
    376c:	80 f2       	brcs	.-96     	; 0x370e <get_new_password+0x54>
}
    376e:	cf 91       	pop	r28
    3770:	df 91       	pop	r29
    3772:	08 95       	ret

00003774 <display_options>:

void display_options(void)
{
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
	ret = lcd_4bit_send_command(&g_lcdObj_4bitMode, _LCD_CLEAR);
    377c:	80 e8       	ldi	r24, 0x80	; 128
    377e:	92 e0       	ldi	r25, 0x02	; 2
    3780:	61 e0       	ldi	r22, 0x01	; 1
    3782:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    3786:	80 93 57 02 	sts	0x0257, r24
	ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 1, 1, "Door Lock Sys.");
    378a:	80 e8       	ldi	r24, 0x80	; 128
    378c:	92 e0       	ldi	r25, 0x02	; 2
    378e:	21 e8       	ldi	r18, 0x81	; 129
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	61 e0       	ldi	r22, 0x01	; 1
    3794:	41 e0       	ldi	r20, 0x01	; 1
    3796:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    379a:	80 93 57 02 	sts	0x0257, r24
	ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 2, 1, "1- Open The Door");
    379e:	80 e8       	ldi	r24, 0x80	; 128
    37a0:	92 e0       	ldi	r25, 0x02	; 2
    37a2:	2a ee       	ldi	r18, 0xEA	; 234
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	62 e0       	ldi	r22, 0x02	; 2
    37a8:	41 e0       	ldi	r20, 0x01	; 1
    37aa:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    37ae:	80 93 57 02 	sts	0x0257, r24
	ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 3, 1, "2- Change Password");
    37b2:	80 e8       	ldi	r24, 0x80	; 128
    37b4:	92 e0       	ldi	r25, 0x02	; 2
    37b6:	2b ef       	ldi	r18, 0xFB	; 251
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	63 e0       	ldi	r22, 0x03	; 3
    37bc:	41 e0       	ldi	r20, 0x01	; 1
    37be:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    37c2:	80 93 57 02 	sts	0x0257, r24
}
    37c6:	cf 91       	pop	r28
    37c8:	df 91       	pop	r29
    37ca:	08 95       	ret

000037cc <get_password_from_user>:

void get_password_from_user(void)
{
    37cc:	df 93       	push	r29
    37ce:	cf 93       	push	r28
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
	g_userPassword_len = 0;
    37d4:	10 92 92 02 	sts	0x0292, r1
	do{
		g_userPassword_len++;
    37d8:	80 91 92 02 	lds	r24, 0x0292
    37dc:	8f 5f       	subi	r24, 0xFF	; 255
    37de:	80 93 92 02 	sts	0x0292, r24
		ret = Keypad_getValue(&g_keypadObj, &g_keyValue);
    37e2:	87 e7       	ldi	r24, 0x77	; 119
    37e4:	92 e0       	ldi	r25, 0x02	; 2
    37e6:	23 e9       	ldi	r18, 0x93	; 147
    37e8:	32 e0       	ldi	r19, 0x02	; 2
    37ea:	b9 01       	movw	r22, r18
    37ec:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <Keypad_getValue>
    37f0:	80 93 57 02 	sts	0x0257, r24
		// display star corresponding to enter one character
		ret = lcd_4bit_send_char_data(&g_lcdObj_4bitMode, '*');
    37f4:	80 e8       	ldi	r24, 0x80	; 128
    37f6:	92 e0       	ldi	r25, 0x02	; 2
    37f8:	6a e2       	ldi	r22, 0x2A	; 42
    37fa:	0e 94 22 13 	call	0x2644	; 0x2644 <lcd_4bit_send_char_data>
    37fe:	80 93 57 02 	sts	0x0257, r24
		if(g_keyValue != '='  && g_userPassword_len <= 8)
    3802:	80 91 93 02 	lds	r24, 0x0293
    3806:	8d 33       	cpi	r24, 0x3D	; 61
    3808:	79 f0       	breq	.+30     	; 0x3828 <get_password_from_user+0x5c>
    380a:	80 91 92 02 	lds	r24, 0x0292
    380e:	89 30       	cpi	r24, 0x09	; 9
    3810:	58 f4       	brcc	.+22     	; 0x3828 <get_password_from_user+0x5c>
		{
			g_userPassword[g_userPassword_len-1] = g_keyValue;
    3812:	80 91 92 02 	lds	r24, 0x0292
    3816:	88 2f       	mov	r24, r24
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	01 97       	sbiw	r24, 0x01	; 1
    381c:	20 91 93 02 	lds	r18, 0x0293
    3820:	fc 01       	movw	r30, r24
    3822:	e6 57       	subi	r30, 0x76	; 118
    3824:	fd 4f       	sbci	r31, 0xFD	; 253
    3826:	20 83       	st	Z, r18
		}
	}while(g_keyValue != '=' && g_userPassword_len < 8);
    3828:	80 91 93 02 	lds	r24, 0x0293
    382c:	8d 33       	cpi	r24, 0x3D	; 61
    382e:	21 f0       	breq	.+8      	; 0x3838 <get_password_from_user+0x6c>
    3830:	80 91 92 02 	lds	r24, 0x0292
    3834:	88 30       	cpi	r24, 0x08	; 8
    3836:	80 f2       	brcs	.-96     	; 0x37d8 <get_password_from_user+0xc>
}
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <door_option_handler>:

void door_option_handler(void)
{
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
	g_doorFlag = 0;
    3846:	10 92 94 02 	sts	0x0294, r1
	_delay_sec = 3; 			// delay system for 3 seconds
    384a:	83 e0       	ldi	r24, 0x03	; 3
    384c:	80 93 58 02 	sts	0x0258, r24
	ret = timer1_write_counter_value(&g_tmr1Obj, 34286);
    3850:	83 e6       	ldi	r24, 0x63	; 99
    3852:	92 e0       	ldi	r25, 0x02	; 2
    3854:	6e ee       	ldi	r22, 0xEE	; 238
    3856:	75 e8       	ldi	r23, 0x85	; 133
    3858:	0e 94 36 0a 	call	0x146c	; 0x146c <timer1_write_counter_value>
    385c:	80 93 57 02 	sts	0x0257, r24
	ret = timer1_init(&g_tmr1Obj);
    3860:	83 e6       	ldi	r24, 0x63	; 99
    3862:	92 e0       	ldi	r25, 0x02	; 2
    3864:	0e 94 d7 09 	call	0x13ae	; 0x13ae <timer1_init>
    3868:	80 93 57 02 	sts	0x0257, r24
	display_door_msg();			// motor turn right. door closing
    386c:	0e 94 f5 19 	call	0x33ea	; 0x33ea <display_door_msg>
	while(_delay_sec);			// wait until timer delay finished
    3870:	80 91 58 02 	lds	r24, 0x0258
    3874:	88 23       	and	r24, r24
    3876:	e1 f7       	brne	.-8      	; 0x3870 <door_option_handler+0x32>
	_delay_sec = 1;
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	80 93 58 02 	sts	0x0258, r24
	ret = timer1_write_counter_value(&g_tmr1Obj, 34286);
    387e:	83 e6       	ldi	r24, 0x63	; 99
    3880:	92 e0       	ldi	r25, 0x02	; 2
    3882:	6e ee       	ldi	r22, 0xEE	; 238
    3884:	75 e8       	ldi	r23, 0x85	; 133
    3886:	0e 94 36 0a 	call	0x146c	; 0x146c <timer1_write_counter_value>
    388a:	80 93 57 02 	sts	0x0257, r24
	ret = timer1_init(&g_tmr1Obj);
    388e:	83 e6       	ldi	r24, 0x63	; 99
    3890:	92 e0       	ldi	r25, 0x02	; 2
    3892:	0e 94 d7 09 	call	0x13ae	; 0x13ae <timer1_init>
    3896:	80 93 57 02 	sts	0x0257, r24
	while(_delay_sec);			// wait until timer delay finished
    389a:	80 91 58 02 	lds	r24, 0x0258
    389e:	88 23       	and	r24, r24
    38a0:	e1 f7       	brne	.-8      	; 0x389a <door_option_handler+0x5c>
	ret = timer1_Deinit(&g_tmr1Obj);
    38a2:	83 e6       	ldi	r24, 0x63	; 99
    38a4:	92 e0       	ldi	r25, 0x02	; 2
    38a6:	0e 94 12 0a 	call	0x1424	; 0x1424 <timer1_Deinit>
    38aa:	80 93 57 02 	sts	0x0257, r24
	g_doorFlag = 1;
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	80 93 94 02 	sts	0x0294, r24
	_delay_sec = 3; 			// delay system for 3 seconds
    38b4:	83 e0       	ldi	r24, 0x03	; 3
    38b6:	80 93 58 02 	sts	0x0258, r24
	ret = timer1_write_counter_value(&g_tmr1Obj, 34286);
    38ba:	83 e6       	ldi	r24, 0x63	; 99
    38bc:	92 e0       	ldi	r25, 0x02	; 2
    38be:	6e ee       	ldi	r22, 0xEE	; 238
    38c0:	75 e8       	ldi	r23, 0x85	; 133
    38c2:	0e 94 36 0a 	call	0x146c	; 0x146c <timer1_write_counter_value>
    38c6:	80 93 57 02 	sts	0x0257, r24
	ret = timer1_init(&g_tmr1Obj);
    38ca:	83 e6       	ldi	r24, 0x63	; 99
    38cc:	92 e0       	ldi	r25, 0x02	; 2
    38ce:	0e 94 d7 09 	call	0x13ae	; 0x13ae <timer1_init>
    38d2:	80 93 57 02 	sts	0x0257, r24
	display_door_msg();			// motor turn left. door closing
    38d6:	0e 94 f5 19 	call	0x33ea	; 0x33ea <display_door_msg>
	while(_delay_sec);			// wait until timer delay finished
    38da:	80 91 58 02 	lds	r24, 0x0258
    38de:	88 23       	and	r24, r24
    38e0:	e1 f7       	brne	.-8      	; 0x38da <door_option_handler+0x9c>
	ret = timer1_Deinit(&g_tmr1Obj);
    38e2:	83 e6       	ldi	r24, 0x63	; 99
    38e4:	92 e0       	ldi	r25, 0x02	; 2
    38e6:	0e 94 12 0a 	call	0x1424	; 0x1424 <timer1_Deinit>
    38ea:	80 93 57 02 	sts	0x0257, r24
}
    38ee:	cf 91       	pop	r28
    38f0:	df 91       	pop	r29
    38f2:	08 95       	ret

000038f4 <chnage_password_option_handler>:

void chnage_password_option_handler(void)
{
    38f4:	df 93       	push	r29
    38f6:	cf 93       	push	r28
    38f8:	cd b7       	in	r28, 0x3d	; 61
    38fa:	de b7       	in	r29, 0x3e	; 62
	get_new_password();
    38fc:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <get_new_password>
	get_new_password();
    3900:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <get_new_password>
	ret = USART_sendString_Blocking(&g_userPassword[0]);
    3904:	8a e8       	ldi	r24, 0x8A	; 138
    3906:	92 e0       	ldi	r25, 0x02	; 2
    3908:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <USART_sendString_Blocking>
    390c:	80 93 57 02 	sts	0x0257, r24
	ret = USART_Send_Byte_Blocking('#');	// to end process of sending string
    3910:	83 e2       	ldi	r24, 0x23	; 35
    3912:	0e 94 6c 07 	call	0xed8	; 0xed8 <USART_Send_Byte_Blocking>
    3916:	80 93 57 02 	sts	0x0257, r24
	ret = USART_Send_Byte_Blocking(g_userPassword_len-1);
    391a:	80 91 92 02 	lds	r24, 0x0292
    391e:	81 50       	subi	r24, 0x01	; 1
    3920:	0e 94 6c 07 	call	0xed8	; 0xed8 <USART_Send_Byte_Blocking>
    3924:	80 93 57 02 	sts	0x0257, r24
	_delay_sec = 3;
    3928:	83 e0       	ldi	r24, 0x03	; 3
    392a:	80 93 58 02 	sts	0x0258, r24
	ret = timer1_write_counter_value(&g_tmr1Obj, 34286);
    392e:	83 e6       	ldi	r24, 0x63	; 99
    3930:	92 e0       	ldi	r25, 0x02	; 2
    3932:	6e ee       	ldi	r22, 0xEE	; 238
    3934:	75 e8       	ldi	r23, 0x85	; 133
    3936:	0e 94 36 0a 	call	0x146c	; 0x146c <timer1_write_counter_value>
    393a:	80 93 57 02 	sts	0x0257, r24
	ret = timer1_init(&g_tmr1Obj);
    393e:	83 e6       	ldi	r24, 0x63	; 99
    3940:	92 e0       	ldi	r25, 0x02	; 2
    3942:	0e 94 d7 09 	call	0x13ae	; 0x13ae <timer1_init>
    3946:	80 93 57 02 	sts	0x0257, r24
	ret = lcd_4bit_send_command(&g_lcdObj_4bitMode, _LCD_CLEAR);
    394a:	80 e8       	ldi	r24, 0x80	; 128
    394c:	92 e0       	ldi	r25, 0x02	; 2
    394e:	61 e0       	ldi	r22, 0x01	; 1
    3950:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lcd_4bit_send_command>
    3954:	80 93 57 02 	sts	0x0257, r24
	ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 2, 1, "password changed");
    3958:	80 e8       	ldi	r24, 0x80	; 128
    395a:	92 e0       	ldi	r25, 0x02	; 2
    395c:	2e e0       	ldi	r18, 0x0E	; 14
    395e:	31 e0       	ldi	r19, 0x01	; 1
    3960:	62 e0       	ldi	r22, 0x02	; 2
    3962:	41 e0       	ldi	r20, 0x01	; 1
    3964:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    3968:	80 93 57 02 	sts	0x0257, r24
	ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 3, 1, "Successfully");
    396c:	80 e8       	ldi	r24, 0x80	; 128
    396e:	92 e0       	ldi	r25, 0x02	; 2
    3970:	2f e1       	ldi	r18, 0x1F	; 31
    3972:	31 e0       	ldi	r19, 0x01	; 1
    3974:	63 e0       	ldi	r22, 0x03	; 3
    3976:	41 e0       	ldi	r20, 0x01	; 1
    3978:	0e 94 be 13 	call	0x277c	; 0x277c <lcd_4bit_send_string_data_pos>
    397c:	80 93 57 02 	sts	0x0257, r24
	while(_delay_sec);			// wait until timer delay finished
    3980:	80 91 58 02 	lds	r24, 0x0258
    3984:	88 23       	and	r24, r24
    3986:	e1 f7       	brne	.-8      	; 0x3980 <chnage_password_option_handler+0x8c>
	ret = timer1_Deinit(&g_tmr1Obj);
    3988:	83 e6       	ldi	r24, 0x63	; 99
    398a:	92 e0       	ldi	r25, 0x02	; 2
    398c:	0e 94 12 0a 	call	0x1424	; 0x1424 <timer1_Deinit>
    3990:	80 93 57 02 	sts	0x0257, r24
}
    3994:	cf 91       	pop	r28
    3996:	df 91       	pop	r29
    3998:	08 95       	ret

0000399a <invalid_password_handler>:

void invalid_password_handler(void)
{
    399a:	df 93       	push	r29
    399c:	cf 93       	push	r28
    399e:	cd b7       	in	r28, 0x3d	; 61
    39a0:	de b7       	in	r29, 0x3e	; 62
	ret = timer1_Deinit(&g_tmr1Obj);
    39a2:	83 e6       	ldi	r24, 0x63	; 99
    39a4:	92 e0       	ldi	r25, 0x02	; 2
    39a6:	0e 94 12 0a 	call	0x1424	; 0x1424 <timer1_Deinit>
    39aa:	80 93 57 02 	sts	0x0257, r24
	ret = timer1_write_counter_value(&g_tmr1Obj, 34286);
    39ae:	83 e6       	ldi	r24, 0x63	; 99
    39b0:	92 e0       	ldi	r25, 0x02	; 2
    39b2:	6e ee       	ldi	r22, 0xEE	; 238
    39b4:	75 e8       	ldi	r23, 0x85	; 133
    39b6:	0e 94 36 0a 	call	0x146c	; 0x146c <timer1_write_counter_value>
    39ba:	80 93 57 02 	sts	0x0257, r24
	ret = timer1_init(&g_tmr1Obj);
    39be:	83 e6       	ldi	r24, 0x63	; 99
    39c0:	92 e0       	ldi	r25, 0x02	; 2
    39c2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <timer1_init>
    39c6:	80 93 57 02 	sts	0x0257, r24
	display_alarm_msg();
    39ca:	0e 94 2a 1a 	call	0x3454	; 0x3454 <display_alarm_msg>
	while(_delay_sec);			// wait until timer delay finished
    39ce:	80 91 58 02 	lds	r24, 0x0258
    39d2:	88 23       	and	r24, r24
    39d4:	e1 f7       	brne	.-8      	; 0x39ce <invalid_password_handler+0x34>
	ret = timer1_Deinit(&g_tmr1Obj);
    39d6:	83 e6       	ldi	r24, 0x63	; 99
    39d8:	92 e0       	ldi	r25, 0x02	; 2
    39da:	0e 94 12 0a 	call	0x1424	; 0x1424 <timer1_Deinit>
    39de:	80 93 57 02 	sts	0x0257, r24
}
    39e2:	cf 91       	pop	r28
    39e4:	df 91       	pop	r29
    39e6:	08 95       	ret

000039e8 <__udivmodqi4>:
    39e8:	99 1b       	sub	r25, r25
    39ea:	79 e0       	ldi	r23, 0x09	; 9
    39ec:	04 c0       	rjmp	.+8      	; 0x39f6 <__udivmodqi4_ep>

000039ee <__udivmodqi4_loop>:
    39ee:	99 1f       	adc	r25, r25
    39f0:	96 17       	cp	r25, r22
    39f2:	08 f0       	brcs	.+2      	; 0x39f6 <__udivmodqi4_ep>
    39f4:	96 1b       	sub	r25, r22

000039f6 <__udivmodqi4_ep>:
    39f6:	88 1f       	adc	r24, r24
    39f8:	7a 95       	dec	r23
    39fa:	c9 f7       	brne	.-14     	; 0x39ee <__udivmodqi4_loop>
    39fc:	80 95       	com	r24
    39fe:	08 95       	ret

00003a00 <__udivmodhi4>:
    3a00:	aa 1b       	sub	r26, r26
    3a02:	bb 1b       	sub	r27, r27
    3a04:	51 e1       	ldi	r21, 0x11	; 17
    3a06:	07 c0       	rjmp	.+14     	; 0x3a16 <__udivmodhi4_ep>

00003a08 <__udivmodhi4_loop>:
    3a08:	aa 1f       	adc	r26, r26
    3a0a:	bb 1f       	adc	r27, r27
    3a0c:	a6 17       	cp	r26, r22
    3a0e:	b7 07       	cpc	r27, r23
    3a10:	10 f0       	brcs	.+4      	; 0x3a16 <__udivmodhi4_ep>
    3a12:	a6 1b       	sub	r26, r22
    3a14:	b7 0b       	sbc	r27, r23

00003a16 <__udivmodhi4_ep>:
    3a16:	88 1f       	adc	r24, r24
    3a18:	99 1f       	adc	r25, r25
    3a1a:	5a 95       	dec	r21
    3a1c:	a9 f7       	brne	.-22     	; 0x3a08 <__udivmodhi4_loop>
    3a1e:	80 95       	com	r24
    3a20:	90 95       	com	r25
    3a22:	bc 01       	movw	r22, r24
    3a24:	cd 01       	movw	r24, r26
    3a26:	08 95       	ret

00003a28 <__udivmodsi4>:
    3a28:	a1 e2       	ldi	r26, 0x21	; 33
    3a2a:	1a 2e       	mov	r1, r26
    3a2c:	aa 1b       	sub	r26, r26
    3a2e:	bb 1b       	sub	r27, r27
    3a30:	fd 01       	movw	r30, r26
    3a32:	0d c0       	rjmp	.+26     	; 0x3a4e <__udivmodsi4_ep>

00003a34 <__udivmodsi4_loop>:
    3a34:	aa 1f       	adc	r26, r26
    3a36:	bb 1f       	adc	r27, r27
    3a38:	ee 1f       	adc	r30, r30
    3a3a:	ff 1f       	adc	r31, r31
    3a3c:	a2 17       	cp	r26, r18
    3a3e:	b3 07       	cpc	r27, r19
    3a40:	e4 07       	cpc	r30, r20
    3a42:	f5 07       	cpc	r31, r21
    3a44:	20 f0       	brcs	.+8      	; 0x3a4e <__udivmodsi4_ep>
    3a46:	a2 1b       	sub	r26, r18
    3a48:	b3 0b       	sbc	r27, r19
    3a4a:	e4 0b       	sbc	r30, r20
    3a4c:	f5 0b       	sbc	r31, r21

00003a4e <__udivmodsi4_ep>:
    3a4e:	66 1f       	adc	r22, r22
    3a50:	77 1f       	adc	r23, r23
    3a52:	88 1f       	adc	r24, r24
    3a54:	99 1f       	adc	r25, r25
    3a56:	1a 94       	dec	r1
    3a58:	69 f7       	brne	.-38     	; 0x3a34 <__udivmodsi4_loop>
    3a5a:	60 95       	com	r22
    3a5c:	70 95       	com	r23
    3a5e:	80 95       	com	r24
    3a60:	90 95       	com	r25
    3a62:	9b 01       	movw	r18, r22
    3a64:	ac 01       	movw	r20, r24
    3a66:	bd 01       	movw	r22, r26
    3a68:	cf 01       	movw	r24, r30
    3a6a:	08 95       	ret

00003a6c <__prologue_saves__>:
    3a6c:	2f 92       	push	r2
    3a6e:	3f 92       	push	r3
    3a70:	4f 92       	push	r4
    3a72:	5f 92       	push	r5
    3a74:	6f 92       	push	r6
    3a76:	7f 92       	push	r7
    3a78:	8f 92       	push	r8
    3a7a:	9f 92       	push	r9
    3a7c:	af 92       	push	r10
    3a7e:	bf 92       	push	r11
    3a80:	cf 92       	push	r12
    3a82:	df 92       	push	r13
    3a84:	ef 92       	push	r14
    3a86:	ff 92       	push	r15
    3a88:	0f 93       	push	r16
    3a8a:	1f 93       	push	r17
    3a8c:	cf 93       	push	r28
    3a8e:	df 93       	push	r29
    3a90:	cd b7       	in	r28, 0x3d	; 61
    3a92:	de b7       	in	r29, 0x3e	; 62
    3a94:	ca 1b       	sub	r28, r26
    3a96:	db 0b       	sbc	r29, r27
    3a98:	0f b6       	in	r0, 0x3f	; 63
    3a9a:	f8 94       	cli
    3a9c:	de bf       	out	0x3e, r29	; 62
    3a9e:	0f be       	out	0x3f, r0	; 63
    3aa0:	cd bf       	out	0x3d, r28	; 61
    3aa2:	09 94       	ijmp

00003aa4 <__epilogue_restores__>:
    3aa4:	2a 88       	ldd	r2, Y+18	; 0x12
    3aa6:	39 88       	ldd	r3, Y+17	; 0x11
    3aa8:	48 88       	ldd	r4, Y+16	; 0x10
    3aaa:	5f 84       	ldd	r5, Y+15	; 0x0f
    3aac:	6e 84       	ldd	r6, Y+14	; 0x0e
    3aae:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ab0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ab2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ab4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ab6:	b9 84       	ldd	r11, Y+9	; 0x09
    3ab8:	c8 84       	ldd	r12, Y+8	; 0x08
    3aba:	df 80       	ldd	r13, Y+7	; 0x07
    3abc:	ee 80       	ldd	r14, Y+6	; 0x06
    3abe:	fd 80       	ldd	r15, Y+5	; 0x05
    3ac0:	0c 81       	ldd	r16, Y+4	; 0x04
    3ac2:	1b 81       	ldd	r17, Y+3	; 0x03
    3ac4:	aa 81       	ldd	r26, Y+2	; 0x02
    3ac6:	b9 81       	ldd	r27, Y+1	; 0x01
    3ac8:	ce 0f       	add	r28, r30
    3aca:	d1 1d       	adc	r29, r1
    3acc:	0f b6       	in	r0, 0x3f	; 63
    3ace:	f8 94       	cli
    3ad0:	de bf       	out	0x3e, r29	; 62
    3ad2:	0f be       	out	0x3f, r0	; 63
    3ad4:	cd bf       	out	0x3d, r28	; 61
    3ad6:	ed 01       	movw	r28, r26
    3ad8:	08 95       	ret

00003ada <_exit>:
    3ada:	f8 94       	cli

00003adc <__stop_program>:
    3adc:	ff cf       	rjmp	.-2      	; 0x3adc <__stop_program>
