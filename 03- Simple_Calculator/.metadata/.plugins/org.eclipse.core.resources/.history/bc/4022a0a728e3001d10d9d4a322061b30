 /* App.c
 *
 *  Created on: Mar 13, 2023
 *      Author: ahmed
 */


#include "App.h"


uint8 g_key_value = 0;

uint8 g_operator=0;
uint16 g_operandNum1=0, g_operandNum2 = 0;
uint8 g_firstnum[11] = {0};		// to display first operand if no operation determined
uint32 g_resultNum = 0;			// to store the result of the operation
uint8 g_resultStr[11] = {0};	// to display the result on LCD
uint8 g_operand_len = 0;
uint8 g_operandFlag = 0;	// 0 -> take first operand. 1-> take second operand
uint8 invalid_operator_flag = 0;
uint8 invalid_num_len_flag = 0;

int main(void)
{
	application_initialize();

	while(1)
	{
		// get the key value
		g_key_value = 0;
		do
		{
			ret = Keypad_getValue(&g_keypadObj, &g_key_value);
		} while( g_key_value == 0 );
		ret = lcd_4bit_send_char_data(&g_lcdObj_4bitMode, g_key_value);

		if(g_key_value >= '0' && g_key_value <= '9')
		{	// key_value is a valid number
			get_operand(g_key_value);
		}
		else if(g_key_value != '=')
		{	// take operator from user
			get_operation(g_key_value);
		}
		else if(g_key_value == '=')
		{
			ret = check_operation();
			if(ret)
			{
				if(g_operator == 0)
				{
					show_operation_result(g_firstnum);
				}
				else
				{
					g_resultNum = get_result(g_operandNum1, g_operandNum2, g_operator);
					ret = LCD_convert_int_to_string(g_resultNum, &g_resultStr[0]);
					show_operation_result(g_resultStr);
				}
			}
			else
			{	// error happen
				show_error_msg();
			}
			// reset all variables for the next operation
			reset_values();
			// start next operation from second line
			_delay_ms(1000);
			ret = lcd_4bit_send_command(&g_lcdObj_4bitMode, _LCD_CLEAR);
			ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 1, 2,  "Simple Calculator");
			ret = lcd_4bit_send_command(&g_lcdObj_4bitMode, DDRAM_START_ADDRESS + ROW2_OFFSET);
		}

		_delay_ms(250);
	}
	return 0;
}


void application_initialize(void)
{
	ret = HAL_init();
}

void get_operand(uint8 key_val)
{
	if(0 == g_operandFlag && g_operator == 0 && g_operand_len < 5)
	{	// store 1st operand
		g_operandNum1 = (g_operandNum1 * 10) + (key_val-'0');
		g_firstnum[g_operand_len++] = key_val;
	}
	else if(1 == g_operandFlag && g_operator != 0 && g_operand_len < 5)
	{	// store 2nd operand
		g_operandNum2 = (g_operandNum2 * 10) + (key_val-'0');
		g_operand_len++;
	}
	else if(g_operand_len < 10 && g_operator == 0){
			g_firstnum[g_operand_len++] = key_val;
		}
	else if(g_operand_len > 5 && g_operator != 0)
	{	// operand exist and no. length exceed limit (5-digits)
		invalid_num_len_flag = 1;
	}

}

void get_operation(uint8 key_val)
{
	if(g_operator != 0 || key_val == '#')
	{	// second operator or hash sign operation, thus invalid operator error occur
		invalid_operator_flag = 1;
	}
	else
	{	// valid operation 'either +, -, *, /'
		//l_operandIndx = 0;
		g_operator= key_val;
	}
	g_operandFlag++;
	g_operand_len = 0;
}

Std_ReturnType check_operation(void)
{
	Std_ReturnType l_ret = E_OK;
	if(invalid_num_len_flag || invalid_operator_flag)
	{
		l_ret = E_NOT_OK;
	}
	else if(g_operandNum2 == 0 && g_operator == '/')
	{
		invalid_operator_flag = 1; // error: dividing by 0
		l_ret = E_NOT_OK;
	}
	else if(g_operator == '#')
	{
		invalid_operator_flag = 1;
		l_ret = E_NOT_OK;
	}
	return l_ret;
}
uint32 get_result(uint16 op1, uint16 op2, uint8 operation)
{
	uint32 res = 0;

	switch(operation)
	{
	case '+':	res = (uint32)op1 + op2;
		break;
	case '-':	res = op1 - op2;
		break;
	case '*':	res = (uint32)op1 * op2;
		break;
	case '/':	res = op1 / op2;
		break;
	}
	return res;
}
void show_error_msg(void)
{
	if(invalid_operator_flag)
	{
		ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 3, 1, "INVALID Operation!");
	}
	else if(invalid_num_len_flag)
	{
		ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 3, 1, "INVALID No. Length!");
	}
}
void show_operation_result(const uint8* str)
{
	ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 3, 1, "result= ");
	ret = lcd_4bit_send_string_data(&g_lcdObj_4bitMode, &str[0]);
}
void reset_values(void)
{
	g_key_value=0;
	g_operandNum1 = 0;
	g_operandNum2 = 0;
	g_operator = 0;
	g_operandFlag = 0;
	g_operand_len = 0;
	g_resultNum = 0;
	invalid_num_len_flag = 0;
	invalid_operator_flag = 0;

	for(uint8 count = 0; count<11; count++)
	{
		g_resultStr[count] = 0;
		g_firstnum[count] = 0;
	}
}
