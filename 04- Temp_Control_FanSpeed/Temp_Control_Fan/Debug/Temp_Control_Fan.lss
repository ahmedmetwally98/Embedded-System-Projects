
Temp_Control_Fan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003930  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017e  00800060  00003930  000039c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008001de  008001de  00003b42  2**0
                  ALLOC
  3 .stab         00004860  00000000  00000000  00003b44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b96  00000000  00000000  000083a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000af3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b0da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b2cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d6d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ea5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fc34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000fdf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000100ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010a58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3e       	cpi	r26, 0xE9	; 233
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 43 1a 	call	0x3486	; 0x3486 <main>
      8a:	0c 94 96 1c 	jmp	0x392c	; 0x392c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5f 1c 	jmp	0x38be	; 0x38be <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e9       	ldi	r26, 0x9F	; 159
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6b 1c 	jmp	0x38d6	; 0x38d6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 87 1c 	jmp	0x390e	; 0x390e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6b 1c 	jmp	0x38d6	; 0x38d6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 87 1c 	jmp	0x390e	; 0x390e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5f 1c 	jmp	0x38be	; 0x38be <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f e9       	ldi	r24, 0x9F	; 159
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e9       	ldi	r22, 0x9F	; 159
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6b 1c 	jmp	0x38d6	; 0x38d6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 87 1c 	jmp	0x390e	; 0x390e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6b 1c 	jmp	0x38d6	; 0x38d6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 87 1c 	jmp	0x390e	; 0x390e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6b 1c 	jmp	0x38d6	; 0x38d6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 87 1c 	jmp	0x390e	; 0x390e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8b 1c 	jmp	0x3916	; 0x3916 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 55       	subi	r30, 0x59	; 89
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <timer0_init>:
static void timer0_set_clock_source(const timer0_t* tmr_obj);

/* ------------------------------ SW Functions Definitions ------------------------------ */

Std_ReturnType timer0_init(const timer0_t* tmr_obj)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <timer0_init+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == tmr_obj)
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	9b 81       	ldd	r25, Y+3	; 0x03
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	11 f4       	brne	.+4      	; 0xe4e <timer0_init+0x20>
	{
		ret = E_NOT_OK;
     e4a:	19 82       	std	Y+1, r1	; 0x01
     e4c:	15 c0       	rjmp	.+42     	; 0xe78 <timer0_init+0x4a>
	}
	else
	{
		/* disable timer0 module */
		TCCR0 &= 0xF8;
     e4e:	a3 e5       	ldi	r26, 0x53	; 83
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e3 e5       	ldi	r30, 0x53	; 83
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	88 7f       	andi	r24, 0xF8	; 248
     e5a:	8c 93       	st	X, r24
#if TIMER0_OC0_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
		TIMER0_OUTPUT_COMPARE_INTERRUPT_ENABLE();
#endif
#endif
		/* select one of four general timer modes (Normal, CTC, Fast PWM, Phase-Correct PWM)*/
		timer0_set_mode(tmr_obj);
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	9b 81       	ldd	r25, Y+3	; 0x03
     e60:	0e 94 66 09 	call	0x12cc	; 0x12cc <timer0_set_mode>
		// fill the timer registers with pre-load value
		OCR0 = tmr_obj->tmr0_OCR_preload_value;
     e64:	ac e5       	ldi	r26, 0x5C	; 92
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ea 81       	ldd	r30, Y+2	; 0x02
     e6a:	fb 81       	ldd	r31, Y+3	; 0x03
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	8c 93       	st	X, r24
		/* Assign clock source to the timer/counter to Enable counting */
		timer0_set_clock_source(tmr_obj);
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	9b 81       	ldd	r25, Y+3	; 0x03
     e74:	0e 94 28 0a 	call	0x1450	; 0x1450 <timer0_set_clock_source>
	}
	return ret;
     e78:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <timer0_Deinit>:
Std_ReturnType timer0_Deinit(const timer0_t* tmr_obj)
{
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <timer0_Deinit+0x6>
     e8c:	0f 92       	push	r0
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	9b 83       	std	Y+3, r25	; 0x03
     e94:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == tmr_obj)
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	9b 81       	ldd	r25, Y+3	; 0x03
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	11 f4       	brne	.+4      	; 0xea6 <timer0_Deinit+0x20>
	{
		ret = E_NOT_OK;
     ea2:	19 82       	std	Y+1, r1	; 0x01
     ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <timer0_Deinit+0x2e>
#if TIMER0_OC0_INTERRUPT_FEATURE==INTERRUPT_FEATURE_ENABLE
		TIMER0_OUTPUT_COMPARE_INTERRUPT_DISABLE();
#endif
#endif
		/* disable timer0 module */
		TCCR0 &= 0xF8;
     ea6:	a3 e5       	ldi	r26, 0x53	; 83
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e3 e5       	ldi	r30, 0x53	; 83
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 7f       	andi	r24, 0xF8	; 248
     eb2:	8c 93       	st	X, r24
	}
	return ret;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <timer0_write_value>:
Std_ReturnType timer0_write_value(const timer0_t* tmr_obj, uint8 value)
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <timer0_write_value+0x6>
     ec8:	00 d0       	rcall	.+0      	; 0xeca <timer0_write_value+0x8>
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	9b 83       	std	Y+3, r25	; 0x03
     ed0:	8a 83       	std	Y+2, r24	; 0x02
     ed2:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == tmr_obj)
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	9b 81       	ldd	r25, Y+3	; 0x03
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	11 f4       	brne	.+4      	; 0xee4 <timer0_write_value+0x22>
	{
		ret = E_NOT_OK;
     ee0:	19 82       	std	Y+1, r1	; 0x01
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <timer0_write_value+0x2a>
	}
	else
	{
		TCNT0 = value;
     ee4:	e2 e5       	ldi	r30, 0x52	; 82
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	80 83       	st	Z, r24
	}
	return ret;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
}
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <timer0_read_value>:
Std_ReturnType timer0_read_value(const timer0_t* tmr_obj, uint8* ret_value)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <timer0_read_value+0x6>
     f02:	00 d0       	rcall	.+0      	; 0xf04 <timer0_read_value+0x8>
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9b 83       	std	Y+3, r25	; 0x03
     f0c:	8a 83       	std	Y+2, r24	; 0x02
     f0e:	7d 83       	std	Y+5, r23	; 0x05
     f10:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == tmr_obj || ret_value == NULL)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	9b 81       	ldd	r25, Y+3	; 0x03
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	21 f0       	breq	.+8      	; 0xf26 <timer0_read_value+0x2a>
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	11 f4       	brne	.+4      	; 0xf2a <timer0_read_value+0x2e>
	{
		ret = E_NOT_OK;
     f26:	19 82       	std	Y+1, r1	; 0x01
     f28:	06 c0       	rjmp	.+12     	; 0xf36 <timer0_read_value+0x3a>
	}
	else
	{
		*ret_value = TCNT0;
     f2a:	e2 e5       	ldi	r30, 0x52	; 82
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	ec 81       	ldd	r30, Y+4	; 0x04
     f32:	fd 81       	ldd	r31, Y+5	; 0x05
     f34:	80 83       	st	Z, r24
	}
	return ret;
     f36:	89 81       	ldd	r24, Y+1	; 0x01
}
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <timer0_generate_waveform>:

/* changing the value of OCR0 should be done in the ISR only */
Std_ReturnType timer0_generate_waveform(const timer0_t* tmr_obj, uint32 wave_freq)
{
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	27 97       	sbiw	r28, 0x07	; 7
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	9b 83       	std	Y+3, r25	; 0x03
     f6a:	8a 83       	std	Y+2, r24	; 0x02
     f6c:	4c 83       	std	Y+4, r20	; 0x04
     f6e:	5d 83       	std	Y+5, r21	; 0x05
     f70:	6e 83       	std	Y+6, r22	; 0x06
     f72:	7f 83       	std	Y+7, r23	; 0x07
	Std_ReturnType ret = E_OK;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == tmr_obj)
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	9b 81       	ldd	r25, Y+3	; 0x03
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	11 f4       	brne	.+4      	; 0xf84 <timer0_generate_waveform+0x3c>
	{
		ret = E_NOT_OK;
     f80:	19 82       	std	Y+1, r1	; 0x01
     f82:	84 c0       	rjmp	.+264    	; 0x108c <timer0_generate_waveform+0x144>
	}
	else
	{
		// limit is: wave frequency <= Fcpu / 2 with (pre-scaler = 1)
		if(wave_freq > (uint32)(F_CPU/(2.0*prescaler_value_map[tmr_obj->timer0_prescaler_value])))
     f84:	ea 81       	ldd	r30, Y+2	; 0x02
     f86:	fb 81       	ldd	r31, Y+3	; 0x03
     f88:	80 81       	ld	r24, Z
     f8a:	87 70       	andi	r24, 0x07	; 7
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	fc 01       	movw	r30, r24
     f96:	e9 55       	subi	r30, 0x59	; 89
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	cc 01       	movw	r24, r24
     fa0:	a0 e0       	ldi	r26, 0x00	; 0
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	bc 01       	movw	r22, r24
     fa6:	cd 01       	movw	r24, r26
     fa8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     fac:	9b 01       	movw	r18, r22
     fae:	ac 01       	movw	r20, r24
     fb0:	ca 01       	movw	r24, r20
     fb2:	b9 01       	movw	r22, r18
     fb4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	9c 01       	movw	r18, r24
     fbe:	ad 01       	movw	r20, r26
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	74 e2       	ldi	r23, 0x24	; 36
     fc4:	84 ef       	ldi	r24, 0xF4	; 244
     fc6:	9a e4       	ldi	r25, 0x4A	; 74
     fc8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	bc 01       	movw	r22, r24
     fd2:	cd 01       	movw	r24, r26
     fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd8:	9b 01       	movw	r18, r22
     fda:	ac 01       	movw	r20, r24
     fdc:	8c 81       	ldd	r24, Y+4	; 0x04
     fde:	9d 81       	ldd	r25, Y+5	; 0x05
     fe0:	ae 81       	ldd	r26, Y+6	; 0x06
     fe2:	bf 81       	ldd	r27, Y+7	; 0x07
     fe4:	28 17       	cp	r18, r24
     fe6:	39 07       	cpc	r19, r25
     fe8:	4a 07       	cpc	r20, r26
     fea:	5b 07       	cpc	r21, r27
     fec:	10 f4       	brcc	.+4      	; 0xff2 <timer0_generate_waveform+0xaa>
		{
			ret = E_NOT_OK;
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	4d c0       	rjmp	.+154    	; 0x108c <timer0_generate_waveform+0x144>
		}
		else
		{
			OCR0 = (uint8)(((float)F_CPU/(2.0*wave_freq*prescaler_value_map[tmr_obj->timer0_prescaler_value]))-1);
     ff2:	0f 2e       	mov	r0, r31
     ff4:	fc e5       	ldi	r31, 0x5C	; 92
     ff6:	cf 2e       	mov	r12, r31
     ff8:	dd 24       	eor	r13, r13
     ffa:	f0 2d       	mov	r31, r0
     ffc:	6c 81       	ldd	r22, Y+4	; 0x04
     ffe:	7d 81       	ldd	r23, Y+5	; 0x05
    1000:	8e 81       	ldd	r24, Y+6	; 0x06
    1002:	9f 81       	ldd	r25, Y+7	; 0x07
    1004:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	ca 01       	movw	r24, r20
    100e:	b9 01       	movw	r22, r18
    1010:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	7c 01       	movw	r14, r24
    101a:	8d 01       	movw	r16, r26
    101c:	ea 81       	ldd	r30, Y+2	; 0x02
    101e:	fb 81       	ldd	r31, Y+3	; 0x03
    1020:	80 81       	ld	r24, Z
    1022:	87 70       	andi	r24, 0x07	; 7
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	fc 01       	movw	r30, r24
    102e:	e9 55       	subi	r30, 0x59	; 89
    1030:	fe 4f       	sbci	r31, 0xFE	; 254
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	cc 01       	movw	r24, r24
    1038:	a0 e0       	ldi	r26, 0x00	; 0
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	bc 01       	movw	r22, r24
    103e:	cd 01       	movw	r24, r26
    1040:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1044:	9b 01       	movw	r18, r22
    1046:	ac 01       	movw	r20, r24
    1048:	c8 01       	movw	r24, r16
    104a:	b7 01       	movw	r22, r14
    104c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9c 01       	movw	r18, r24
    1056:	ad 01       	movw	r20, r26
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	74 e2       	ldi	r23, 0x24	; 36
    105c:	84 ef       	ldi	r24, 0xF4	; 244
    105e:	9a e4       	ldi	r25, 0x4A	; 74
    1060:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	bc 01       	movw	r22, r24
    106a:	cd 01       	movw	r24, r26
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e8       	ldi	r20, 0x80	; 128
    1072:	5f e3       	ldi	r21, 0x3F	; 63
    1074:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	f6 01       	movw	r30, r12
    108a:	80 83       	st	Z, r24
		}
	}
	return ret;
    108c:	89 81       	ldd	r24, Y+1	; 0x01
}
    108e:	27 96       	adiw	r28, 0x07	; 7
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	df 90       	pop	r13
    10a8:	cf 90       	pop	r12
    10aa:	08 95       	ret

000010ac <timer0_pwm_duty_cycle>:
/* changing the value of OCR0 should be done in the ISR only */
Std_ReturnType timer0_pwm_duty_cycle(const timer0_t* tmr_obj, uint8 duty_cycle)
{
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <timer0_pwm_duty_cycle+0xa>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <timer0_pwm_duty_cycle+0xc>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	9b 83       	std	Y+3, r25	; 0x03
    10be:	8a 83       	std	Y+2, r24	; 0x02
    10c0:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == tmr_obj)
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	11 f4       	brne	.+4      	; 0x10d2 <timer0_pwm_duty_cycle+0x26>
	{
		ret = E_NOT_OK;
    10ce:	19 82       	std	Y+1, r1	; 0x01
    10d0:	76 c0       	rjmp	.+236    	; 0x11be <timer0_pwm_duty_cycle+0x112>
	}
	else
	{
		if(tmr_obj->timer0_general_mode == TIMER0_FAST_PWM_MODE ||
    10d2:	ea 81       	ldd	r30, Y+2	; 0x02
    10d4:	fb 81       	ldd	r31, Y+3	; 0x03
    10d6:	80 81       	ld	r24, Z
    10d8:	80 7c       	andi	r24, 0xC0	; 192
    10da:	80 3c       	cpi	r24, 0xC0	; 192
    10dc:	39 f0       	breq	.+14     	; 0x10ec <timer0_pwm_duty_cycle+0x40>
    10de:	ea 81       	ldd	r30, Y+2	; 0x02
    10e0:	fb 81       	ldd	r31, Y+3	; 0x03
    10e2:	80 81       	ld	r24, Z
    10e4:	80 7c       	andi	r24, 0xC0	; 192
    10e6:	80 34       	cpi	r24, 0x40	; 64
    10e8:	09 f0       	breq	.+2      	; 0x10ec <timer0_pwm_duty_cycle+0x40>
    10ea:	69 c0       	rjmp	.+210    	; 0x11be <timer0_pwm_duty_cycle+0x112>
				tmr_obj->timer0_general_mode == TIMER0_PHASE_CORRECT_PWM_MODE)
		{
			if (tmr_obj->timer0_co0_pin_state == TIMER0_INVERTED_PWM)
    10ec:	ea 81       	ldd	r30, Y+2	; 0x02
    10ee:	fb 81       	ldd	r31, Y+3	; 0x03
    10f0:	80 81       	ld	r24, Z
    10f2:	88 73       	andi	r24, 0x38	; 56
    10f4:	80 32       	cpi	r24, 0x20	; 32
    10f6:	a1 f5       	brne	.+104    	; 0x1160 <timer0_pwm_duty_cycle+0xb4>
			{
				OCR0 = (uint8)((1.0-(float)duty_cycle/100.0)*255);
    10f8:	0c e5       	ldi	r16, 0x5C	; 92
    10fa:	10 e0       	ldi	r17, 0x00	; 0
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	a0 e0       	ldi	r26, 0x00	; 0
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	48 ec       	ldi	r20, 0xC8	; 200
    111c:	52 ec       	ldi	r21, 0xC2	; 194
    111e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	bc 01       	movw	r22, r24
    1128:	cd 01       	movw	r24, r26
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e8       	ldi	r20, 0x80	; 128
    1130:	5f e3       	ldi	r21, 0x3F	; 63
    1132:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	4f e7       	ldi	r20, 0x7F	; 127
    1144:	53 e4       	ldi	r21, 0x43	; 67
    1146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	f8 01       	movw	r30, r16
    115c:	80 83       	st	Z, r24
    115e:	2f c0       	rjmp	.+94     	; 0x11be <timer0_pwm_duty_cycle+0x112>
			}
			else if (tmr_obj->timer0_co0_pin_state == TIMER0_NON_INVERTED_PWM)
    1160:	ea 81       	ldd	r30, Y+2	; 0x02
    1162:	fb 81       	ldd	r31, Y+3	; 0x03
    1164:	80 81       	ld	r24, Z
    1166:	88 73       	andi	r24, 0x38	; 56
    1168:	88 32       	cpi	r24, 0x28	; 40
    116a:	49 f5       	brne	.+82     	; 0x11be <timer0_pwm_duty_cycle+0x112>
			{
				OCR0 = (uint8)(((float)duty_cycle/100.0)*255);
    116c:	0c e5       	ldi	r16, 0x5C	; 92
    116e:	10 e0       	ldi	r17, 0x00	; 0
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a0 e0       	ldi	r26, 0x00	; 0
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	bc 01       	movw	r22, r24
    1188:	cd 01       	movw	r24, r26
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	48 ec       	ldi	r20, 0xC8	; 200
    1190:	52 e4       	ldi	r21, 0x42	; 66
    1192:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	bc 01       	movw	r22, r24
    119c:	cd 01       	movw	r24, r26
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	4f e7       	ldi	r20, 0x7F	; 127
    11a4:	53 e4       	ldi	r21, 0x43	; 67
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	bc 01       	movw	r22, r24
    11b0:	cd 01       	movw	r24, r26
    11b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	f8 01       	movw	r30, r16
    11bc:	80 83       	st	Z, r24
			}
		}
	}
	return ret;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	08 95       	ret

000011d2 <timer0_pwm_start>:
Std_ReturnType timer0_pwm_start(const timer0_t* tmr_obj)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <timer0_pwm_start+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <timer0_pwm_start+0x8>
    11da:	0f 92       	push	r0
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	9b 83       	std	Y+3, r25	; 0x03
    11e2:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	89 83       	std	Y+1, r24	; 0x01
	if(tmr_obj == NULL)
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	9b 81       	ldd	r25, Y+3	; 0x03
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <timer0_pwm_start+0x22>
	{
		ret = E_NOT_OK;
    11f0:	19 82       	std	Y+1, r1	; 0x01
    11f2:	50 c0       	rjmp	.+160    	; 0x1294 <timer0_pwm_start+0xc2>
	}
	else
	{
		if (tmr_obj->timer0_general_mode == TIMER0_FAST_PWM_MODE||
    11f4:	ea 81       	ldd	r30, Y+2	; 0x02
    11f6:	fb 81       	ldd	r31, Y+3	; 0x03
    11f8:	80 81       	ld	r24, Z
    11fa:	80 7c       	andi	r24, 0xC0	; 192
    11fc:	80 3c       	cpi	r24, 0xC0	; 192
    11fe:	39 f0       	breq	.+14     	; 0x120e <timer0_pwm_start+0x3c>
    1200:	ea 81       	ldd	r30, Y+2	; 0x02
    1202:	fb 81       	ldd	r31, Y+3	; 0x03
    1204:	80 81       	ld	r24, Z
    1206:	80 7c       	andi	r24, 0xC0	; 192
    1208:	80 34       	cpi	r24, 0x40	; 64
    120a:	09 f0       	breq	.+2      	; 0x120e <timer0_pwm_start+0x3c>
    120c:	42 c0       	rjmp	.+132    	; 0x1292 <timer0_pwm_start+0xc0>
				tmr_obj->timer0_general_mode == TIMER0_PHASE_CORRECT_PWM_MODE)
		{
			switch(tmr_obj->timer0_co0_pin_state)
    120e:	ea 81       	ldd	r30, Y+2	; 0x02
    1210:	fb 81       	ldd	r31, Y+3	; 0x03
    1212:	80 81       	ld	r24, Z
    1214:	86 95       	lsr	r24
    1216:	86 95       	lsr	r24
    1218:	86 95       	lsr	r24
    121a:	87 70       	andi	r24, 0x07	; 7
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3d 83       	std	Y+5, r19	; 0x05
    1222:	2c 83       	std	Y+4, r18	; 0x04
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	84 30       	cpi	r24, 0x04	; 4
    122a:	91 05       	cpc	r25, r1
    122c:	31 f0       	breq	.+12     	; 0x123a <timer0_pwm_start+0x68>
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	25 30       	cpi	r18, 0x05	; 5
    1234:	31 05       	cpc	r19, r1
    1236:	b9 f0       	breq	.+46     	; 0x1266 <timer0_pwm_start+0x94>
    1238:	2d c0       	rjmp	.+90     	; 0x1294 <timer0_pwm_start+0xc2>
			{
			case TIMER0_INVERTED_PWM:		SET_BIT(TCCR0, COM00); SET_BIT(TCCR0, COM01);	// set(COM00:1)
    123a:	a3 e5       	ldi	r26, 0x53	; 83
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e3 e5       	ldi	r30, 0x53	; 83
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	80 61       	ori	r24, 0x10	; 16
    1246:	8c 93       	st	X, r24
    1248:	a3 e5       	ldi	r26, 0x53	; 83
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e3 e5       	ldi	r30, 0x53	; 83
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 62       	ori	r24, 0x20	; 32
    1254:	8c 93       	st	X, r24
											SET_BIT(DDRB, DDB3);	// set OC0 as digital o/p pin
    1256:	a7 e3       	ldi	r26, 0x37	; 55
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e7 e3       	ldi	r30, 0x37	; 55
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	88 60       	ori	r24, 0x08	; 8
    1262:	8c 93       	st	X, r24
    1264:	17 c0       	rjmp	.+46     	; 0x1294 <timer0_pwm_start+0xc2>
				break;
			case TIMER0_NON_INVERTED_PWM:	CLEAR_BIT(TCCR0, COM00); SET_BIT(TCCR0, COM01);
    1266:	a3 e5       	ldi	r26, 0x53	; 83
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e3 e5       	ldi	r30, 0x53	; 83
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	8f 7e       	andi	r24, 0xEF	; 239
    1272:	8c 93       	st	X, r24
    1274:	a3 e5       	ldi	r26, 0x53	; 83
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e3 e5       	ldi	r30, 0x53	; 83
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	80 62       	ori	r24, 0x20	; 32
    1280:	8c 93       	st	X, r24
											SET_BIT(DDRB, DDB3);	// set OC0 as digital o/p pin
    1282:	a7 e3       	ldi	r26, 0x37	; 55
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e7 e3       	ldi	r30, 0x37	; 55
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	88 60       	ori	r24, 0x08	; 8
    128e:	8c 93       	st	X, r24
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <timer0_pwm_start+0xc2>
				break;
			}
		}
		else
		{
			ret = E_NOT_OK;
    1292:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return ret;
    1294:	89 81       	ldd	r24, Y+1	; 0x01
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <timer0_pwm_stop>:
Std_ReturnType timer0_pwm_stop()
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	0f 92       	push	r0
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= ~(0x30);		// pin OC0 disconnected (clear (COM00:1)
    12b4:	a3 e5       	ldi	r26, 0x53	; 83
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e3 e5       	ldi	r30, 0x53	; 83
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8f 7c       	andi	r24, 0xCF	; 207
    12c0:	8c 93       	st	X, r24
	return ret;
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c4:	0f 90       	pop	r0
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <timer0_set_mode>:

/* ------------------------------ Helper Functions Definitions ------------------------------ */
static void timer0_set_mode(const timer0_t* tmr_obj)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <timer0_set_mode+0x6>
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <timer0_set_mode+0x8>
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	9a 83       	std	Y+2, r25	; 0x02
    12da:	89 83       	std	Y+1, r24	; 0x01
	if (tmr_obj->timer0_general_mode == TIMER0_NORMAL_MODE)
    12dc:	e9 81       	ldd	r30, Y+1	; 0x01
    12de:	fa 81       	ldd	r31, Y+2	; 0x02
    12e0:	80 81       	ld	r24, Z
    12e2:	80 7c       	andi	r24, 0xC0	; 192
    12e4:	88 23       	and	r24, r24
    12e6:	41 f4       	brne	.+16     	; 0x12f8 <timer0_set_mode+0x2c>
	{
		// set (WGM20:1) bits in Normal mode
		TCCR0 &= (0xB7);
    12e8:	a3 e5       	ldi	r26, 0x53	; 83
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e3 e5       	ldi	r30, 0x53	; 83
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	87 7b       	andi	r24, 0xB7	; 183
    12f4:	8c 93       	st	X, r24
    12f6:	37 c0       	rjmp	.+110    	; 0x1366 <timer0_set_mode+0x9a>
	}
	else if(tmr_obj->timer0_general_mode == TIMER0_CLEAR_TIMER_COMPARE_MODE)
    12f8:	e9 81       	ldd	r30, Y+1	; 0x01
    12fa:	fa 81       	ldd	r31, Y+2	; 0x02
    12fc:	80 81       	ld	r24, Z
    12fe:	80 7c       	andi	r24, 0xC0	; 192
    1300:	80 38       	cpi	r24, 0x80	; 128
    1302:	79 f4       	brne	.+30     	; 0x1322 <timer0_set_mode+0x56>
	{
		// set (WGM20:1) bits in Clear Timer on Compare mode
		CLEAR_BIT(TCCR0, WGM00);
    1304:	a3 e5       	ldi	r26, 0x53	; 83
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e3 e5       	ldi	r30, 0x53	; 83
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	8f 7b       	andi	r24, 0xBF	; 191
    1310:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    1312:	a3 e5       	ldi	r26, 0x53	; 83
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e3 e5       	ldi	r30, 0x53	; 83
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	88 60       	ori	r24, 0x08	; 8
    131e:	8c 93       	st	X, r24
    1320:	22 c0       	rjmp	.+68     	; 0x1366 <timer0_set_mode+0x9a>
	}
	else if(tmr_obj->timer0_general_mode == TIMER0_FAST_PWM_MODE)
    1322:	e9 81       	ldd	r30, Y+1	; 0x01
    1324:	fa 81       	ldd	r31, Y+2	; 0x02
    1326:	80 81       	ld	r24, Z
    1328:	80 7c       	andi	r24, 0xC0	; 192
    132a:	80 3c       	cpi	r24, 0xC0	; 192
    132c:	41 f4       	brne	.+16     	; 0x133e <timer0_set_mode+0x72>
	{
		// set (WGM20:1) bits in Fast PWM mode
		TCCR0 |= 0x48;
    132e:	a3 e5       	ldi	r26, 0x53	; 83
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e3 e5       	ldi	r30, 0x53	; 83
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	88 64       	ori	r24, 0x48	; 72
    133a:	8c 93       	st	X, r24
    133c:	14 c0       	rjmp	.+40     	; 0x1366 <timer0_set_mode+0x9a>
	}
	else if(tmr_obj->timer0_general_mode == TIMER0_PHASE_CORRECT_PWM_MODE)
    133e:	e9 81       	ldd	r30, Y+1	; 0x01
    1340:	fa 81       	ldd	r31, Y+2	; 0x02
    1342:	80 81       	ld	r24, Z
    1344:	80 7c       	andi	r24, 0xC0	; 192
    1346:	80 34       	cpi	r24, 0x40	; 64
    1348:	71 f4       	brne	.+28     	; 0x1366 <timer0_set_mode+0x9a>
	{
		// set (WGM20:1) bits in Phase Correct PWM mode
		SET_BIT(TCCR0, WGM00);
    134a:	a3 e5       	ldi	r26, 0x53	; 83
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e3 e5       	ldi	r30, 0x53	; 83
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	80 64       	ori	r24, 0x40	; 64
    1356:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, WGM01);
    1358:	a3 e5       	ldi	r26, 0x53	; 83
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e3 e5       	ldi	r30, 0x53	; 83
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	87 7f       	andi	r24, 0xF7	; 247
    1364:	8c 93       	st	X, r24
	}
	switch(tmr_obj->timer0_co0_pin_state)
    1366:	e9 81       	ldd	r30, Y+1	; 0x01
    1368:	fa 81       	ldd	r31, Y+2	; 0x02
    136a:	80 81       	ld	r24, Z
    136c:	86 95       	lsr	r24
    136e:	86 95       	lsr	r24
    1370:	86 95       	lsr	r24
    1372:	87 70       	andi	r24, 0x07	; 7
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	3c 83       	std	Y+4, r19	; 0x04
    137a:	2b 83       	std	Y+3, r18	; 0x03
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	91 05       	cpc	r25, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <timer0_set_mode+0xbc>
    1386:	40 c0       	rjmp	.+128    	; 0x1408 <timer0_set_mode+0x13c>
    1388:	2b 81       	ldd	r18, Y+3	; 0x03
    138a:	3c 81       	ldd	r19, Y+4	; 0x04
    138c:	24 30       	cpi	r18, 0x04	; 4
    138e:	31 05       	cpc	r19, r1
    1390:	5c f4       	brge	.+22     	; 0x13a8 <timer0_set_mode+0xdc>
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	89 f0       	breq	.+34     	; 0x13be <timer0_set_mode+0xf2>
    139c:	2b 81       	ldd	r18, Y+3	; 0x03
    139e:	3c 81       	ldd	r19, Y+4	; 0x04
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	d9 f0       	breq	.+54     	; 0x13dc <timer0_set_mode+0x110>
    13a6:	46 c0       	rjmp	.+140    	; 0x1434 <timer0_set_mode+0x168>
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	84 30       	cpi	r24, 0x04	; 4
    13ae:	91 05       	cpc	r25, r1
    13b0:	31 f0       	breq	.+12     	; 0x13be <timer0_set_mode+0xf2>
    13b2:	2b 81       	ldd	r18, Y+3	; 0x03
    13b4:	3c 81       	ldd	r19, Y+4	; 0x04
    13b6:	25 30       	cpi	r18, 0x05	; 5
    13b8:	31 05       	cpc	r19, r1
    13ba:	81 f0       	breq	.+32     	; 0x13dc <timer0_set_mode+0x110>
    13bc:	3b c0       	rjmp	.+118    	; 0x1434 <timer0_set_mode+0x168>
	{
	case TIMER0_CTC_SET_PIN:
	case TIMER0_INVERTED_PWM:		TCCR0 |= 0x30;	// set(COM00:1)
    13be:	a3 e5       	ldi	r26, 0x53	; 83
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e3 e5       	ldi	r30, 0x53	; 83
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	80 63       	ori	r24, 0x30	; 48
    13ca:	8c 93       	st	X, r24
									SET_BIT(DDRB, DDB3);	// set OC0 as digital o/p pin
    13cc:	a7 e3       	ldi	r26, 0x37	; 55
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e7 e3       	ldi	r30, 0x37	; 55
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	88 60       	ori	r24, 0x08	; 8
    13d8:	8c 93       	st	X, r24
    13da:	33 c0       	rjmp	.+102    	; 0x1442 <timer0_set_mode+0x176>
		break;
	case TIMER0_CTC_CLEAR_PIN:
	case TIMER0_NON_INVERTED_PWM:	CLEAR_BIT(TCCR0, COM00); SET_BIT(TCCR0, COM01);
    13dc:	a3 e5       	ldi	r26, 0x53	; 83
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e3 e5       	ldi	r30, 0x53	; 83
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	8f 7e       	andi	r24, 0xEF	; 239
    13e8:	8c 93       	st	X, r24
    13ea:	a3 e5       	ldi	r26, 0x53	; 83
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e3 e5       	ldi	r30, 0x53	; 83
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	80 62       	ori	r24, 0x20	; 32
    13f6:	8c 93       	st	X, r24
									SET_BIT(DDRB, DDB3);	// set OC0 as digital o/p pin
    13f8:	a7 e3       	ldi	r26, 0x37	; 55
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e7 e3       	ldi	r30, 0x37	; 55
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	88 60       	ori	r24, 0x08	; 8
    1404:	8c 93       	st	X, r24
    1406:	1d c0       	rjmp	.+58     	; 0x1442 <timer0_set_mode+0x176>
		break;
	case TIMER0_CTC_TOGGLE_PIN:		SET_BIT(TCCR0, COM00); CLEAR_BIT(TCCR0, COM01);
    1408:	a3 e5       	ldi	r26, 0x53	; 83
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e3 e5       	ldi	r30, 0x53	; 83
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 61       	ori	r24, 0x10	; 16
    1414:	8c 93       	st	X, r24
    1416:	a3 e5       	ldi	r26, 0x53	; 83
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e3 e5       	ldi	r30, 0x53	; 83
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8f 7d       	andi	r24, 0xDF	; 223
    1422:	8c 93       	st	X, r24
									SET_BIT(DDRB, DDB3);	// set OC0 as digital o/p pin
    1424:	a7 e3       	ldi	r26, 0x37	; 55
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e7 e3       	ldi	r30, 0x37	; 55
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	88 60       	ori	r24, 0x08	; 8
    1430:	8c 93       	st	X, r24
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <timer0_set_mode+0x176>
		break;
	default:	 TCCR0 &= 0xCF;		// pin OC0 disconnected (clear (COM00:1)
    1434:	a3 e5       	ldi	r26, 0x53	; 83
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e3 e5       	ldi	r30, 0x53	; 83
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	8f 7c       	andi	r24, 0xCF	; 207
    1440:	8c 93       	st	X, r24
		break;
	}
}
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <timer0_set_clock_source>:

static void timer0_set_clock_source(const timer0_t* tmr_obj)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <timer0_set_clock_source+0x6>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <timer0_set_clock_source+0x8>
    1458:	00 d0       	rcall	.+0      	; 0x145a <timer0_set_clock_source+0xa>
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	9a 83       	std	Y+2, r25	; 0x02
    1460:	89 83       	std	Y+1, r24	; 0x01
	if (tmr_obj->timer0_clk_src == TIMER0_INTERNAL_CLK_SOURCE)
    1462:	e9 81       	ldd	r30, Y+1	; 0x01
    1464:	fa 81       	ldd	r31, Y+2	; 0x02
    1466:	81 81       	ldd	r24, Z+1	; 0x01
    1468:	81 70       	andi	r24, 0x01	; 1
    146a:	88 23       	and	r24, r24
    146c:	09 f0       	breq	.+2      	; 0x1470 <timer0_set_clock_source+0x20>
    146e:	81 c0       	rjmp	.+258    	; 0x1572 <timer0_set_clock_source+0x122>
	{
		switch(tmr_obj->timer0_prescaler_value)
    1470:	e9 81       	ldd	r30, Y+1	; 0x01
    1472:	fa 81       	ldd	r31, Y+2	; 0x02
    1474:	80 81       	ld	r24, Z
    1476:	87 70       	andi	r24, 0x07	; 7
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3e 83       	std	Y+6, r19	; 0x06
    147e:	2d 83       	std	Y+5, r18	; 0x05
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	82 30       	cpi	r24, 0x02	; 2
    1486:	91 05       	cpc	r25, r1
    1488:	c1 f1       	breq	.+112    	; 0x14fa <timer0_set_clock_source+0xaa>
    148a:	2d 81       	ldd	r18, Y+5	; 0x05
    148c:	3e 81       	ldd	r19, Y+6	; 0x06
    148e:	23 30       	cpi	r18, 0x03	; 3
    1490:	31 05       	cpc	r19, r1
    1492:	54 f4       	brge	.+20     	; 0x14a8 <timer0_set_clock_source+0x58>
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	89 f0       	breq	.+34     	; 0x14be <timer0_set_clock_source+0x6e>
    149c:	2d 81       	ldd	r18, Y+5	; 0x05
    149e:	3e 81       	ldd	r19, Y+6	; 0x06
    14a0:	21 30       	cpi	r18, 0x01	; 1
    14a2:	31 05       	cpc	r19, r1
    14a4:	d9 f0       	breq	.+54     	; 0x14dc <timer0_set_clock_source+0x8c>
    14a6:	56 c0       	rjmp	.+172    	; 0x1554 <timer0_set_clock_source+0x104>
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	83 30       	cpi	r24, 0x03	; 3
    14ae:	91 05       	cpc	r25, r1
    14b0:	99 f1       	breq	.+102    	; 0x1518 <timer0_set_clock_source+0xc8>
    14b2:	2d 81       	ldd	r18, Y+5	; 0x05
    14b4:	3e 81       	ldd	r19, Y+6	; 0x06
    14b6:	24 30       	cpi	r18, 0x04	; 4
    14b8:	31 05       	cpc	r19, r1
    14ba:	e9 f1       	breq	.+122    	; 0x1536 <timer0_set_clock_source+0xe6>
    14bc:	4b c0       	rjmp	.+150    	; 0x1554 <timer0_set_clock_source+0x104>
		{
		case TIMER0_PRESCALER_VALUE_DIV_BY_1:		SET_BIT(TCCR0, CS00); TCCR0 &= 0xF9;
    14be:	a3 e5       	ldi	r26, 0x53	; 83
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e3 e5       	ldi	r30, 0x53	; 83
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	81 60       	ori	r24, 0x01	; 1
    14ca:	8c 93       	st	X, r24
    14cc:	a3 e5       	ldi	r26, 0x53	; 83
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e3 e5       	ldi	r30, 0x53	; 83
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	89 7f       	andi	r24, 0xF9	; 249
    14d8:	8c 93       	st	X, r24
    14da:	89 c0       	rjmp	.+274    	; 0x15ee <timer0_set_clock_source+0x19e>
			break;
		case TIMER0_PRESCALER_VALUE_DIV_BY_8:		SET_BIT(TCCR0, CS01); TCCR0 &= 0xFA;
    14dc:	a3 e5       	ldi	r26, 0x53	; 83
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e3 e5       	ldi	r30, 0x53	; 83
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	82 60       	ori	r24, 0x02	; 2
    14e8:	8c 93       	st	X, r24
    14ea:	a3 e5       	ldi	r26, 0x53	; 83
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e3 e5       	ldi	r30, 0x53	; 83
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8a 7f       	andi	r24, 0xFA	; 250
    14f6:	8c 93       	st	X, r24
    14f8:	7a c0       	rjmp	.+244    	; 0x15ee <timer0_set_clock_source+0x19e>
			break;
		case TIMER0_PRESCALER_VALUE_DIV_BY_64:		CLEAR_BIT(TCCR0, CS02); TCCR0 |= 0xFC;
    14fa:	a3 e5       	ldi	r26, 0x53	; 83
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e3 e5       	ldi	r30, 0x53	; 83
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8b 7f       	andi	r24, 0xFB	; 251
    1506:	8c 93       	st	X, r24
    1508:	a3 e5       	ldi	r26, 0x53	; 83
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e3 e5       	ldi	r30, 0x53	; 83
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8c 6f       	ori	r24, 0xFC	; 252
    1514:	8c 93       	st	X, r24
    1516:	6b c0       	rjmp	.+214    	; 0x15ee <timer0_set_clock_source+0x19e>
			break;
		case TIMER0_PRESCALER_VALUE_DIV_BY_256:		SET_BIT(TCCR0, CS02); TCCR0 &= 0xFC;
    1518:	a3 e5       	ldi	r26, 0x53	; 83
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e3 e5       	ldi	r30, 0x53	; 83
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	84 60       	ori	r24, 0x04	; 4
    1524:	8c 93       	st	X, r24
    1526:	a3 e5       	ldi	r26, 0x53	; 83
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e3 e5       	ldi	r30, 0x53	; 83
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	8c 7f       	andi	r24, 0xFC	; 252
    1532:	8c 93       	st	X, r24
    1534:	5c c0       	rjmp	.+184    	; 0x15ee <timer0_set_clock_source+0x19e>
			break;
		case TIMER0_PRESCALER_VALUE_DIV_BY_1024:	CLEAR_BIT(TCCR0, CS01); TCCR0 |= 0x05;
    1536:	a3 e5       	ldi	r26, 0x53	; 83
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e3 e5       	ldi	r30, 0x53	; 83
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8d 7f       	andi	r24, 0xFD	; 253
    1542:	8c 93       	st	X, r24
    1544:	a3 e5       	ldi	r26, 0x53	; 83
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e3 e5       	ldi	r30, 0x53	; 83
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	85 60       	ori	r24, 0x05	; 5
    1550:	8c 93       	st	X, r24
    1552:	4d c0       	rjmp	.+154    	; 0x15ee <timer0_set_clock_source+0x19e>
			break;
		default: 	SET_BIT(TCCR2, CS20); TCCR2 &= 0xF9;
    1554:	a5 e4       	ldi	r26, 0x45	; 69
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e4       	ldi	r30, 0x45	; 69
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	81 60       	ori	r24, 0x01	; 1
    1560:	8c 93       	st	X, r24
    1562:	a5 e4       	ldi	r26, 0x45	; 69
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e5 e4       	ldi	r30, 0x45	; 69
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	89 7f       	andi	r24, 0xF9	; 249
    156e:	8c 93       	st	X, r24
    1570:	3e c0       	rjmp	.+124    	; 0x15ee <timer0_set_clock_source+0x19e>
			break;
		}
	}
	else if(tmr_obj->timer0_clk_src == TIMER0_EXTERNAL_CLK_SOURCE)
    1572:	e9 81       	ldd	r30, Y+1	; 0x01
    1574:	fa 81       	ldd	r31, Y+2	; 0x02
    1576:	81 81       	ldd	r24, Z+1	; 0x01
    1578:	81 70       	andi	r24, 0x01	; 1
    157a:	88 23       	and	r24, r24
    157c:	c1 f1       	breq	.+112    	; 0x15ee <timer0_set_clock_source+0x19e>
	{
		switch(tmr_obj->timer0_edge_detect)
    157e:	e9 81       	ldd	r30, Y+1	; 0x01
    1580:	fa 81       	ldd	r31, Y+2	; 0x02
    1582:	81 81       	ldd	r24, Z+1	; 0x01
    1584:	86 95       	lsr	r24
    1586:	87 70       	andi	r24, 0x07	; 7
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	3c 83       	std	Y+4, r19	; 0x04
    158e:	2b 83       	std	Y+3, r18	; 0x03
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	85 30       	cpi	r24, 0x05	; 5
    1596:	91 05       	cpc	r25, r1
    1598:	69 f0       	breq	.+26     	; 0x15b4 <timer0_set_clock_source+0x164>
    159a:	2b 81       	ldd	r18, Y+3	; 0x03
    159c:	3c 81       	ldd	r19, Y+4	; 0x04
    159e:	26 30       	cpi	r18, 0x06	; 6
    15a0:	31 05       	cpc	r19, r1
    15a2:	b9 f4       	brne	.+46     	; 0x15d2 <timer0_set_clock_source+0x182>
		{
		case TIMER0_EXTERNAL_CLK_RISING_EDGE:		TCCR0 |= 0x07;
    15a4:	a3 e5       	ldi	r26, 0x53	; 83
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e3 e5       	ldi	r30, 0x53	; 83
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	87 60       	ori	r24, 0x07	; 7
    15b0:	8c 93       	st	X, r24
    15b2:	16 c0       	rjmp	.+44     	; 0x15e0 <timer0_set_clock_source+0x190>
			break;
		case TIMER0_EXTERNAL_CLK_FALLING_EDGE:		CLEAR_BIT(TCCR0, CS00); TCCR0 |= 0x06;
    15b4:	a3 e5       	ldi	r26, 0x53	; 83
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e3 e5       	ldi	r30, 0x53	; 83
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8e 7f       	andi	r24, 0xFE	; 254
    15c0:	8c 93       	st	X, r24
    15c2:	a3 e5       	ldi	r26, 0x53	; 83
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e3 e5       	ldi	r30, 0x53	; 83
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	86 60       	ori	r24, 0x06	; 6
    15ce:	8c 93       	st	X, r24
    15d0:	07 c0       	rjmp	.+14     	; 0x15e0 <timer0_set_clock_source+0x190>
			break;
		default:	TCCR0 |= 0x07;	// Rising edge detector by default
    15d2:	a3 e5       	ldi	r26, 0x53	; 83
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e3 e5       	ldi	r30, 0x53	; 83
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	87 60       	ori	r24, 0x07	; 7
    15de:	8c 93       	st	X, r24
			break;
		}
		CLEAR_BIT(DDRB, DDB0);	// set T0 pin as Digital i/p for Counter mode
    15e0:	a7 e3       	ldi	r26, 0x37	; 55
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e7 e3       	ldi	r30, 0x37	; 55
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8e 7f       	andi	r24, 0xFE	; 254
    15ec:	8c 93       	st	X, r24
	}
}
    15ee:	26 96       	adiw	r28, 0x06	; 6
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <GPIO_pin_direction_initialize>:
volatile uint8 *PORT_registers[4] = {&PORTA, &PORTB, &PORTC, &PORTD};
volatile uint8 *PIN_registers[4] = {&PINA, &PINB, &PINC, &PIND};


Std_ReturnType GPIO_pin_direction_initialize(const gpio_config_pin_t* gpio_obj)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <GPIO_pin_direction_initialize+0x6>
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	9b 83       	std	Y+3, r25	; 0x03
    160e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	9b 81       	ldd	r25, Y+3	; 0x03
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	11 f4       	brne	.+4      	; 0x1620 <GPIO_pin_direction_initialize+0x20>
	{
		ret = E_NOT_OK;
    161c:	19 82       	std	Y+1, r1	; 0x01
    161e:	6e c0       	rjmp	.+220    	; 0x16fc <GPIO_pin_direction_initialize+0xfc>
	}
	else
	{
		ret = E_OK;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	89 83       	std	Y+1, r24	; 0x01
		if(gpio_obj->direction == GPIO_DIRECTION_INPUT)
    1624:	ea 81       	ldd	r30, Y+2	; 0x02
    1626:	fb 81       	ldd	r31, Y+3	; 0x03
    1628:	80 81       	ld	r24, Z
    162a:	80 74       	andi	r24, 0x40	; 64
    162c:	88 23       	and	r24, r24
    162e:	89 f5       	brne	.+98     	; 0x1692 <GPIO_pin_direction_initialize+0x92>
		{
			CLEAR_BIT(*DDR_registers[gpio_obj->port], gpio_obj->pin);
    1630:	ea 81       	ldd	r30, Y+2	; 0x02
    1632:	fb 81       	ldd	r31, Y+3	; 0x03
    1634:	80 81       	ld	r24, Z
    1636:	87 70       	andi	r24, 0x07	; 7
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	fc 01       	movw	r30, r24
    1642:	ef 54       	subi	r30, 0x4F	; 79
    1644:	fe 4f       	sbci	r31, 0xFE	; 254
    1646:	a0 81       	ld	r26, Z
    1648:	b1 81       	ldd	r27, Z+1	; 0x01
    164a:	ea 81       	ldd	r30, Y+2	; 0x02
    164c:	fb 81       	ldd	r31, Y+3	; 0x03
    164e:	80 81       	ld	r24, Z
    1650:	87 70       	andi	r24, 0x07	; 7
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	fc 01       	movw	r30, r24
    165c:	ef 54       	subi	r30, 0x4F	; 79
    165e:	fe 4f       	sbci	r31, 0xFE	; 254
    1660:	01 90       	ld	r0, Z+
    1662:	f0 81       	ld	r31, Z
    1664:	e0 2d       	mov	r30, r0
    1666:	40 81       	ld	r20, Z
    1668:	ea 81       	ldd	r30, Y+2	; 0x02
    166a:	fb 81       	ldd	r31, Y+3	; 0x03
    166c:	80 81       	ld	r24, Z
    166e:	86 95       	lsr	r24
    1670:	86 95       	lsr	r24
    1672:	86 95       	lsr	r24
    1674:	87 70       	andi	r24, 0x07	; 7
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <GPIO_pin_direction_initialize+0x86>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <GPIO_pin_direction_initialize+0x82>
    168a:	80 95       	com	r24
    168c:	84 23       	and	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	35 c0       	rjmp	.+106    	; 0x16fc <GPIO_pin_direction_initialize+0xfc>
		}
		else if(gpio_obj->direction == GPIO_DIRECTION_OUTPUT)
    1692:	ea 81       	ldd	r30, Y+2	; 0x02
    1694:	fb 81       	ldd	r31, Y+3	; 0x03
    1696:	80 81       	ld	r24, Z
    1698:	80 74       	andi	r24, 0x40	; 64
    169a:	88 23       	and	r24, r24
    169c:	79 f1       	breq	.+94     	; 0x16fc <GPIO_pin_direction_initialize+0xfc>
		{
			SET_BIT(*DDR_registers[gpio_obj->port], gpio_obj->pin);
    169e:	ea 81       	ldd	r30, Y+2	; 0x02
    16a0:	fb 81       	ldd	r31, Y+3	; 0x03
    16a2:	80 81       	ld	r24, Z
    16a4:	87 70       	andi	r24, 0x07	; 7
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	fc 01       	movw	r30, r24
    16b0:	ef 54       	subi	r30, 0x4F	; 79
    16b2:	fe 4f       	sbci	r31, 0xFE	; 254
    16b4:	a0 81       	ld	r26, Z
    16b6:	b1 81       	ldd	r27, Z+1	; 0x01
    16b8:	ea 81       	ldd	r30, Y+2	; 0x02
    16ba:	fb 81       	ldd	r31, Y+3	; 0x03
    16bc:	80 81       	ld	r24, Z
    16be:	87 70       	andi	r24, 0x07	; 7
    16c0:	88 2f       	mov	r24, r24
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	fc 01       	movw	r30, r24
    16ca:	ef 54       	subi	r30, 0x4F	; 79
    16cc:	fe 4f       	sbci	r31, 0xFE	; 254
    16ce:	01 90       	ld	r0, Z+
    16d0:	f0 81       	ld	r31, Z
    16d2:	e0 2d       	mov	r30, r0
    16d4:	40 81       	ld	r20, Z
    16d6:	ea 81       	ldd	r30, Y+2	; 0x02
    16d8:	fb 81       	ldd	r31, Y+3	; 0x03
    16da:	80 81       	ld	r24, Z
    16dc:	86 95       	lsr	r24
    16de:	86 95       	lsr	r24
    16e0:	86 95       	lsr	r24
    16e2:	87 70       	andi	r24, 0x07	; 7
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <GPIO_pin_direction_initialize+0xf4>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <GPIO_pin_direction_initialize+0xf0>
    16f8:	84 2b       	or	r24, r20
    16fa:	8c 93       	st	X, r24
		}
	}
	return ret;
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <GPIO_pin_initialize>:
Std_ReturnType GPIO_pin_initialize(const gpio_config_pin_t* gpio_obj)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <GPIO_pin_initialize+0x6>
    1710:	0f 92       	push	r0
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	9b 83       	std	Y+3, r25	; 0x03
    1718:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	89 83       	std	Y+1, r24	; 0x01
		if (NULL == gpio_obj)
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	9b 81       	ldd	r25, Y+3	; 0x03
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	11 f4       	brne	.+4      	; 0x172a <GPIO_pin_initialize+0x20>
		{
			ret = E_NOT_OK;
    1726:	19 82       	std	Y+1, r1	; 0x01
    1728:	12 c0       	rjmp	.+36     	; 0x174e <GPIO_pin_initialize+0x44>
		}
		else
		{
			ret = GPIO_pin_direction_initialize(gpio_obj);
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	9b 81       	ldd	r25, Y+3	; 0x03
    172e:	0e 94 00 0b 	call	0x1600	; 0x1600 <GPIO_pin_direction_initialize>
    1732:	89 83       	std	Y+1, r24	; 0x01
			ret = GPIO_pin_write_logic(gpio_obj, gpio_obj->logic);
    1734:	ea 81       	ldd	r30, Y+2	; 0x02
    1736:	fb 81       	ldd	r31, Y+3	; 0x03
    1738:	80 81       	ld	r24, Z
    173a:	88 1f       	adc	r24, r24
    173c:	88 27       	eor	r24, r24
    173e:	88 1f       	adc	r24, r24
    1740:	28 2f       	mov	r18, r24
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	9b 81       	ldd	r25, Y+3	; 0x03
    1746:	62 2f       	mov	r22, r18
    1748:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_pin_write_logic>
    174c:	89 83       	std	Y+1, r24	; 0x01
		}
		return ret;
    174e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <GPIO_pin_read_direction>:
Std_ReturnType GPIO_pin_read_direction(const gpio_config_pin_t* gpio_obj, uint8* Direction_read)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	00 d0       	rcall	.+0      	; 0x1762 <GPIO_pin_read_direction+0x6>
    1762:	00 d0       	rcall	.+0      	; 0x1764 <GPIO_pin_read_direction+0x8>
    1764:	0f 92       	push	r0
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	9b 83       	std	Y+3, r25	; 0x03
    176c:	8a 83       	std	Y+2, r24	; 0x02
    176e:	7d 83       	std	Y+5, r23	; 0x05
    1770:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	9b 81       	ldd	r25, Y+3	; 0x03
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	11 f4       	brne	.+4      	; 0x1782 <GPIO_pin_read_direction+0x26>
	{
		ret = E_NOT_OK;
    177e:	19 82       	std	Y+1, r1	; 0x01
    1780:	25 c0       	rjmp	.+74     	; 0x17cc <GPIO_pin_read_direction+0x70>
	}
	else
	{
		*Direction_read = READ_BIT(*DDR_registers[gpio_obj->port], gpio_obj->pin);
    1782:	ea 81       	ldd	r30, Y+2	; 0x02
    1784:	fb 81       	ldd	r31, Y+3	; 0x03
    1786:	80 81       	ld	r24, Z
    1788:	87 70       	andi	r24, 0x07	; 7
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	fc 01       	movw	r30, r24
    1794:	ef 54       	subi	r30, 0x4F	; 79
    1796:	fe 4f       	sbci	r31, 0xFE	; 254
    1798:	01 90       	ld	r0, Z+
    179a:	f0 81       	ld	r31, Z
    179c:	e0 2d       	mov	r30, r0
    179e:	80 81       	ld	r24, Z
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	ea 81       	ldd	r30, Y+2	; 0x02
    17a6:	fb 81       	ldd	r31, Y+3	; 0x03
    17a8:	80 81       	ld	r24, Z
    17aa:	86 95       	lsr	r24
    17ac:	86 95       	lsr	r24
    17ae:	86 95       	lsr	r24
    17b0:	87 70       	andi	r24, 0x07	; 7
    17b2:	88 2f       	mov	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a9 01       	movw	r20, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <GPIO_pin_read_direction+0x62>
    17ba:	55 95       	asr	r21
    17bc:	47 95       	ror	r20
    17be:	8a 95       	dec	r24
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <GPIO_pin_read_direction+0x5e>
    17c2:	ca 01       	movw	r24, r20
    17c4:	81 70       	andi	r24, 0x01	; 1
    17c6:	ec 81       	ldd	r30, Y+4	; 0x04
    17c8:	fd 81       	ldd	r31, Y+5	; 0x05
    17ca:	80 83       	st	Z, r24
	}
	return ret;
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <GPIO_pin_write_logic>:
Std_ReturnType GPIO_pin_write_logic(const gpio_config_pin_t* gpio_obj, uint8 logic)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <GPIO_pin_write_logic+0x6>
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <GPIO_pin_write_logic+0x8>
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	9b 83       	std	Y+3, r25	; 0x03
    17ec:	8a 83       	std	Y+2, r24	; 0x02
    17ee:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	9b 81       	ldd	r25, Y+3	; 0x03
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	11 f4       	brne	.+4      	; 0x1800 <GPIO_pin_write_logic+0x22>
	{
		ret = E_NOT_OK;
    17fc:	19 82       	std	Y+1, r1	; 0x01
    17fe:	66 c0       	rjmp	.+204    	; 0x18cc <GPIO_pin_write_logic+0xee>
	}
	else
	{
		if(logic == GPIO_HIGH)
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	81 f5       	brne	.+96     	; 0x1866 <GPIO_pin_write_logic+0x88>
		{
			SET_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    1806:	ea 81       	ldd	r30, Y+2	; 0x02
    1808:	fb 81       	ldd	r31, Y+3	; 0x03
    180a:	80 81       	ld	r24, Z
    180c:	87 70       	andi	r24, 0x07	; 7
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	fc 01       	movw	r30, r24
    1818:	e7 54       	subi	r30, 0x47	; 71
    181a:	fe 4f       	sbci	r31, 0xFE	; 254
    181c:	a0 81       	ld	r26, Z
    181e:	b1 81       	ldd	r27, Z+1	; 0x01
    1820:	ea 81       	ldd	r30, Y+2	; 0x02
    1822:	fb 81       	ldd	r31, Y+3	; 0x03
    1824:	80 81       	ld	r24, Z
    1826:	87 70       	andi	r24, 0x07	; 7
    1828:	88 2f       	mov	r24, r24
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	fc 01       	movw	r30, r24
    1832:	e7 54       	subi	r30, 0x47	; 71
    1834:	fe 4f       	sbci	r31, 0xFE	; 254
    1836:	01 90       	ld	r0, Z+
    1838:	f0 81       	ld	r31, Z
    183a:	e0 2d       	mov	r30, r0
    183c:	40 81       	ld	r20, Z
    183e:	ea 81       	ldd	r30, Y+2	; 0x02
    1840:	fb 81       	ldd	r31, Y+3	; 0x03
    1842:	80 81       	ld	r24, Z
    1844:	86 95       	lsr	r24
    1846:	86 95       	lsr	r24
    1848:	86 95       	lsr	r24
    184a:	87 70       	andi	r24, 0x07	; 7
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 2e       	mov	r0, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <GPIO_pin_write_logic+0x7e>
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	0a 94       	dec	r0
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <GPIO_pin_write_logic+0x7a>
    1860:	84 2b       	or	r24, r20
    1862:	8c 93       	st	X, r24
    1864:	33 c0       	rjmp	.+102    	; 0x18cc <GPIO_pin_write_logic+0xee>
		}
		else if(logic == GPIO_LOW)
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	88 23       	and	r24, r24
    186a:	81 f5       	brne	.+96     	; 0x18cc <GPIO_pin_write_logic+0xee>
		{
			CLEAR_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    186c:	ea 81       	ldd	r30, Y+2	; 0x02
    186e:	fb 81       	ldd	r31, Y+3	; 0x03
    1870:	80 81       	ld	r24, Z
    1872:	87 70       	andi	r24, 0x07	; 7
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	fc 01       	movw	r30, r24
    187e:	e7 54       	subi	r30, 0x47	; 71
    1880:	fe 4f       	sbci	r31, 0xFE	; 254
    1882:	a0 81       	ld	r26, Z
    1884:	b1 81       	ldd	r27, Z+1	; 0x01
    1886:	ea 81       	ldd	r30, Y+2	; 0x02
    1888:	fb 81       	ldd	r31, Y+3	; 0x03
    188a:	80 81       	ld	r24, Z
    188c:	87 70       	andi	r24, 0x07	; 7
    188e:	88 2f       	mov	r24, r24
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	fc 01       	movw	r30, r24
    1898:	e7 54       	subi	r30, 0x47	; 71
    189a:	fe 4f       	sbci	r31, 0xFE	; 254
    189c:	01 90       	ld	r0, Z+
    189e:	f0 81       	ld	r31, Z
    18a0:	e0 2d       	mov	r30, r0
    18a2:	40 81       	ld	r20, Z
    18a4:	ea 81       	ldd	r30, Y+2	; 0x02
    18a6:	fb 81       	ldd	r31, Y+3	; 0x03
    18a8:	80 81       	ld	r24, Z
    18aa:	86 95       	lsr	r24
    18ac:	86 95       	lsr	r24
    18ae:	86 95       	lsr	r24
    18b0:	87 70       	andi	r24, 0x07	; 7
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 2e       	mov	r0, r18
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <GPIO_pin_write_logic+0xe4>
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	0a 94       	dec	r0
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <GPIO_pin_write_logic+0xe0>
    18c6:	80 95       	com	r24
    18c8:	84 23       	and	r24, r20
    18ca:	8c 93       	st	X, r24
		}
	}
	return ret;
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <GPIO_pin_read_logic>:
Std_ReturnType GPIO_pin_read_logic(const gpio_config_pin_t* gpio_obj, uint8* logic_res)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <GPIO_pin_read_logic+0x6>
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <GPIO_pin_read_logic+0x8>
    18e4:	0f 92       	push	r0
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	9b 83       	std	Y+3, r25	; 0x03
    18ec:	8a 83       	std	Y+2, r24	; 0x02
    18ee:	7d 83       	std	Y+5, r23	; 0x05
    18f0:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	9b 81       	ldd	r25, Y+3	; 0x03
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	11 f4       	brne	.+4      	; 0x1902 <GPIO_pin_read_logic+0x26>
	{
		ret = E_NOT_OK;
    18fe:	19 82       	std	Y+1, r1	; 0x01
    1900:	25 c0       	rjmp	.+74     	; 0x194c <GPIO_pin_read_logic+0x70>
	}
	else
	{
		*logic_res = READ_BIT(*PIN_registers[gpio_obj->port], gpio_obj->pin);
    1902:	ea 81       	ldd	r30, Y+2	; 0x02
    1904:	fb 81       	ldd	r31, Y+3	; 0x03
    1906:	80 81       	ld	r24, Z
    1908:	87 70       	andi	r24, 0x07	; 7
    190a:	88 2f       	mov	r24, r24
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	fc 01       	movw	r30, r24
    1914:	ef 53       	subi	r30, 0x3F	; 63
    1916:	fe 4f       	sbci	r31, 0xFE	; 254
    1918:	01 90       	ld	r0, Z+
    191a:	f0 81       	ld	r31, Z
    191c:	e0 2d       	mov	r30, r0
    191e:	80 81       	ld	r24, Z
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	ea 81       	ldd	r30, Y+2	; 0x02
    1926:	fb 81       	ldd	r31, Y+3	; 0x03
    1928:	80 81       	ld	r24, Z
    192a:	86 95       	lsr	r24
    192c:	86 95       	lsr	r24
    192e:	86 95       	lsr	r24
    1930:	87 70       	andi	r24, 0x07	; 7
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a9 01       	movw	r20, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <GPIO_pin_read_logic+0x62>
    193a:	55 95       	asr	r21
    193c:	47 95       	ror	r20
    193e:	8a 95       	dec	r24
    1940:	e2 f7       	brpl	.-8      	; 0x193a <GPIO_pin_read_logic+0x5e>
    1942:	ca 01       	movw	r24, r20
    1944:	81 70       	andi	r24, 0x01	; 1
    1946:	ec 81       	ldd	r30, Y+4	; 0x04
    1948:	fd 81       	ldd	r31, Y+5	; 0x05
    194a:	80 83       	st	Z, r24
	}
	return ret;
    194c:	89 81       	ldd	r24, Y+1	; 0x01
}
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <GPIO_pin_toggle_logic>:
Std_ReturnType GPIO_pin_toggle_logic(const gpio_config_pin_t* gpio_obj)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	00 d0       	rcall	.+0      	; 0x1964 <GPIO_pin_toggle_logic+0x6>
    1964:	0f 92       	push	r0
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	9b 83       	std	Y+3, r25	; 0x03
    196c:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	9b 81       	ldd	r25, Y+3	; 0x03
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	11 f4       	brne	.+4      	; 0x197e <GPIO_pin_toggle_logic+0x20>
	{
		ret = E_NOT_OK;
    197a:	19 82       	std	Y+1, r1	; 0x01
    197c:	2f c0       	rjmp	.+94     	; 0x19dc <GPIO_pin_toggle_logic+0x7e>
	}
	else
	{
		TOGGLE_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    197e:	ea 81       	ldd	r30, Y+2	; 0x02
    1980:	fb 81       	ldd	r31, Y+3	; 0x03
    1982:	80 81       	ld	r24, Z
    1984:	87 70       	andi	r24, 0x07	; 7
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	fc 01       	movw	r30, r24
    1990:	e7 54       	subi	r30, 0x47	; 71
    1992:	fe 4f       	sbci	r31, 0xFE	; 254
    1994:	a0 81       	ld	r26, Z
    1996:	b1 81       	ldd	r27, Z+1	; 0x01
    1998:	ea 81       	ldd	r30, Y+2	; 0x02
    199a:	fb 81       	ldd	r31, Y+3	; 0x03
    199c:	80 81       	ld	r24, Z
    199e:	87 70       	andi	r24, 0x07	; 7
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	fc 01       	movw	r30, r24
    19aa:	e7 54       	subi	r30, 0x47	; 71
    19ac:	fe 4f       	sbci	r31, 0xFE	; 254
    19ae:	01 90       	ld	r0, Z+
    19b0:	f0 81       	ld	r31, Z
    19b2:	e0 2d       	mov	r30, r0
    19b4:	40 81       	ld	r20, Z
    19b6:	ea 81       	ldd	r30, Y+2	; 0x02
    19b8:	fb 81       	ldd	r31, Y+3	; 0x03
    19ba:	80 81       	ld	r24, Z
    19bc:	86 95       	lsr	r24
    19be:	86 95       	lsr	r24
    19c0:	86 95       	lsr	r24
    19c2:	87 70       	andi	r24, 0x07	; 7
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	02 2e       	mov	r0, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <GPIO_pin_toggle_logic+0x76>
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	0a 94       	dec	r0
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <GPIO_pin_toggle_logic+0x72>
    19d8:	84 27       	eor	r24, r20
    19da:	8c 93       	st	X, r24
	}
	return ret;
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <GPIO_pin_PullUp_Enable>:
Std_ReturnType GPIO_pin_PullUp_Enable(const gpio_config_pin_t* gpio_obj)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <GPIO_pin_PullUp_Enable+0x6>
    19f0:	0f 92       	push	r0
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	9b 83       	std	Y+3, r25	; 0x03
    19f8:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	9b 81       	ldd	r25, Y+3	; 0x03
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	11 f4       	brne	.+4      	; 0x1a0a <GPIO_pin_PullUp_Enable+0x20>
	{
		ret = E_NOT_OK;
    1a06:	19 82       	std	Y+1, r1	; 0x01
    1a08:	65 c0       	rjmp	.+202    	; 0x1ad4 <GPIO_pin_PullUp_Enable+0xea>
	}
	else
	{
		CLEAR_BIT(*(DDR_registers[gpio_obj->port]), gpio_obj->pin);
    1a0a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a0c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a0e:	80 81       	ld	r24, Z
    1a10:	87 70       	andi	r24, 0x07	; 7
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	ef 54       	subi	r30, 0x4F	; 79
    1a1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a20:	a0 81       	ld	r26, Z
    1a22:	b1 81       	ldd	r27, Z+1	; 0x01
    1a24:	ea 81       	ldd	r30, Y+2	; 0x02
    1a26:	fb 81       	ldd	r31, Y+3	; 0x03
    1a28:	80 81       	ld	r24, Z
    1a2a:	87 70       	andi	r24, 0x07	; 7
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	fc 01       	movw	r30, r24
    1a36:	ef 54       	subi	r30, 0x4F	; 79
    1a38:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3a:	01 90       	ld	r0, Z+
    1a3c:	f0 81       	ld	r31, Z
    1a3e:	e0 2d       	mov	r30, r0
    1a40:	40 81       	ld	r20, Z
    1a42:	ea 81       	ldd	r30, Y+2	; 0x02
    1a44:	fb 81       	ldd	r31, Y+3	; 0x03
    1a46:	80 81       	ld	r24, Z
    1a48:	86 95       	lsr	r24
    1a4a:	86 95       	lsr	r24
    1a4c:	86 95       	lsr	r24
    1a4e:	87 70       	andi	r24, 0x07	; 7
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <GPIO_pin_PullUp_Enable+0x74>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	2a 95       	dec	r18
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <GPIO_pin_PullUp_Enable+0x70>
    1a62:	80 95       	com	r24
    1a64:	84 23       	and	r24, r20
    1a66:	8c 93       	st	X, r24
		SET_BIT(*(PORT_registers[gpio_obj->port]), gpio_obj->pin);
    1a68:	ea 81       	ldd	r30, Y+2	; 0x02
    1a6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a6c:	80 81       	ld	r24, Z
    1a6e:	87 70       	andi	r24, 0x07	; 7
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	fc 01       	movw	r30, r24
    1a7a:	e7 54       	subi	r30, 0x47	; 71
    1a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7e:	a0 81       	ld	r26, Z
    1a80:	b1 81       	ldd	r27, Z+1	; 0x01
    1a82:	ea 81       	ldd	r30, Y+2	; 0x02
    1a84:	fb 81       	ldd	r31, Y+3	; 0x03
    1a86:	80 81       	ld	r24, Z
    1a88:	87 70       	andi	r24, 0x07	; 7
    1a8a:	88 2f       	mov	r24, r24
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	fc 01       	movw	r30, r24
    1a94:	e7 54       	subi	r30, 0x47	; 71
    1a96:	fe 4f       	sbci	r31, 0xFE	; 254
    1a98:	01 90       	ld	r0, Z+
    1a9a:	f0 81       	ld	r31, Z
    1a9c:	e0 2d       	mov	r30, r0
    1a9e:	40 81       	ld	r20, Z
    1aa0:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa2:	fb 81       	ldd	r31, Y+3	; 0x03
    1aa4:	80 81       	ld	r24, Z
    1aa6:	86 95       	lsr	r24
    1aa8:	86 95       	lsr	r24
    1aaa:	86 95       	lsr	r24
    1aac:	87 70       	andi	r24, 0x07	; 7
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	02 2e       	mov	r0, r18
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <GPIO_pin_PullUp_Enable+0xd4>
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	0a 94       	dec	r0
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <GPIO_pin_PullUp_Enable+0xd0>
    1ac2:	84 2b       	or	r24, r20
    1ac4:	8c 93       	st	X, r24
		CLEAR_BIT(SFIOR, PUD);
    1ac6:	a0 e5       	ldi	r26, 0x50	; 80
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e0 e5       	ldi	r30, 0x50	; 80
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	8b 7f       	andi	r24, 0xFB	; 251
    1ad2:	8c 93       	st	X, r24
	}
	return ret;
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <GPIO_pin_PullUp_Disable>:
Std_ReturnType GPIO_pin_PullUp_Disable(const gpio_config_pin_t* gpio_obj)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <GPIO_pin_PullUp_Disable+0x6>
    1ae8:	0f 92       	push	r0
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	9b 83       	std	Y+3, r25	; 0x03
    1af0:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == gpio_obj)
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	9b 81       	ldd	r25, Y+3	; 0x03
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	11 f4       	brne	.+4      	; 0x1b02 <GPIO_pin_PullUp_Disable+0x20>
	{
		ret = E_NOT_OK;
    1afe:	19 82       	std	Y+1, r1	; 0x01
    1b00:	30 c0       	rjmp	.+96     	; 0x1b62 <GPIO_pin_PullUp_Disable+0x80>
	}
	else
	{
		CLEAR_BIT(*PORT_registers[gpio_obj->port], gpio_obj->pin);
    1b02:	ea 81       	ldd	r30, Y+2	; 0x02
    1b04:	fb 81       	ldd	r31, Y+3	; 0x03
    1b06:	80 81       	ld	r24, Z
    1b08:	87 70       	andi	r24, 0x07	; 7
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	fc 01       	movw	r30, r24
    1b14:	e7 54       	subi	r30, 0x47	; 71
    1b16:	fe 4f       	sbci	r31, 0xFE	; 254
    1b18:	a0 81       	ld	r26, Z
    1b1a:	b1 81       	ldd	r27, Z+1	; 0x01
    1b1c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b1e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b20:	80 81       	ld	r24, Z
    1b22:	87 70       	andi	r24, 0x07	; 7
    1b24:	88 2f       	mov	r24, r24
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	e7 54       	subi	r30, 0x47	; 71
    1b30:	fe 4f       	sbci	r31, 0xFE	; 254
    1b32:	01 90       	ld	r0, Z+
    1b34:	f0 81       	ld	r31, Z
    1b36:	e0 2d       	mov	r30, r0
    1b38:	40 81       	ld	r20, Z
    1b3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b3e:	80 81       	ld	r24, Z
    1b40:	86 95       	lsr	r24
    1b42:	86 95       	lsr	r24
    1b44:	86 95       	lsr	r24
    1b46:	87 70       	andi	r24, 0x07	; 7
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <GPIO_pin_PullUp_Disable+0x76>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <GPIO_pin_PullUp_Disable+0x72>
    1b5c:	80 95       	com	r24
    1b5e:	84 23       	and	r24, r20
    1b60:	8c 93       	st	X, r24
	}
	return ret;
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <GPIO_port_direction_initialize>:

Std_ReturnType GPIO_port_direction_initialize(gpio_port_t _port, uint8 port_direction)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <GPIO_port_direction_initialize+0x6>
    1b76:	0f 92       	push	r0
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	8a 83       	std	Y+2, r24	; 0x02
    1b7e:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	84 30       	cpi	r24, 0x04	; 4
    1b88:	10 f0       	brcs	.+4      	; 0x1b8e <GPIO_port_direction_initialize+0x1e>
	{
		ret = E_NOT_OK;
    1b8a:	19 82       	std	Y+1, r1	; 0x01
    1b8c:	0d c0       	rjmp	.+26     	; 0x1ba8 <GPIO_port_direction_initialize+0x38>
	}
	else
	{
		*DDR_registers[_port] = port_direction;
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	88 2f       	mov	r24, r24
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	fc 01       	movw	r30, r24
    1b9a:	ef 54       	subi	r30, 0x4F	; 79
    1b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9e:	01 90       	ld	r0, Z+
    1ba0:	f0 81       	ld	r31, Z
    1ba2:	e0 2d       	mov	r30, r0
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	80 83       	st	Z, r24
	}
	return ret;
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <GPIO_port_initialize>:
Std_ReturnType GPIO_port_initialize(gpio_port_t _port, uint8 port_direction, uint8 port_logic)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <GPIO_port_initialize+0x6>
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <GPIO_port_initialize+0x8>
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	8a 83       	std	Y+2, r24	; 0x02
    1bc4:	6b 83       	std	Y+3, r22	; 0x03
    1bc6:	4c 83       	std	Y+4, r20	; 0x04
	Std_ReturnType ret = E_OK;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	84 30       	cpi	r24, 0x04	; 4
    1bd0:	10 f0       	brcs	.+4      	; 0x1bd6 <GPIO_port_initialize+0x20>
	{
		ret = E_NOT_OK;
    1bd2:	19 82       	std	Y+1, r1	; 0x01
    1bd4:	1a c0       	rjmp	.+52     	; 0x1c0a <GPIO_port_initialize+0x54>
	}
	else
	{
		*DDR_registers[_port] = port_direction;
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	fc 01       	movw	r30, r24
    1be2:	ef 54       	subi	r30, 0x4F	; 79
    1be4:	fe 4f       	sbci	r31, 0xFE	; 254
    1be6:	01 90       	ld	r0, Z+
    1be8:	f0 81       	ld	r31, Z
    1bea:	e0 2d       	mov	r30, r0
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	80 83       	st	Z, r24
		*PORT_registers[_port] = port_logic;
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	88 2f       	mov	r24, r24
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	e7 54       	subi	r30, 0x47	; 71
    1bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1c00:	01 90       	ld	r0, Z+
    1c02:	f0 81       	ld	r31, Z
    1c04:	e0 2d       	mov	r30, r0
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	80 83       	st	Z, r24
	}
		return ret;
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <GPIO_port_read_direction>:
Std_ReturnType GPIO_port_read_direction(gpio_port_t _port, uint8* port_direction)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <GPIO_port_read_direction+0x6>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <GPIO_port_read_direction+0x8>
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	8a 83       	std	Y+2, r24	; 0x02
    1c28:	7c 83       	std	Y+4, r23	; 0x04
    1c2a:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	84 30       	cpi	r24, 0x04	; 4
    1c34:	10 f0       	brcs	.+4      	; 0x1c3a <GPIO_port_read_direction+0x20>
	{
		ret = E_NOT_OK;
    1c36:	19 82       	std	Y+1, r1	; 0x01
    1c38:	0f c0       	rjmp	.+30     	; 0x1c58 <GPIO_port_read_direction+0x3e>
	}
	else
	{
		*port_direction = *DDR_registers[_port];
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	fc 01       	movw	r30, r24
    1c46:	ef 54       	subi	r30, 0x4F	; 79
    1c48:	fe 4f       	sbci	r31, 0xFE	; 254
    1c4a:	01 90       	ld	r0, Z+
    1c4c:	f0 81       	ld	r31, Z
    1c4e:	e0 2d       	mov	r30, r0
    1c50:	80 81       	ld	r24, Z
    1c52:	eb 81       	ldd	r30, Y+3	; 0x03
    1c54:	fc 81       	ldd	r31, Y+4	; 0x04
    1c56:	80 83       	st	Z, r24
	}
	return ret;
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <GPIO_port_write_logic>:
Std_ReturnType GPIO_port_write_logic(gpio_port_t _port, uint8 port_logic)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <GPIO_port_write_logic+0x6>
    1c6e:	0f 92       	push	r0
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	8a 83       	std	Y+2, r24	; 0x02
    1c76:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	84 30       	cpi	r24, 0x04	; 4
    1c80:	10 f0       	brcs	.+4      	; 0x1c86 <GPIO_port_write_logic+0x1e>
	{
		ret = E_NOT_OK;
    1c82:	19 82       	std	Y+1, r1	; 0x01
    1c84:	0d c0       	rjmp	.+26     	; 0x1ca0 <GPIO_port_write_logic+0x38>
	}
	else
	{
		*PORT_registers[_port] = port_logic;
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	fc 01       	movw	r30, r24
    1c92:	e7 54       	subi	r30, 0x47	; 71
    1c94:	fe 4f       	sbci	r31, 0xFE	; 254
    1c96:	01 90       	ld	r0, Z+
    1c98:	f0 81       	ld	r31, Z
    1c9a:	e0 2d       	mov	r30, r0
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	80 83       	st	Z, r24
	}
	return ret;
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <GPIO_port_read_logic>:
Std_ReturnType GPIO_port_read_logic(gpio_port_t _port, uint8* port_logic)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <GPIO_port_read_logic+0x6>
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <GPIO_port_read_logic+0x8>
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	8a 83       	std	Y+2, r24	; 0x02
    1cbc:	7c 83       	std	Y+4, r23	; 0x04
    1cbe:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	84 30       	cpi	r24, 0x04	; 4
    1cc8:	10 f0       	brcs	.+4      	; 0x1cce <GPIO_port_read_logic+0x20>
	{
		ret = E_NOT_OK;
    1cca:	19 82       	std	Y+1, r1	; 0x01
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <GPIO_port_read_logic+0x3e>
	}
	else
	{
		*port_logic = *PIN_registers[_port];
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	fc 01       	movw	r30, r24
    1cda:	ef 53       	subi	r30, 0x3F	; 63
    1cdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cde:	01 90       	ld	r0, Z+
    1ce0:	f0 81       	ld	r31, Z
    1ce2:	e0 2d       	mov	r30, r0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce8:	fc 81       	ldd	r31, Y+4	; 0x04
    1cea:	80 83       	st	Z, r24
	}
	return ret;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	08 95       	ret

00001cfc <GPIO_port_toggle>:
Std_ReturnType GPIO_port_toggle(gpio_port_t _port)
{
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <GPIO_port_toggle+0x6>
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	84 30       	cpi	r24, 0x04	; 4
    1d10:	10 f0       	brcs	.+4      	; 0x1d16 <GPIO_port_toggle+0x1a>
	{
		ret = E_NOT_OK;
    1d12:	19 82       	std	Y+1, r1	; 0x01
    1d14:	18 c0       	rjmp	.+48     	; 0x1d46 <GPIO_port_toggle+0x4a>
	}
	else
	{
		*PORT_registers[_port] = *PORT_registers[_port] ^ 0xFF;
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	fc 01       	movw	r30, r24
    1d22:	e7 54       	subi	r30, 0x47	; 71
    1d24:	fe 4f       	sbci	r31, 0xFE	; 254
    1d26:	a0 81       	ld	r26, Z
    1d28:	b1 81       	ldd	r27, Z+1	; 0x01
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	88 2f       	mov	r24, r24
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	fc 01       	movw	r30, r24
    1d36:	e7 54       	subi	r30, 0x47	; 71
    1d38:	fe 4f       	sbci	r31, 0xFE	; 254
    1d3a:	01 90       	ld	r0, Z+
    1d3c:	f0 81       	ld	r31, Z
    1d3e:	e0 2d       	mov	r30, r0
    1d40:	80 81       	ld	r24, Z
    1d42:	80 95       	com	r24
    1d44:	8c 93       	st	X, r24
	}
	return ret;
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <GPIO_port_PullUp_Enable>:
Std_ReturnType GPIO_port_PullUp_Enable(gpio_port_t _port)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <GPIO_port_PullUp_Enable+0x6>
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <GPIO_port_PullUp_Enable+0x8>
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	84 30       	cpi	r24, 0x04	; 4
    1d68:	10 f0       	brcs	.+4      	; 0x1d6e <GPIO_port_PullUp_Enable+0x1c>
	{
		ret = E_NOT_OK;
    1d6a:	19 82       	std	Y+1, r1	; 0x01
    1d6c:	38 c0       	rjmp	.+112    	; 0x1dde <GPIO_port_PullUp_Enable+0x8c>
	}
	else
	{
		*DDR_registers[_port] = *DDR_registers[_port] & 0x00;
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	88 2f       	mov	r24, r24
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	fc 01       	movw	r30, r24
    1d7a:	ef 54       	subi	r30, 0x4F	; 79
    1d7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7e:	01 90       	ld	r0, Z+
    1d80:	f0 81       	ld	r31, Z
    1d82:	e0 2d       	mov	r30, r0
    1d84:	80 81       	ld	r24, Z
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	88 2f       	mov	r24, r24
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	fc 01       	movw	r30, r24
    1d92:	ef 54       	subi	r30, 0x4F	; 79
    1d94:	fe 4f       	sbci	r31, 0xFE	; 254
    1d96:	01 90       	ld	r0, Z+
    1d98:	f0 81       	ld	r31, Z
    1d9a:	e0 2d       	mov	r30, r0
    1d9c:	10 82       	st	Z, r1
		*PORT_registers[_port] = *PORT_registers[_port] | 0xFF;
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	fc 01       	movw	r30, r24
    1daa:	e7 54       	subi	r30, 0x47	; 71
    1dac:	fe 4f       	sbci	r31, 0xFE	; 254
    1dae:	01 90       	ld	r0, Z+
    1db0:	f0 81       	ld	r31, Z
    1db2:	e0 2d       	mov	r30, r0
    1db4:	80 81       	ld	r24, Z
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e7 54       	subi	r30, 0x47	; 71
    1dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc6:	01 90       	ld	r0, Z+
    1dc8:	f0 81       	ld	r31, Z
    1dca:	e0 2d       	mov	r30, r0
    1dcc:	8f ef       	ldi	r24, 0xFF	; 255
    1dce:	80 83       	st	Z, r24
		CLEAR_BIT(SFIOR, PUD);
    1dd0:	a0 e5       	ldi	r26, 0x50	; 80
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e0 e5       	ldi	r30, 0x50	; 80
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	8b 7f       	andi	r24, 0xFB	; 251
    1ddc:	8c 93       	st	X, r24
	}
	return ret;
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <GPIO_port_PullUp_Disable>:
Std_ReturnType GPIO_port_PullUp_Disable(gpio_port_t _port)
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <GPIO_port_PullUp_Disable+0x6>
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	89 83       	std	Y+1, r24	; 0x01
	if (!(_port >= PORT_A && _port <= PORT_D))
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	84 30       	cpi	r24, 0x04	; 4
    1e02:	10 f0       	brcs	.+4      	; 0x1e08 <GPIO_port_PullUp_Disable+0x1a>
	{
		ret = E_NOT_OK;
    1e04:	19 82       	std	Y+1, r1	; 0x01
    1e06:	0c c0       	rjmp	.+24     	; 0x1e20 <GPIO_port_PullUp_Disable+0x32>
	}
	else
	{
		*PORT_registers[_port] = 0x00;
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	fc 01       	movw	r30, r24
    1e14:	e7 54       	subi	r30, 0x47	; 71
    1e16:	fe 4f       	sbci	r31, 0xFE	; 254
    1e18:	01 90       	ld	r0, Z+
    1e1a:	f0 81       	ld	r31, Z
    1e1c:	e0 2d       	mov	r30, r0
    1e1e:	10 82       	st	Z, r1
	}
	return ret;
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <ADC_init>:

static inline void ADC_setVoltRef(uint8 a_voltRefOption);
static inline void ADC_setAutoTriggerevent(uint8 a_triggerEvent);
/* ----------------------------- SW Functions Definitions ------------------------------ */
Std_ReturnType ADC_init(const s_adc_t* a_adcObj)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <ADC_init+0x6>
    1e32:	0f 92       	push	r0
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	9b 83       	std	Y+3, r25	; 0x03
    1e3a:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == a_adcObj)
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	9b 81       	ldd	r25, Y+3	; 0x03
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	11 f4       	brne	.+4      	; 0x1e4c <ADC_init+0x20>
	{
		ret = E_NOT_OK;
    1e48:	19 82       	std	Y+1, r1	; 0x01
    1e4a:	7b c0       	rjmp	.+246    	; 0x1f42 <ADC_init+0x116>
	}
	else
	{
		/* ADC module Disable */
		ADCSRA &= ~(1<<ADEN);
    1e4c:	a6 e2       	ldi	r26, 0x26	; 38
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e6 e2       	ldi	r30, 0x26	; 38
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	8f 77       	andi	r24, 0x7F	; 127
    1e58:	8c 93       	st	X, r24
		/* Set pre-scaler counter */
		ADCSRA = a_adcObj->adc_preScalerValue;
    1e5a:	a6 e2       	ldi	r26, 0x26	; 38
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e60:	fb 81       	ldd	r31, Y+3	; 0x03
    1e62:	83 81       	ldd	r24, Z+3	; 0x03
    1e64:	87 70       	andi	r24, 0x07	; 7
    1e66:	8c 93       	st	X, r24
		/* ِADC Interrupt configuration */
#if ADC_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
		INTERRUPT_GLOBAL_ENABLE();
    1e68:	af e5       	ldi	r26, 0x5F	; 95
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	ef e5       	ldi	r30, 0x5F	; 95
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	80 68       	ori	r24, 0x80	; 128
    1e74:	8c 93       	st	X, r24
		if(1 == a_adcObj->adc_inetrruptEnable)
    1e76:	ea 81       	ldd	r30, Y+2	; 0x02
    1e78:	fb 81       	ldd	r31, Y+3	; 0x03
    1e7a:	82 81       	ldd	r24, Z+2	; 0x02
    1e7c:	81 70       	andi	r24, 0x01	; 1
    1e7e:	88 23       	and	r24, r24
    1e80:	81 f0       	breq	.+32     	; 0x1ea2 <ADC_init+0x76>
		{
			ADC_INTERRUPT_ENABLE();
    1e82:	a6 e2       	ldi	r26, 0x26	; 38
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e6 e2       	ldi	r30, 0x26	; 38
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	88 60       	ori	r24, 0x08	; 8
    1e8e:	8c 93       	st	X, r24
			g_ADC_interrutHandlerNotify = a_adcObj->ADC_interruptHandlerNotify;
    1e90:	ea 81       	ldd	r30, Y+2	; 0x02
    1e92:	fb 81       	ldd	r31, Y+3	; 0x03
    1e94:	80 81       	ld	r24, Z
    1e96:	91 81       	ldd	r25, Z+1	; 0x01
    1e98:	90 93 df 01 	sts	0x01DF, r25
    1e9c:	80 93 de 01 	sts	0x01DE, r24
    1ea0:	07 c0       	rjmp	.+14     	; 0x1eb0 <ADC_init+0x84>
		}
		else{
			ADC_INTERRUPT_DISABLE();
    1ea2:	a6 e2       	ldi	r26, 0x26	; 38
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e6 e2       	ldi	r30, 0x26	; 38
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	87 7f       	andi	r24, 0xF7	; 247
    1eae:	8c 93       	st	X, r24
		}
#endif
		/* set ADC input Channel */
		ADMUX = a_adcObj->adc_channel;
    1eb0:	a7 e2       	ldi	r26, 0x27	; 39
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	ea 81       	ldd	r30, Y+2	; 0x02
    1eb6:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	82 95       	swap	r24
    1ebc:	8f 70       	andi	r24, 0x0F	; 15
    1ebe:	87 70       	andi	r24, 0x07	; 7
    1ec0:	8c 93       	st	X, r24
		/* set voltage reference option */
		ADC_setVoltRef(a_adcObj->adc_voltRef);
    1ec2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ec4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	86 95       	lsr	r24
    1eca:	86 95       	lsr	r24
    1ecc:	83 70       	andi	r24, 0x03	; 3
    1ece:	0e 94 89 10 	call	0x2112	; 0x2112 <ADC_setVoltRef>
		/* Set right/left Data adjustment */
		if(a_adcObj->adc_resultAdjustfy == 1){
    1ed2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ed4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ed6:	82 81       	ldd	r24, Z+2	; 0x02
    1ed8:	80 78       	andi	r24, 0x80	; 128
    1eda:	88 23       	and	r24, r24
    1edc:	41 f0       	breq	.+16     	; 0x1eee <ADC_init+0xc2>
			SET_BIT(ADMUX, ADLAR);
    1ede:	a7 e2       	ldi	r26, 0x27	; 39
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e7 e2       	ldi	r30, 0x27	; 39
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	80 62       	ori	r24, 0x20	; 32
    1eea:	8c 93       	st	X, r24
    1eec:	07 c0       	rjmp	.+14     	; 0x1efc <ADC_init+0xd0>
		}
		else{	// right adjustment is the default
			CLEAR_BIT(ADMUX, ADLAR);
    1eee:	a7 e2       	ldi	r26, 0x27	; 39
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e7 e2       	ldi	r30, 0x27	; 39
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	8f 7d       	andi	r24, 0xDF	; 223
    1efa:	8c 93       	st	X, r24
		}
		/* set ADC single conversion or auto Trigger */
		if(ADC_SINGLE_CONVERSION_MODE != a_adcObj->adc_mode){
    1efc:	ea 81       	ldd	r30, Y+2	; 0x02
    1efe:	fb 81       	ldd	r31, Y+3	; 0x03
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	82 70       	andi	r24, 0x02	; 2
    1f04:	88 23       	and	r24, r24
    1f06:	79 f0       	breq	.+30     	; 0x1f26 <ADC_init+0xfa>
			SET_BIT(ADCSRA, ADATE);
    1f08:	a6 e2       	ldi	r26, 0x26	; 38
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e6 e2       	ldi	r30, 0x26	; 38
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	80 62       	ori	r24, 0x20	; 32
    1f14:	8c 93       	st	X, r24
			ADC_setAutoTriggerevent(a_adcObj->adc_mode);
    1f16:	ea 81       	ldd	r30, Y+2	; 0x02
    1f18:	fb 81       	ldd	r31, Y+3	; 0x03
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	86 95       	lsr	r24
    1f1e:	81 70       	andi	r24, 0x01	; 1
    1f20:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <ADC_setAutoTriggerevent>
    1f24:	07 c0       	rjmp	.+14     	; 0x1f34 <ADC_init+0x108>
		}
		else{	// single conversion mode is the default mode
			CLEAR_BIT(ADCSRA, ADATE);
    1f26:	a6 e2       	ldi	r26, 0x26	; 38
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e6 e2       	ldi	r30, 0x26	; 38
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	8f 7d       	andi	r24, 0xDF	; 223
    1f32:	8c 93       	st	X, r24
		}
		/* ADC module Enable */
		ADCSRA |= (1<<ADEN);
    1f34:	a6 e2       	ldi	r26, 0x26	; 38
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e6 e2       	ldi	r30, 0x26	; 38
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	80 68       	ori	r24, 0x80	; 128
    1f40:	8c 93       	st	X, r24
	}
	return ret;
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <ADC_deInit>:
Std_ReturnType ADC_deInit()
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	0f 92       	push	r0
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	89 83       	std	Y+1, r24	; 0x01
#if ADC_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
			ADC_INTERRUPT_DISABLE();
    1f5e:	a6 e2       	ldi	r26, 0x26	; 38
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e6 e2       	ldi	r30, 0x26	; 38
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	87 7f       	andi	r24, 0xF7	; 247
    1f6a:	8c 93       	st	X, r24
#endif
	/* ADC module Disable */
	ADCSRA &= ~(1<<ADEN);
    1f6c:	a6 e2       	ldi	r26, 0x26	; 38
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e6 e2       	ldi	r30, 0x26	; 38
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	8f 77       	andi	r24, 0x7F	; 127
    1f78:	8c 93       	st	X, r24
	return ret;
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <ADC_StartConversion>:
Std_ReturnType ADC_StartConversion()
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	0f 92       	push	r0
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	89 83       	std	Y+1, r24	; 0x01
	/* start ADC conversion */
	SET_BIT(ADCSRA, ADSC);
    1f92:	a6 e2       	ldi	r26, 0x26	; 38
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e6 e2       	ldi	r30, 0x26	; 38
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 64       	ori	r24, 0x40	; 64
    1f9e:	8c 93       	st	X, r24
	return ret;
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <ADC_StartConversionBlocking>:

Std_ReturnType ADC_StartConversionBlocking(uint16* a_adcData, uint8 a_dataAdjustment)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <ADC_StartConversionBlocking+0x6>
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <ADC_StartConversionBlocking+0x8>
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	9b 83       	std	Y+3, r25	; 0x03
    1fb8:	8a 83       	std	Y+2, r24	; 0x02
    1fba:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == a_adcData)
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	11 f4       	brne	.+4      	; 0x1fcc <ADC_StartConversionBlocking+0x22>
	{
		ret = E_NOT_OK;
    1fc8:	19 82       	std	Y+1, r1	; 0x01
    1fca:	20 c0       	rjmp	.+64     	; 0x200c <ADC_StartConversionBlocking+0x62>
	}
	else
	{
		/* start ADC conversion */
		SET_BIT(ADCSRA, ADSC);
    1fcc:	a6 e2       	ldi	r26, 0x26	; 38
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e6 e2       	ldi	r30, 0x26	; 38
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	80 64       	ori	r24, 0x40	; 64
    1fd8:	8c 93       	st	X, r24
		/* wait until conversion is done */
		while(!READ_BIT(ADCSRA, ADSC));
    1fda:	e6 e2       	ldi	r30, 0x26	; 38
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	82 95       	swap	r24
    1fe2:	86 95       	lsr	r24
    1fe4:	86 95       	lsr	r24
    1fe6:	83 70       	andi	r24, 0x03	; 3
    1fe8:	88 2f       	mov	r24, r24
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	81 70       	andi	r24, 0x01	; 1
    1fee:	90 70       	andi	r25, 0x00	; 0
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	99 f3       	breq	.-26     	; 0x1fda <ADC_StartConversionBlocking+0x30>
		/* Clear ADC interrupt Flag */
		ADC_CLEAR_INTERRUPT_FLAG();
    1ff4:	a6 e2       	ldi	r26, 0x26	; 38
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e6 e2       	ldi	r30, 0x26	; 38
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	80 61       	ori	r24, 0x10	; 16
    2000:	8c 93       	st	X, r24
		ADC_readData(a_adcData, a_dataAdjustment);
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	9b 81       	ldd	r25, Y+3	; 0x03
    2006:	6c 81       	ldd	r22, Y+4	; 0x04
    2008:	0e 94 0e 10 	call	0x201c	; 0x201c <ADC_readData>
	}
	return ret;
    200c:	89 81       	ldd	r24, Y+1	; 0x01
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <ADC_readData>:
void ADC_readData(uint16 *a_adcData, uint8 a_dataAdjustment)
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	00 d0       	rcall	.+0      	; 0x2022 <ADC_readData+0x6>
    2022:	0f 92       	push	r0
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	6b 83       	std	Y+3, r22	; 0x03
	if(ADC_LEFT_ADJUST == a_dataAdjustment)
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	e1 f4       	brne	.+56     	; 0x206c <ADC_readData+0x50>
	{	// left adjustment reading process
		//*a_adcData = ADCL;
		*a_adcData = (((uint16)ADCH << 8) + ADCL) >> 6;
    2034:	e5 e2       	ldi	r30, 0x25	; 37
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	88 2f       	mov	r24, r24
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	38 2f       	mov	r19, r24
    2040:	22 27       	eor	r18, r18
    2042:	e4 e2       	ldi	r30, 0x24	; 36
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	88 2f       	mov	r24, r24
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	82 0f       	add	r24, r18
    204e:	93 1f       	adc	r25, r19
    2050:	00 24       	eor	r0, r0
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	00 1c       	adc	r0, r0
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	00 1c       	adc	r0, r0
    205e:	89 2f       	mov	r24, r25
    2060:	90 2d       	mov	r25, r0
    2062:	e9 81       	ldd	r30, Y+1	; 0x01
    2064:	fa 81       	ldd	r31, Y+2	; 0x02
    2066:	91 83       	std	Z+1, r25	; 0x01
    2068:	80 83       	st	Z, r24
    206a:	1a c0       	rjmp	.+52     	; 0x20a0 <ADC_readData+0x84>
	}
	else
	{	// right adjustment reading process
		*a_adcData = ADCL;
    206c:	e4 e2       	ldi	r30, 0x24	; 36
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	e9 81       	ldd	r30, Y+1	; 0x01
    2078:	fa 81       	ldd	r31, Y+2	; 0x02
    207a:	91 83       	std	Z+1, r25	; 0x01
    207c:	80 83       	st	Z, r24
		*a_adcData |= (uint16)(ADCH)<<8;
    207e:	e9 81       	ldd	r30, Y+1	; 0x01
    2080:	fa 81       	ldd	r31, Y+2	; 0x02
    2082:	20 81       	ld	r18, Z
    2084:	31 81       	ldd	r19, Z+1	; 0x01
    2086:	e5 e2       	ldi	r30, 0x25	; 37
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	88 2f       	mov	r24, r24
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	98 2f       	mov	r25, r24
    2092:	88 27       	eor	r24, r24
    2094:	82 2b       	or	r24, r18
    2096:	93 2b       	or	r25, r19
    2098:	e9 81       	ldd	r30, Y+1	; 0x01
    209a:	fa 81       	ldd	r31, Y+2	; 0x02
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	80 83       	st	Z, r24
	}
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <__vector_14>:
/* ISR code on ADC Completion */
#if ADC_INTERRUPT_FEATURE == INTERRUPT_FEATURE_ENABLE
ISR(ADC_vect)
{
    20ac:	1f 92       	push	r1
    20ae:	0f 92       	push	r0
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	0f 92       	push	r0
    20b4:	11 24       	eor	r1, r1
    20b6:	2f 93       	push	r18
    20b8:	3f 93       	push	r19
    20ba:	4f 93       	push	r20
    20bc:	5f 93       	push	r21
    20be:	6f 93       	push	r22
    20c0:	7f 93       	push	r23
    20c2:	8f 93       	push	r24
    20c4:	9f 93       	push	r25
    20c6:	af 93       	push	r26
    20c8:	bf 93       	push	r27
    20ca:	ef 93       	push	r30
    20cc:	ff 93       	push	r31
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
	if(NULL != g_ADC_interrutHandlerNotify)
    20d6:	80 91 de 01 	lds	r24, 0x01DE
    20da:	90 91 df 01 	lds	r25, 0x01DF
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	29 f0       	breq	.+10     	; 0x20ec <__vector_14+0x40>
	{
		g_ADC_interrutHandlerNotify();
    20e2:	e0 91 de 01 	lds	r30, 0x01DE
    20e6:	f0 91 df 01 	lds	r31, 0x01DF
    20ea:	09 95       	icall
	}
}
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	ff 91       	pop	r31
    20f2:	ef 91       	pop	r30
    20f4:	bf 91       	pop	r27
    20f6:	af 91       	pop	r26
    20f8:	9f 91       	pop	r25
    20fa:	8f 91       	pop	r24
    20fc:	7f 91       	pop	r23
    20fe:	6f 91       	pop	r22
    2100:	5f 91       	pop	r21
    2102:	4f 91       	pop	r20
    2104:	3f 91       	pop	r19
    2106:	2f 91       	pop	r18
    2108:	0f 90       	pop	r0
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	0f 90       	pop	r0
    210e:	1f 90       	pop	r1
    2110:	18 95       	reti

00002112 <ADC_setVoltRef>:
#endif

/*------------------------------ Helper Function Definitions ------------------------------*/
static inline void ADC_setVoltRef(uint8 a_voltRefOption)
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	00 d0       	rcall	.+0      	; 0x2118 <ADC_setVoltRef+0x6>
    2118:	0f 92       	push	r0
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	89 83       	std	Y+1, r24	; 0x01
	switch(a_voltRefOption)
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	3b 83       	std	Y+3, r19	; 0x03
    2128:	2a 83       	std	Y+2, r18	; 0x02
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	9b 81       	ldd	r25, Y+3	; 0x03
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	91 05       	cpc	r25, r1
    2132:	c1 f0       	breq	.+48     	; 0x2164 <ADC_setVoltRef+0x52>
    2134:	2a 81       	ldd	r18, Y+2	; 0x02
    2136:	3b 81       	ldd	r19, Y+3	; 0x03
    2138:	22 30       	cpi	r18, 0x02	; 2
    213a:	31 05       	cpc	r19, r1
    213c:	11 f1       	breq	.+68     	; 0x2182 <ADC_setVoltRef+0x70>
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	9b 81       	ldd	r25, Y+3	; 0x03
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	69 f5       	brne	.+90     	; 0x21a0 <ADC_setVoltRef+0x8e>
	{
	case ADC_REF_VOLTAGE_AREF:		CLEAR_BIT(ADMUX, REFS0); CLEAR_BIT(ADMUX, REFS1);	// REFS0,1 = 0, 0
    2146:	a7 e2       	ldi	r26, 0x27	; 39
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e7 e2       	ldi	r30, 0x27	; 39
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	8f 7b       	andi	r24, 0xBF	; 191
    2152:	8c 93       	st	X, r24
    2154:	a7 e2       	ldi	r26, 0x27	; 39
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e7 e2       	ldi	r30, 0x27	; 39
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	8f 77       	andi	r24, 0x7F	; 127
    2160:	8c 93       	st	X, r24
    2162:	2c c0       	rjmp	.+88     	; 0x21bc <ADC_setVoltRef+0xaa>
		break;
	case ADC_REF_VOLTAGE_AVCC:		CLEAR_BIT(ADMUX, REFS0); SET_BIT(ADMUX, REFS1);	// REFS0,1 = 0, 1
    2164:	a7 e2       	ldi	r26, 0x27	; 39
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e7 e2       	ldi	r30, 0x27	; 39
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	8f 7b       	andi	r24, 0xBF	; 191
    2170:	8c 93       	st	X, r24
    2172:	a7 e2       	ldi	r26, 0x27	; 39
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e7 e2       	ldi	r30, 0x27	; 39
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	80 68       	ori	r24, 0x80	; 128
    217e:	8c 93       	st	X, r24
    2180:	1d c0       	rjmp	.+58     	; 0x21bc <ADC_setVoltRef+0xaa>
		break;
	case ADC_REF_VOLTAGE_INTERNAL:	SET_BIT(ADMUX, REFS0); SET_BIT(ADMUX, REFS1);	// REFS0,1 = 1, 1
    2182:	a7 e2       	ldi	r26, 0x27	; 39
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e7 e2       	ldi	r30, 0x27	; 39
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	80 64       	ori	r24, 0x40	; 64
    218e:	8c 93       	st	X, r24
    2190:	a7 e2       	ldi	r26, 0x27	; 39
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e7 e2       	ldi	r30, 0x27	; 39
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	80 68       	ori	r24, 0x80	; 128
    219c:	8c 93       	st	X, r24
    219e:	0e c0       	rjmp	.+28     	; 0x21bc <ADC_setVoltRef+0xaa>
		break;
	default:	SET_BIT(ADMUX, REFS0); SET_BIT(ADMUX, REFS1);		// Internal VREF is the default
    21a0:	a7 e2       	ldi	r26, 0x27	; 39
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e7 e2       	ldi	r30, 0x27	; 39
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	80 64       	ori	r24, 0x40	; 64
    21ac:	8c 93       	st	X, r24
    21ae:	a7 e2       	ldi	r26, 0x27	; 39
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e7 e2       	ldi	r30, 0x27	; 39
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	80 68       	ori	r24, 0x80	; 128
    21ba:	8c 93       	st	X, r24
	}
}
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <ADC_setAutoTriggerevent>:
static inline void ADC_setAutoTriggerevent(uint8 a_triggerEvent)
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <ADC_setAutoTriggerevent+0x6>
    21ce:	0f 92       	push	r0
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	89 83       	std	Y+1, r24	; 0x01
	switch(a_triggerEvent)
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	3b 83       	std	Y+3, r19	; 0x03
    21de:	2a 83       	std	Y+2, r18	; 0x02
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	9b 81       	ldd	r25, Y+3	; 0x03
    21e4:	82 30       	cpi	r24, 0x02	; 2
    21e6:	91 05       	cpc	r25, r1
    21e8:	09 f1       	breq	.+66     	; 0x222c <ADC_setAutoTriggerevent+0x64>
    21ea:	2a 81       	ldd	r18, Y+2	; 0x02
    21ec:	3b 81       	ldd	r19, Y+3	; 0x03
    21ee:	23 30       	cpi	r18, 0x03	; 3
    21f0:	31 05       	cpc	r19, r1
    21f2:	91 f1       	breq	.+100    	; 0x2258 <ADC_setAutoTriggerevent+0x90>
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	9b 81       	ldd	r25, Y+3	; 0x03
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	91 05       	cpc	r25, r1
    21fc:	09 f0       	breq	.+2      	; 0x2200 <ADC_setAutoTriggerevent+0x38>
    21fe:	41 c0       	rjmp	.+130    	; 0x2282 <ADC_setAutoTriggerevent+0xba>
	{
	case ADC_AUTO_TRIGGER_FREE_RUNNING_MODE: CLEAR_BIT(SFIOR, ADTS0); CLEAR_BIT(SFIOR, ADTS1); CLEAR_BIT(SFIOR, ADTS2);
    2200:	a0 e5       	ldi	r26, 0x50	; 80
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e0 e5       	ldi	r30, 0x50	; 80
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	8f 7d       	andi	r24, 0xDF	; 223
    220c:	8c 93       	st	X, r24
    220e:	a0 e5       	ldi	r26, 0x50	; 80
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e0 e5       	ldi	r30, 0x50	; 80
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	8f 7b       	andi	r24, 0xBF	; 191
    221a:	8c 93       	st	X, r24
    221c:	a0 e5       	ldi	r26, 0x50	; 80
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e0 e5       	ldi	r30, 0x50	; 80
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	8f 77       	andi	r24, 0x7F	; 127
    2228:	8c 93       	st	X, r24
    222a:	2b c0       	rjmp	.+86     	; 0x2282 <ADC_setAutoTriggerevent+0xba>
		break;
	case ADC_AUTO_TRIGGER_INT0_MODE: CLEAR_BIT(SFIOR, ADTS0); SET_BIT(SFIOR, ADTS1); CLEAR_BIT(SFIOR, ADTS2);
    222c:	a0 e5       	ldi	r26, 0x50	; 80
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e0 e5       	ldi	r30, 0x50	; 80
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	8f 7d       	andi	r24, 0xDF	; 223
    2238:	8c 93       	st	X, r24
    223a:	a0 e5       	ldi	r26, 0x50	; 80
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e0 e5       	ldi	r30, 0x50	; 80
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	80 64       	ori	r24, 0x40	; 64
    2246:	8c 93       	st	X, r24
    2248:	a0 e5       	ldi	r26, 0x50	; 80
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e0 e5       	ldi	r30, 0x50	; 80
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	8f 77       	andi	r24, 0x7F	; 127
    2254:	8c 93       	st	X, r24
    2256:	15 c0       	rjmp	.+42     	; 0x2282 <ADC_setAutoTriggerevent+0xba>
		break;
	case ADC_AUTO_TRIGGER_CAP_EVENT_MODE: SET_BIT(SFIOR, ADTS0); SET_BIT(SFIOR, ADTS1); SET_BIT(SFIOR, ADTS2);
    2258:	a0 e5       	ldi	r26, 0x50	; 80
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	e0 e5       	ldi	r30, 0x50	; 80
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	80 62       	ori	r24, 0x20	; 32
    2264:	8c 93       	st	X, r24
    2266:	a0 e5       	ldi	r26, 0x50	; 80
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e0 e5       	ldi	r30, 0x50	; 80
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	80 64       	ori	r24, 0x40	; 64
    2272:	8c 93       	st	X, r24
    2274:	a0 e5       	ldi	r26, 0x50	; 80
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e0 e5       	ldi	r30, 0x50	; 80
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	80 68       	ori	r24, 0x80	; 128
    2280:	8c 93       	st	X, r24
		break;
	}
}
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <MCAL_init>:

};


Std_ReturnType MCAL_init(void)
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
	ret = timer0_init(&g_tmr0Obj);
    2296:	80 ed       	ldi	r24, 0xD0	; 208
    2298:	91 e0       	ldi	r25, 0x01	; 1
    229a:	0e 94 17 07 	call	0xe2e	; 0xe2e <timer0_init>
    229e:	80 93 c9 01 	sts	0x01C9, r24
	ret = ADC_init(&g_adcObj);
    22a2:	8c ec       	ldi	r24, 0xCC	; 204
    22a4:	91 e0       	ldi	r25, 0x01	; 1
    22a6:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <ADC_init>
    22aa:	80 93 c9 01 	sts	0x01C9, r24
	return ret;
    22ae:	80 91 c9 01 	lds	r24, 0x01C9
}
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <dc_motor_init>:
 * @return STATUS of the function
 *          E_OK     : action executed successfully !
 *          E_NOT_OK : action execution faild !
 */
Std_ReturnType dc_motor_init (const dc_motor_t *_dc_motor_ptr)
{
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	00 d0       	rcall	.+0      	; 0x22be <dc_motor_init+0x6>
    22be:	0f 92       	push	r0
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	9b 83       	std	Y+3, r25	; 0x03
    22c6:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType ret = E_OK;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	89 83       	std	Y+1, r24	; 0x01
    if (_dc_motor_ptr == NULL)
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	9b 81       	ldd	r25, Y+3	; 0x03
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	11 f4       	brne	.+4      	; 0x22d8 <dc_motor_init+0x20>
    {
        ret = E_NOT_OK;
    22d4:	19 82       	std	Y+1, r1	; 0x01
    22d6:	0b c0       	rjmp	.+22     	; 0x22ee <dc_motor_init+0x36>
    }
    else
    {   
        ret = GPIO_pin_initialize(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN1]));
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	9b 81       	ldd	r25, Y+3	; 0x03
    22dc:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_pin_initialize>
    22e0:	89 83       	std	Y+1, r24	; 0x01
        ret = GPIO_pin_initialize(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN2]));
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	9b 81       	ldd	r25, Y+3	; 0x03
    22e6:	01 96       	adiw	r24, 0x01	; 1
    22e8:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_pin_initialize>
    22ec:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    
}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <dc_motor_move_right>:
 * @return STATUS of the function
 *          E_OK     : action executed successfully !
 *          E_NOT_OK : action execution faild !
 */
Std_ReturnType dc_motor_move_right(const dc_motor_t *_dc_motor_ptr)
{
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	00 d0       	rcall	.+0      	; 0x2302 <dc_motor_move_right+0x6>
    2302:	0f 92       	push	r0
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	9b 83       	std	Y+3, r25	; 0x03
    230a:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType ret = E_OK;
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	89 83       	std	Y+1, r24	; 0x01
    if (_dc_motor_ptr == NULL)
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	9b 81       	ldd	r25, Y+3	; 0x03
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	11 f4       	brne	.+4      	; 0x231c <dc_motor_move_right+0x20>
    {
        ret = E_NOT_OK;
    2318:	19 82       	std	Y+1, r1	; 0x01
    231a:	0b c0       	rjmp	.+22     	; 0x2332 <dc_motor_move_right+0x36>
    }
    else
    {
        GPIO_pin_write_logic(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN1]), GPIO_HIGH);
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	61 e0       	ldi	r22, 0x01	; 1
    2322:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_pin_write_logic>
        GPIO_pin_write_logic(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN2]), GPIO_LOW);
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	9b 81       	ldd	r25, Y+3	; 0x03
    232a:	01 96       	adiw	r24, 0x01	; 1
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_pin_write_logic>
    }
    return ret;
    2332:	89 81       	ldd	r24, Y+1	; 0x01
}
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <dc_motor_move_left>:
 * @return STATUS of the function
 *          E_OK     : action executed successfully !
 *          E_NOT_OK : action execution faild !
 */
Std_ReturnType dc_motor_move_left (const dc_motor_t *_dc_motor_ptr)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	00 d0       	rcall	.+0      	; 0x2346 <dc_motor_move_left+0x6>
    2346:	0f 92       	push	r0
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	9b 83       	std	Y+3, r25	; 0x03
    234e:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType ret = E_OK;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	89 83       	std	Y+1, r24	; 0x01
    if (_dc_motor_ptr == NULL)
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	9b 81       	ldd	r25, Y+3	; 0x03
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	11 f4       	brne	.+4      	; 0x2360 <dc_motor_move_left+0x20>
    {
        ret = E_NOT_OK;
    235c:	19 82       	std	Y+1, r1	; 0x01
    235e:	0b c0       	rjmp	.+22     	; 0x2376 <dc_motor_move_left+0x36>
    }
    else
    {
        GPIO_pin_write_logic(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN1]), GPIO_LOW);
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	9b 81       	ldd	r25, Y+3	; 0x03
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_pin_write_logic>
        GPIO_pin_write_logic(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN2]), GPIO_HIGH);
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	9b 81       	ldd	r25, Y+3	; 0x03
    236e:	01 96       	adiw	r24, 0x01	; 1
    2370:	61 e0       	ldi	r22, 0x01	; 1
    2372:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_pin_write_logic>
    }
    return ret;
    2376:	89 81       	ldd	r24, Y+1	; 0x01
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <dc_motor_stop>:
 * @return STATUS of the function
 *          E_OK     : action executed successfully !
 *          E_NOT_OK : action execution faild !
 */
Std_ReturnType dc_motor_stop (const dc_motor_t *_dc_motor_ptr)
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	00 d0       	rcall	.+0      	; 0x238a <dc_motor_stop+0x6>
    238a:	0f 92       	push	r0
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	9b 83       	std	Y+3, r25	; 0x03
    2392:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType ret = E_OK;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	89 83       	std	Y+1, r24	; 0x01
    if (_dc_motor_ptr == NULL)
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	9b 81       	ldd	r25, Y+3	; 0x03
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	11 f4       	brne	.+4      	; 0x23a4 <dc_motor_stop+0x20>
    {
        ret = E_NOT_OK;
    23a0:	19 82       	std	Y+1, r1	; 0x01
    23a2:	0b c0       	rjmp	.+22     	; 0x23ba <dc_motor_stop+0x36>
    }
    else
    {
        GPIO_pin_write_logic(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN1]), GPIO_LOW);
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	9b 81       	ldd	r25, Y+3	; 0x03
    23a8:	60 e0       	ldi	r22, 0x00	; 0
    23aa:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_pin_write_logic>
        GPIO_pin_write_logic(&(_dc_motor_ptr->dc_motor_pin[DC_MOTOR_PIN2]), GPIO_LOW);
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	9b 81       	ldd	r25, Y+3	; 0x03
    23b2:	01 96       	adiw	r24, 0x01	; 1
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_pin_write_logic>
    }
    return ret;
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <LED_initialize>:
 * @return  STATUS of the function
 *          E_OK     : action executed successfully !
 *          E_NOT_OK : action execution faild !
 */
Std_ReturnType LED_initialize (const led_t *led)
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <LED_initialize+0x6>
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <LED_initialize+0x8>
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	9c 83       	std	Y+4, r25	; 0x04
    23d6:	8b 83       	std	Y+3, r24	; 0x03
    Std_ReturnType ret = E_OK;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == led)
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	9c 81       	ldd	r25, Y+4	; 0x04
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	11 f4       	brne	.+4      	; 0x23e8 <LED_initialize+0x20>
    {
        ret = E_NOT_OK;
    23e4:	19 82       	std	Y+1, r1	; 0x01
    23e6:	5b c0       	rjmp	.+182    	; 0x249e <LED_initialize+0xd6>
    else
    {
    	gpio_config_pin_t pin_led = {.port=led->port_name,
                                .pin=led->pin,
                                .direction=GPIO_DIRECTION_OUTPUT,
                                };
    23e8:	eb 81       	ldd	r30, Y+3	; 0x03
    23ea:	fc 81       	ldd	r31, Y+4	; 0x04
    23ec:	80 81       	ld	r24, Z
    23ee:	28 2f       	mov	r18, r24
    23f0:	27 70       	andi	r18, 0x07	; 7
    23f2:	eb 81       	ldd	r30, Y+3	; 0x03
    23f4:	fc 81       	ldd	r31, Y+4	; 0x04
    23f6:	80 81       	ld	r24, Z
    23f8:	98 2f       	mov	r25, r24
    23fa:	96 95       	lsr	r25
    23fc:	96 95       	lsr	r25
    23fe:	96 95       	lsr	r25
    2400:	97 70       	andi	r25, 0x07	; 7
    2402:	1a 82       	std	Y+2, r1	; 0x02
    2404:	27 70       	andi	r18, 0x07	; 7
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	88 7f       	andi	r24, 0xF8	; 248
    240a:	82 2b       	or	r24, r18
    240c:	8a 83       	std	Y+2, r24	; 0x02
    240e:	89 2f       	mov	r24, r25
    2410:	87 70       	andi	r24, 0x07	; 7
    2412:	98 2f       	mov	r25, r24
    2414:	99 0f       	add	r25, r25
    2416:	99 0f       	add	r25, r25
    2418:	99 0f       	add	r25, r25
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	87 7c       	andi	r24, 0xC7	; 199
    241e:	89 2b       	or	r24, r25
    2420:	8a 83       	std	Y+2, r24	; 0x02
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	80 64       	ori	r24, 0x40	; 64
    2426:	8a 83       	std	Y+2, r24	; 0x02
        if (led->connection_status == NEGATIVE_CONNECTION)
    2428:	eb 81       	ldd	r30, Y+3	; 0x03
    242a:	fc 81       	ldd	r31, Y+4	; 0x04
    242c:	80 81       	ld	r24, Z
    242e:	80 78       	andi	r24, 0x80	; 128
    2430:	88 23       	and	r24, r24
    2432:	a1 f4       	brne	.+40     	; 0x245c <LED_initialize+0x94>
        {
            if (led->led_status == LED_OFF)
    2434:	eb 81       	ldd	r30, Y+3	; 0x03
    2436:	fc 81       	ldd	r31, Y+4	; 0x04
    2438:	80 81       	ld	r24, Z
    243a:	80 74       	andi	r24, 0x40	; 64
    243c:	88 23       	and	r24, r24
    243e:	21 f4       	brne	.+8      	; 0x2448 <LED_initialize+0x80>
                pin_led.logic = GPIO_LOW;
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	8f 77       	andi	r24, 0x7F	; 127
    2444:	8a 83       	std	Y+2, r24	; 0x02
    2446:	23 c0       	rjmp	.+70     	; 0x248e <LED_initialize+0xc6>
            else if (led->led_status == LED_ON)
    2448:	eb 81       	ldd	r30, Y+3	; 0x03
    244a:	fc 81       	ldd	r31, Y+4	; 0x04
    244c:	80 81       	ld	r24, Z
    244e:	80 74       	andi	r24, 0x40	; 64
    2450:	88 23       	and	r24, r24
    2452:	e9 f0       	breq	.+58     	; 0x248e <LED_initialize+0xc6>
                pin_led.logic = GPIO_HIGH;
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	80 68       	ori	r24, 0x80	; 128
    2458:	8a 83       	std	Y+2, r24	; 0x02
    245a:	19 c0       	rjmp	.+50     	; 0x248e <LED_initialize+0xc6>
        }
        else if (led->connection_status == POSITIVE_CONNECTION)
    245c:	eb 81       	ldd	r30, Y+3	; 0x03
    245e:	fc 81       	ldd	r31, Y+4	; 0x04
    2460:	80 81       	ld	r24, Z
    2462:	80 78       	andi	r24, 0x80	; 128
    2464:	88 23       	and	r24, r24
    2466:	99 f0       	breq	.+38     	; 0x248e <LED_initialize+0xc6>
        {
            if (led->led_status == LED_OFF)
    2468:	eb 81       	ldd	r30, Y+3	; 0x03
    246a:	fc 81       	ldd	r31, Y+4	; 0x04
    246c:	80 81       	ld	r24, Z
    246e:	80 74       	andi	r24, 0x40	; 64
    2470:	88 23       	and	r24, r24
    2472:	21 f4       	brne	.+8      	; 0x247c <LED_initialize+0xb4>
                pin_led.logic = GPIO_HIGH;
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	80 68       	ori	r24, 0x80	; 128
    2478:	8a 83       	std	Y+2, r24	; 0x02
    247a:	09 c0       	rjmp	.+18     	; 0x248e <LED_initialize+0xc6>
            else if (led->led_status == LED_ON)
    247c:	eb 81       	ldd	r30, Y+3	; 0x03
    247e:	fc 81       	ldd	r31, Y+4	; 0x04
    2480:	80 81       	ld	r24, Z
    2482:	80 74       	andi	r24, 0x40	; 64
    2484:	88 23       	and	r24, r24
    2486:	19 f0       	breq	.+6      	; 0x248e <LED_initialize+0xc6>
                pin_led.logic = GPIO_LOW;
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	8f 77       	andi	r24, 0x7F	; 127
    248c:	8a 83       	std	Y+2, r24	; 0x02
        }
        ret &= GPIO_pin_initialize(&pin_led);
    248e:	ce 01       	movw	r24, r28
    2490:	02 96       	adiw	r24, 0x02	; 2
    2492:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_pin_initialize>
    2496:	98 2f       	mov	r25, r24
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	89 23       	and	r24, r25
    249c:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    249e:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <LED_turn_on>:
 * @return STATUS of the function
 *          E_OK     : action executed successfully !
 *          E_NOT_OK : action execution faild !
 */
Std_ReturnType LED_turn_on (const led_t *led)
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <LED_turn_on+0x6>
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <LED_turn_on+0x8>
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	9c 83       	std	Y+4, r25	; 0x04
    24bc:	8b 83       	std	Y+3, r24	; 0x03
    Std_ReturnType ret = E_OK;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == led)
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	9c 81       	ldd	r25, Y+4	; 0x04
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	11 f4       	brne	.+4      	; 0x24ce <LED_turn_on+0x20>
    {
        ret = E_NOT_OK;
    24ca:	19 82       	std	Y+1, r1	; 0x01
    24cc:	3e c0       	rjmp	.+124    	; 0x254a <LED_turn_on+0x9c>
    else
    {
    	gpio_config_pin_t pin_led = {.port=led->port_name,
                                .pin=led->pin,
                                .direction=GPIO_DIRECTION_OUTPUT,
                                };
    24ce:	eb 81       	ldd	r30, Y+3	; 0x03
    24d0:	fc 81       	ldd	r31, Y+4	; 0x04
    24d2:	80 81       	ld	r24, Z
    24d4:	28 2f       	mov	r18, r24
    24d6:	27 70       	andi	r18, 0x07	; 7
    24d8:	eb 81       	ldd	r30, Y+3	; 0x03
    24da:	fc 81       	ldd	r31, Y+4	; 0x04
    24dc:	80 81       	ld	r24, Z
    24de:	98 2f       	mov	r25, r24
    24e0:	96 95       	lsr	r25
    24e2:	96 95       	lsr	r25
    24e4:	96 95       	lsr	r25
    24e6:	97 70       	andi	r25, 0x07	; 7
    24e8:	1a 82       	std	Y+2, r1	; 0x02
    24ea:	27 70       	andi	r18, 0x07	; 7
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	88 7f       	andi	r24, 0xF8	; 248
    24f0:	82 2b       	or	r24, r18
    24f2:	8a 83       	std	Y+2, r24	; 0x02
    24f4:	89 2f       	mov	r24, r25
    24f6:	87 70       	andi	r24, 0x07	; 7
    24f8:	98 2f       	mov	r25, r24
    24fa:	99 0f       	add	r25, r25
    24fc:	99 0f       	add	r25, r25
    24fe:	99 0f       	add	r25, r25
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	87 7c       	andi	r24, 0xC7	; 199
    2504:	89 2b       	or	r24, r25
    2506:	8a 83       	std	Y+2, r24	; 0x02
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	80 64       	ori	r24, 0x40	; 64
    250c:	8a 83       	std	Y+2, r24	; 0x02
        if (led->connection_status == POSITIVE_CONNECTION)
    250e:	eb 81       	ldd	r30, Y+3	; 0x03
    2510:	fc 81       	ldd	r31, Y+4	; 0x04
    2512:	80 81       	ld	r24, Z
    2514:	80 78       	andi	r24, 0x80	; 128
    2516:	88 23       	and	r24, r24
    2518:	21 f0       	breq	.+8      	; 0x2522 <LED_turn_on+0x74>
        {   /* turning led ON with pull Up connection */
            pin_led.logic = GPIO_LOW;
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	8f 77       	andi	r24, 0x7F	; 127
    251e:	8a 83       	std	Y+2, r24	; 0x02
    2520:	09 c0       	rjmp	.+18     	; 0x2534 <LED_turn_on+0x86>
        }
        else if (led->connection_status == NEGATIVE_CONNECTION)
    2522:	eb 81       	ldd	r30, Y+3	; 0x03
    2524:	fc 81       	ldd	r31, Y+4	; 0x04
    2526:	80 81       	ld	r24, Z
    2528:	80 78       	andi	r24, 0x80	; 128
    252a:	88 23       	and	r24, r24
    252c:	19 f4       	brne	.+6      	; 0x2534 <LED_turn_on+0x86>
        {   /* turning led OFF with pull Down connection */
            pin_led.logic = GPIO_HIGH;
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	80 68       	ori	r24, 0x80	; 128
    2532:	8a 83       	std	Y+2, r24	; 0x02
        }
        ret = GPIO_pin_write_logic(&pin_led, pin_led.logic);
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	88 1f       	adc	r24, r24
    2538:	88 27       	eor	r24, r24
    253a:	88 1f       	adc	r24, r24
    253c:	28 2f       	mov	r18, r24
    253e:	ce 01       	movw	r24, r28
    2540:	02 96       	adiw	r24, 0x02	; 2
    2542:	62 2f       	mov	r22, r18
    2544:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_pin_write_logic>
    2548:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    254a:	89 81       	ldd	r24, Y+1	; 0x01
}
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <LED_turn_off>:
 * @return STATUS of the function
 *          E_OK     : action executed successfully !
 *          E_NOT_OK : action execution faild !
 */
Std_ReturnType LED_turn_off (const led_t *led)
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	00 d0       	rcall	.+0      	; 0x2560 <LED_turn_off+0x6>
    2560:	00 d0       	rcall	.+0      	; 0x2562 <LED_turn_off+0x8>
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	9c 83       	std	Y+4, r25	; 0x04
    2568:	8b 83       	std	Y+3, r24	; 0x03
    Std_ReturnType ret = E_OK;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == led)
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	9c 81       	ldd	r25, Y+4	; 0x04
    2572:	00 97       	sbiw	r24, 0x00	; 0
    2574:	11 f4       	brne	.+4      	; 0x257a <LED_turn_off+0x20>
    {
        ret = E_NOT_OK;
    2576:	19 82       	std	Y+1, r1	; 0x01
    2578:	3e c0       	rjmp	.+124    	; 0x25f6 <LED_turn_off+0x9c>
    else
    {
        gpio_config_pin_t pin_led = {.port=led->port_name,
                                .pin=led->pin,
                                .direction=GPIO_DIRECTION_OUTPUT,
                                };
    257a:	eb 81       	ldd	r30, Y+3	; 0x03
    257c:	fc 81       	ldd	r31, Y+4	; 0x04
    257e:	80 81       	ld	r24, Z
    2580:	28 2f       	mov	r18, r24
    2582:	27 70       	andi	r18, 0x07	; 7
    2584:	eb 81       	ldd	r30, Y+3	; 0x03
    2586:	fc 81       	ldd	r31, Y+4	; 0x04
    2588:	80 81       	ld	r24, Z
    258a:	98 2f       	mov	r25, r24
    258c:	96 95       	lsr	r25
    258e:	96 95       	lsr	r25
    2590:	96 95       	lsr	r25
    2592:	97 70       	andi	r25, 0x07	; 7
    2594:	1a 82       	std	Y+2, r1	; 0x02
    2596:	27 70       	andi	r18, 0x07	; 7
    2598:	8a 81       	ldd	r24, Y+2	; 0x02
    259a:	88 7f       	andi	r24, 0xF8	; 248
    259c:	82 2b       	or	r24, r18
    259e:	8a 83       	std	Y+2, r24	; 0x02
    25a0:	89 2f       	mov	r24, r25
    25a2:	87 70       	andi	r24, 0x07	; 7
    25a4:	98 2f       	mov	r25, r24
    25a6:	99 0f       	add	r25, r25
    25a8:	99 0f       	add	r25, r25
    25aa:	99 0f       	add	r25, r25
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	87 7c       	andi	r24, 0xC7	; 199
    25b0:	89 2b       	or	r24, r25
    25b2:	8a 83       	std	Y+2, r24	; 0x02
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	80 64       	ori	r24, 0x40	; 64
    25b8:	8a 83       	std	Y+2, r24	; 0x02
        if (led->connection_status == POSITIVE_CONNECTION)
    25ba:	eb 81       	ldd	r30, Y+3	; 0x03
    25bc:	fc 81       	ldd	r31, Y+4	; 0x04
    25be:	80 81       	ld	r24, Z
    25c0:	80 78       	andi	r24, 0x80	; 128
    25c2:	88 23       	and	r24, r24
    25c4:	21 f0       	breq	.+8      	; 0x25ce <LED_turn_off+0x74>
        {   /* turning led ON with pull Up connection */
            pin_led.logic = GPIO_HIGH;
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	80 68       	ori	r24, 0x80	; 128
    25ca:	8a 83       	std	Y+2, r24	; 0x02
    25cc:	09 c0       	rjmp	.+18     	; 0x25e0 <LED_turn_off+0x86>
        }
        else if (led->connection_status == NEGATIVE_CONNECTION)
    25ce:	eb 81       	ldd	r30, Y+3	; 0x03
    25d0:	fc 81       	ldd	r31, Y+4	; 0x04
    25d2:	80 81       	ld	r24, Z
    25d4:	80 78       	andi	r24, 0x80	; 128
    25d6:	88 23       	and	r24, r24
    25d8:	19 f4       	brne	.+6      	; 0x25e0 <LED_turn_off+0x86>
        {   /* turning led OFF with pull Down connection */
            pin_led.logic = GPIO_LOW;
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	8f 77       	andi	r24, 0x7F	; 127
    25de:	8a 83       	std	Y+2, r24	; 0x02
        }
        ret = GPIO_pin_write_logic(&pin_led, pin_led.logic);
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	88 1f       	adc	r24, r24
    25e4:	88 27       	eor	r24, r24
    25e6:	88 1f       	adc	r24, r24
    25e8:	28 2f       	mov	r18, r24
    25ea:	ce 01       	movw	r24, r28
    25ec:	02 96       	adiw	r24, 0x02	; 2
    25ee:	62 2f       	mov	r22, r18
    25f0:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_pin_write_logic>
    25f4:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <LED_turn_toggle>:
 * @return STATUS of the function
 *          E_OK     : action executed successfully !
 *          E_NOT_OK : action execution faild !
 */
Std_ReturnType LED_turn_toggle (const led_t *led)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <LED_turn_toggle+0x6>
    260c:	00 d0       	rcall	.+0      	; 0x260e <LED_turn_toggle+0x8>
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	9c 83       	std	Y+4, r25	; 0x04
    2614:	8b 83       	std	Y+3, r24	; 0x03
    Std_ReturnType ret = E_OK;
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == led)
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	11 f4       	brne	.+4      	; 0x2626 <LED_turn_toggle+0x20>
    {
        ret = E_NOT_OK;
    2622:	19 82       	std	Y+1, r1	; 0x01
    2624:	35 c0       	rjmp	.+106    	; 0x2690 <LED_turn_toggle+0x8a>
    {
        gpio_config_pin_t pin_led = {.port=led->port_name,
                                .pin=led->pin,
                                .direction=GPIO_DIRECTION_OUTPUT,
                                .logic=led->led_status
                                };
    2626:	eb 81       	ldd	r30, Y+3	; 0x03
    2628:	fc 81       	ldd	r31, Y+4	; 0x04
    262a:	80 81       	ld	r24, Z
    262c:	28 2f       	mov	r18, r24
    262e:	27 70       	andi	r18, 0x07	; 7
    2630:	eb 81       	ldd	r30, Y+3	; 0x03
    2632:	fc 81       	ldd	r31, Y+4	; 0x04
    2634:	80 81       	ld	r24, Z
    2636:	98 2f       	mov	r25, r24
    2638:	96 95       	lsr	r25
    263a:	96 95       	lsr	r25
    263c:	96 95       	lsr	r25
    263e:	97 70       	andi	r25, 0x07	; 7
    2640:	eb 81       	ldd	r30, Y+3	; 0x03
    2642:	fc 81       	ldd	r31, Y+4	; 0x04
    2644:	80 81       	ld	r24, Z
    2646:	38 2f       	mov	r19, r24
    2648:	32 95       	swap	r19
    264a:	36 95       	lsr	r19
    264c:	36 95       	lsr	r19
    264e:	33 70       	andi	r19, 0x03	; 3
    2650:	31 70       	andi	r19, 0x01	; 1
    2652:	27 70       	andi	r18, 0x07	; 7
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	88 7f       	andi	r24, 0xF8	; 248
    2658:	82 2b       	or	r24, r18
    265a:	8a 83       	std	Y+2, r24	; 0x02
    265c:	89 2f       	mov	r24, r25
    265e:	87 70       	andi	r24, 0x07	; 7
    2660:	98 2f       	mov	r25, r24
    2662:	99 0f       	add	r25, r25
    2664:	99 0f       	add	r25, r25
    2666:	99 0f       	add	r25, r25
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	87 7c       	andi	r24, 0xC7	; 199
    266c:	89 2b       	or	r24, r25
    266e:	8a 83       	std	Y+2, r24	; 0x02
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	80 64       	ori	r24, 0x40	; 64
    2674:	8a 83       	std	Y+2, r24	; 0x02
    2676:	93 2f       	mov	r25, r19
    2678:	97 95       	ror	r25
    267a:	99 27       	eor	r25, r25
    267c:	97 95       	ror	r25
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	8f 77       	andi	r24, 0x7F	; 127
    2682:	89 2b       	or	r24, r25
    2684:	8a 83       	std	Y+2, r24	; 0x02
        /* it doesn't matter whether pin is pull up connected or pull down as the value of pin will inverted*/
        ret = GPIO_pin_toggle_logic(&pin_led);
    2686:	ce 01       	movw	r24, r28
    2688:	02 96       	adiw	r24, 0x02	; 2
    268a:	0e 94 af 0c 	call	0x195e	; 0x195e <GPIO_pin_toggle_logic>
    268e:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    2690:	89 81       	ldd	r24, Y+1	; 0x01
}
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	08 95       	ret

000026a0 <lcd_4bit_initialize>:
static void* my_memset(void* str, uint8 ch, uint8 str_size);

/* ---------------------- Function Definitions ----------------------*/
#if (LCD_MODE == CHAR_LCD_4BIT_MODE)
Std_ReturnType lcd_4bit_initialize(const char_lcd_t* lcd_obj)
{
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	e8 97       	sbiw	r28, 0x38	; 56
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	98 af       	std	Y+56, r25	; 0x38
    26b6:	8f ab       	std	Y+55, r24	; 0x37
   Std_ReturnType ret = E_NOT_OK;
    26b8:	1e aa       	std	Y+54, r1	; 0x36
    uint8 l_pin_counter = ZERO_INIT;
    26ba:	1d aa       	std	Y+53, r1	; 0x35
    if(NULL == lcd_obj)
    26bc:	8f a9       	ldd	r24, Y+55	; 0x37
    26be:	98 ad       	ldd	r25, Y+56	; 0x38
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	11 f4       	brne	.+4      	; 0x26c8 <lcd_4bit_initialize+0x28>
    {
        ret = E_NOT_OK;
    26c4:	1e aa       	std	Y+54, r1	; 0x36
    26c6:	04 c2       	rjmp	.+1032   	; 0x2ad0 <lcd_4bit_initialize+0x430>
    }
    else
    {
        ret = GPIO_pin_initialize(&(lcd_obj->RS_pin));
    26c8:	8f a9       	ldd	r24, Y+55	; 0x37
    26ca:	98 ad       	ldd	r25, Y+56	; 0x38
    26cc:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_pin_initialize>
    26d0:	8e ab       	std	Y+54, r24	; 0x36
        ret = GPIO_pin_initialize(&(lcd_obj->E_pin));
    26d2:	8f a9       	ldd	r24, Y+55	; 0x37
    26d4:	98 ad       	ldd	r25, Y+56	; 0x38
    26d6:	01 96       	adiw	r24, 0x01	; 1
    26d8:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_pin_initialize>
    26dc:	8e ab       	std	Y+54, r24	; 0x36
        for(l_pin_counter=0; l_pin_counter < 4; l_pin_counter++)
    26de:	1d aa       	std	Y+53, r1	; 0x35
    26e0:	10 c0       	rjmp	.+32     	; 0x2702 <lcd_4bit_initialize+0x62>
        {
            ret = GPIO_pin_initialize(&(lcd_obj->lcd_data_pins[l_pin_counter]));
    26e2:	8f a9       	ldd	r24, Y+55	; 0x37
    26e4:	98 ad       	ldd	r25, Y+56	; 0x38
    26e6:	9c 01       	movw	r18, r24
    26e8:	2e 5f       	subi	r18, 0xFE	; 254
    26ea:	3f 4f       	sbci	r19, 0xFF	; 255
    26ec:	8d a9       	ldd	r24, Y+53	; 0x35
    26ee:	88 2f       	mov	r24, r24
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	82 0f       	add	r24, r18
    26f4:	93 1f       	adc	r25, r19
    26f6:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_pin_initialize>
    26fa:	8e ab       	std	Y+54, r24	; 0x36
    }
    else
    {
        ret = GPIO_pin_initialize(&(lcd_obj->RS_pin));
        ret = GPIO_pin_initialize(&(lcd_obj->E_pin));
        for(l_pin_counter=0; l_pin_counter < 4; l_pin_counter++)
    26fc:	8d a9       	ldd	r24, Y+53	; 0x35
    26fe:	8f 5f       	subi	r24, 0xFF	; 255
    2700:	8d ab       	std	Y+53, r24	; 0x35
    2702:	8d a9       	ldd	r24, Y+53	; 0x35
    2704:	84 30       	cpi	r24, 0x04	; 4
    2706:	68 f3       	brcs	.-38     	; 0x26e2 <lcd_4bit_initialize+0x42>
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	a0 ea       	ldi	r26, 0xA0	; 160
    270e:	b1 e4       	ldi	r27, 0x41	; 65
    2710:	89 ab       	std	Y+49, r24	; 0x31
    2712:	9a ab       	std	Y+50, r25	; 0x32
    2714:	ab ab       	std	Y+51, r26	; 0x33
    2716:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2718:	69 a9       	ldd	r22, Y+49	; 0x31
    271a:	7a a9       	ldd	r23, Y+50	; 0x32
    271c:	8b a9       	ldd	r24, Y+51	; 0x33
    271e:	9c a9       	ldd	r25, Y+52	; 0x34
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	4a ef       	ldi	r20, 0xFA	; 250
    2726:	54 e4       	ldi	r21, 0x44	; 68
    2728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	8d a7       	std	Y+45, r24	; 0x2d
    2732:	9e a7       	std	Y+46, r25	; 0x2e
    2734:	af a7       	std	Y+47, r26	; 0x2f
    2736:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2738:	6d a5       	ldd	r22, Y+45	; 0x2d
    273a:	7e a5       	ldd	r23, Y+46	; 0x2e
    273c:	8f a5       	ldd	r24, Y+47	; 0x2f
    273e:	98 a9       	ldd	r25, Y+48	; 0x30
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e8       	ldi	r20, 0x80	; 128
    2746:	5f e3       	ldi	r21, 0x3F	; 63
    2748:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    274c:	88 23       	and	r24, r24
    274e:	2c f4       	brge	.+10     	; 0x275a <lcd_4bit_initialize+0xba>
		__ticks = 1;
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9c a7       	std	Y+44, r25	; 0x2c
    2756:	8b a7       	std	Y+43, r24	; 0x2b
    2758:	3f c0       	rjmp	.+126    	; 0x27d8 <lcd_4bit_initialize+0x138>
	else if (__tmp > 65535)
    275a:	6d a5       	ldd	r22, Y+45	; 0x2d
    275c:	7e a5       	ldd	r23, Y+46	; 0x2e
    275e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2760:	98 a9       	ldd	r25, Y+48	; 0x30
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	3f ef       	ldi	r19, 0xFF	; 255
    2766:	4f e7       	ldi	r20, 0x7F	; 127
    2768:	57 e4       	ldi	r21, 0x47	; 71
    276a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    276e:	18 16       	cp	r1, r24
    2770:	4c f5       	brge	.+82     	; 0x27c4 <lcd_4bit_initialize+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2772:	69 a9       	ldd	r22, Y+49	; 0x31
    2774:	7a a9       	ldd	r23, Y+50	; 0x32
    2776:	8b a9       	ldd	r24, Y+51	; 0x33
    2778:	9c a9       	ldd	r25, Y+52	; 0x34
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e2       	ldi	r20, 0x20	; 32
    2780:	51 e4       	ldi	r21, 0x41	; 65
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	9c a7       	std	Y+44, r25	; 0x2c
    2798:	8b a7       	std	Y+43, r24	; 0x2b
    279a:	0f c0       	rjmp	.+30     	; 0x27ba <lcd_4bit_initialize+0x11a>
    279c:	88 ec       	ldi	r24, 0xC8	; 200
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9a a7       	std	Y+42, r25	; 0x2a
    27a2:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27a4:	89 a5       	ldd	r24, Y+41	; 0x29
    27a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <lcd_4bit_initialize+0x108>
    27ac:	9a a7       	std	Y+42, r25	; 0x2a
    27ae:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    27b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	9c a7       	std	Y+44, r25	; 0x2c
    27b8:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    27bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	69 f7       	brne	.-38     	; 0x279c <lcd_4bit_initialize+0xfc>
    27c2:	14 c0       	rjmp	.+40     	; 0x27ec <lcd_4bit_initialize+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c4:	6d a5       	ldd	r22, Y+45	; 0x2d
    27c6:	7e a5       	ldd	r23, Y+46	; 0x2e
    27c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ca:	98 a9       	ldd	r25, Y+48	; 0x30
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9c a7       	std	Y+44, r25	; 0x2c
    27d6:	8b a7       	std	Y+43, r24	; 0x2b
    27d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    27da:	9c a5       	ldd	r25, Y+44	; 0x2c
    27dc:	98 a7       	std	Y+40, r25	; 0x28
    27de:	8f a3       	std	Y+39, r24	; 0x27
    27e0:	8f a1       	ldd	r24, Y+39	; 0x27
    27e2:	98 a5       	ldd	r25, Y+40	; 0x28
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <lcd_4bit_initialize+0x144>
    27e8:	98 a7       	std	Y+40, r25	; 0x28
    27ea:	8f a3       	std	Y+39, r24	; 0x27
        {
            ret = GPIO_pin_initialize(&(lcd_obj->lcd_data_pins[l_pin_counter]));
        }
        _delay_ms(20);
        ret = lcd_4bit_send_command(lcd_obj, _LCD_8BIT_MODE_2LINES_COMMAND);
    27ec:	8f a9       	ldd	r24, Y+55	; 0x37
    27ee:	98 ad       	ldd	r25, Y+56	; 0x38
    27f0:	68 e3       	ldi	r22, 0x38	; 56
    27f2:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    27f6:	8e ab       	std	Y+54, r24	; 0x36
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	a0 ea       	ldi	r26, 0xA0	; 160
    27fe:	b0 e4       	ldi	r27, 0x40	; 64
    2800:	8b a3       	std	Y+35, r24	; 0x23
    2802:	9c a3       	std	Y+36, r25	; 0x24
    2804:	ad a3       	std	Y+37, r26	; 0x25
    2806:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2808:	6b a1       	ldd	r22, Y+35	; 0x23
    280a:	7c a1       	ldd	r23, Y+36	; 0x24
    280c:	8d a1       	ldd	r24, Y+37	; 0x25
    280e:	9e a1       	ldd	r25, Y+38	; 0x26
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	4a ef       	ldi	r20, 0xFA	; 250
    2816:	54 e4       	ldi	r21, 0x44	; 68
    2818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	8f 8f       	std	Y+31, r24	; 0x1f
    2822:	98 a3       	std	Y+32, r25	; 0x20
    2824:	a9 a3       	std	Y+33, r26	; 0x21
    2826:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2828:	6f 8d       	ldd	r22, Y+31	; 0x1f
    282a:	78 a1       	ldd	r23, Y+32	; 0x20
    282c:	89 a1       	ldd	r24, Y+33	; 0x21
    282e:	9a a1       	ldd	r25, Y+34	; 0x22
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e8       	ldi	r20, 0x80	; 128
    2836:	5f e3       	ldi	r21, 0x3F	; 63
    2838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    283c:	88 23       	and	r24, r24
    283e:	2c f4       	brge	.+10     	; 0x284a <lcd_4bit_initialize+0x1aa>
		__ticks = 1;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	9e 8f       	std	Y+30, r25	; 0x1e
    2846:	8d 8f       	std	Y+29, r24	; 0x1d
    2848:	3f c0       	rjmp	.+126    	; 0x28c8 <lcd_4bit_initialize+0x228>
	else if (__tmp > 65535)
    284a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    284c:	78 a1       	ldd	r23, Y+32	; 0x20
    284e:	89 a1       	ldd	r24, Y+33	; 0x21
    2850:	9a a1       	ldd	r25, Y+34	; 0x22
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	3f ef       	ldi	r19, 0xFF	; 255
    2856:	4f e7       	ldi	r20, 0x7F	; 127
    2858:	57 e4       	ldi	r21, 0x47	; 71
    285a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    285e:	18 16       	cp	r1, r24
    2860:	4c f5       	brge	.+82     	; 0x28b4 <lcd_4bit_initialize+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2862:	6b a1       	ldd	r22, Y+35	; 0x23
    2864:	7c a1       	ldd	r23, Y+36	; 0x24
    2866:	8d a1       	ldd	r24, Y+37	; 0x25
    2868:	9e a1       	ldd	r25, Y+38	; 0x26
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e2       	ldi	r20, 0x20	; 32
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	9e 8f       	std	Y+30, r25	; 0x1e
    2888:	8d 8f       	std	Y+29, r24	; 0x1d
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <lcd_4bit_initialize+0x20a>
    288c:	88 ec       	ldi	r24, 0xC8	; 200
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	9c 8f       	std	Y+28, r25	; 0x1c
    2892:	8b 8f       	std	Y+27, r24	; 0x1b
    2894:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2896:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <lcd_4bit_initialize+0x1f8>
    289c:	9c 8f       	std	Y+28, r25	; 0x1c
    289e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	9e 8f       	std	Y+30, r25	; 0x1e
    28a8:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	69 f7       	brne	.-38     	; 0x288c <lcd_4bit_initialize+0x1ec>
    28b2:	14 c0       	rjmp	.+40     	; 0x28dc <lcd_4bit_initialize+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    28b6:	78 a1       	ldd	r23, Y+32	; 0x20
    28b8:	89 a1       	ldd	r24, Y+33	; 0x21
    28ba:	9a a1       	ldd	r25, Y+34	; 0x22
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9e 8f       	std	Y+30, r25	; 0x1e
    28c6:	8d 8f       	std	Y+29, r24	; 0x1d
    28c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28cc:	9a 8f       	std	Y+26, r25	; 0x1a
    28ce:	89 8f       	std	Y+25, r24	; 0x19
    28d0:	89 8d       	ldd	r24, Y+25	; 0x19
    28d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <lcd_4bit_initialize+0x234>
    28d8:	9a 8f       	std	Y+26, r25	; 0x1a
    28da:	89 8f       	std	Y+25, r24	; 0x19
        _delay_ms(5);
        ret = lcd_4bit_send_command(lcd_obj, _LCD_8BIT_MODE_2LINES_COMMAND);
    28dc:	8f a9       	ldd	r24, Y+55	; 0x37
    28de:	98 ad       	ldd	r25, Y+56	; 0x38
    28e0:	68 e3       	ldi	r22, 0x38	; 56
    28e2:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    28e6:	8e ab       	std	Y+54, r24	; 0x36
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	a6 e1       	ldi	r26, 0x16	; 22
    28ee:	b3 e4       	ldi	r27, 0x43	; 67
    28f0:	8d 8b       	std	Y+21, r24	; 0x15
    28f2:	9e 8b       	std	Y+22, r25	; 0x16
    28f4:	af 8b       	std	Y+23, r26	; 0x17
    28f6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28f8:	6d 89       	ldd	r22, Y+21	; 0x15
    28fa:	7e 89       	ldd	r23, Y+22	; 0x16
    28fc:	8f 89       	ldd	r24, Y+23	; 0x17
    28fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2900:	2b ea       	ldi	r18, 0xAB	; 171
    2902:	3a ea       	ldi	r19, 0xAA	; 170
    2904:	4a e2       	ldi	r20, 0x2A	; 42
    2906:	50 e4       	ldi	r21, 0x40	; 64
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	89 8b       	std	Y+17, r24	; 0x11
    2912:	9a 8b       	std	Y+18, r25	; 0x12
    2914:	ab 8b       	std	Y+19, r26	; 0x13
    2916:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2918:	69 89       	ldd	r22, Y+17	; 0x11
    291a:	7a 89       	ldd	r23, Y+18	; 0x12
    291c:	8b 89       	ldd	r24, Y+19	; 0x13
    291e:	9c 89       	ldd	r25, Y+20	; 0x14
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	1c f4       	brge	.+6      	; 0x2936 <lcd_4bit_initialize+0x296>
		__ticks = 1;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	88 8b       	std	Y+16, r24	; 0x10
    2934:	91 c0       	rjmp	.+290    	; 0x2a58 <lcd_4bit_initialize+0x3b8>
	else if (__tmp > 255)
    2936:	69 89       	ldd	r22, Y+17	; 0x11
    2938:	7a 89       	ldd	r23, Y+18	; 0x12
    293a:	8b 89       	ldd	r24, Y+19	; 0x13
    293c:	9c 89       	ldd	r25, Y+20	; 0x14
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	4f e7       	ldi	r20, 0x7F	; 127
    2944:	53 e4       	ldi	r21, 0x43	; 67
    2946:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    294a:	18 16       	cp	r1, r24
    294c:	0c f0       	brlt	.+2      	; 0x2950 <lcd_4bit_initialize+0x2b0>
    294e:	7b c0       	rjmp	.+246    	; 0x2a46 <lcd_4bit_initialize+0x3a6>
	{
		_delay_ms(__us / 1000.0);
    2950:	6d 89       	ldd	r22, Y+21	; 0x15
    2952:	7e 89       	ldd	r23, Y+22	; 0x16
    2954:	8f 89       	ldd	r24, Y+23	; 0x17
    2956:	98 8d       	ldd	r25, Y+24	; 0x18
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	4a e7       	ldi	r20, 0x7A	; 122
    295e:	54 e4       	ldi	r21, 0x44	; 68
    2960:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	8c 87       	std	Y+12, r24	; 0x0c
    296a:	9d 87       	std	Y+13, r25	; 0x0d
    296c:	ae 87       	std	Y+14, r26	; 0x0e
    296e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2970:	6c 85       	ldd	r22, Y+12	; 0x0c
    2972:	7d 85       	ldd	r23, Y+13	; 0x0d
    2974:	8e 85       	ldd	r24, Y+14	; 0x0e
    2976:	9f 85       	ldd	r25, Y+15	; 0x0f
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	4a ef       	ldi	r20, 0xFA	; 250
    297e:	54 e4       	ldi	r21, 0x44	; 68
    2980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	88 87       	std	Y+8, r24	; 0x08
    298a:	99 87       	std	Y+9, r25	; 0x09
    298c:	aa 87       	std	Y+10, r26	; 0x0a
    298e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2990:	68 85       	ldd	r22, Y+8	; 0x08
    2992:	79 85       	ldd	r23, Y+9	; 0x09
    2994:	8a 85       	ldd	r24, Y+10	; 0x0a
    2996:	9b 85       	ldd	r25, Y+11	; 0x0b
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	40 e8       	ldi	r20, 0x80	; 128
    299e:	5f e3       	ldi	r21, 0x3F	; 63
    29a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29a4:	88 23       	and	r24, r24
    29a6:	2c f4       	brge	.+10     	; 0x29b2 <lcd_4bit_initialize+0x312>
		__ticks = 1;
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	9f 83       	std	Y+7, r25	; 0x07
    29ae:	8e 83       	std	Y+6, r24	; 0x06
    29b0:	3f c0       	rjmp	.+126    	; 0x2a30 <lcd_4bit_initialize+0x390>
	else if (__tmp > 65535)
    29b2:	68 85       	ldd	r22, Y+8	; 0x08
    29b4:	79 85       	ldd	r23, Y+9	; 0x09
    29b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    29b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	3f ef       	ldi	r19, 0xFF	; 255
    29be:	4f e7       	ldi	r20, 0x7F	; 127
    29c0:	57 e4       	ldi	r21, 0x47	; 71
    29c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29c6:	18 16       	cp	r1, r24
    29c8:	4c f5       	brge	.+82     	; 0x2a1c <lcd_4bit_initialize+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ca:	6c 85       	ldd	r22, Y+12	; 0x0c
    29cc:	7d 85       	ldd	r23, Y+13	; 0x0d
    29ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    29d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e2       	ldi	r20, 0x20	; 32
    29d8:	51 e4       	ldi	r21, 0x41	; 65
    29da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	9f 83       	std	Y+7, r25	; 0x07
    29f0:	8e 83       	std	Y+6, r24	; 0x06
    29f2:	0f c0       	rjmp	.+30     	; 0x2a12 <lcd_4bit_initialize+0x372>
    29f4:	88 ec       	ldi	r24, 0xC8	; 200
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	9d 83       	std	Y+5, r25	; 0x05
    29fa:	8c 83       	std	Y+4, r24	; 0x04
    29fc:	8c 81       	ldd	r24, Y+4	; 0x04
    29fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <lcd_4bit_initialize+0x360>
    2a04:	9d 83       	std	Y+5, r25	; 0x05
    2a06:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a08:	8e 81       	ldd	r24, Y+6	; 0x06
    2a0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	9f 83       	std	Y+7, r25	; 0x07
    2a10:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a12:	8e 81       	ldd	r24, Y+6	; 0x06
    2a14:	9f 81       	ldd	r25, Y+7	; 0x07
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	69 f7       	brne	.-38     	; 0x29f4 <lcd_4bit_initialize+0x354>
    2a1a:	24 c0       	rjmp	.+72     	; 0x2a64 <lcd_4bit_initialize+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1c:	68 85       	ldd	r22, Y+8	; 0x08
    2a1e:	79 85       	ldd	r23, Y+9	; 0x09
    2a20:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a22:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	9f 83       	std	Y+7, r25	; 0x07
    2a2e:	8e 83       	std	Y+6, r24	; 0x06
    2a30:	8e 81       	ldd	r24, Y+6	; 0x06
    2a32:	9f 81       	ldd	r25, Y+7	; 0x07
    2a34:	9b 83       	std	Y+3, r25	; 0x03
    2a36:	8a 83       	std	Y+2, r24	; 0x02
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <lcd_4bit_initialize+0x39c>
    2a40:	9b 83       	std	Y+3, r25	; 0x03
    2a42:	8a 83       	std	Y+2, r24	; 0x02
    2a44:	0f c0       	rjmp	.+30     	; 0x2a64 <lcd_4bit_initialize+0x3c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a46:	69 89       	ldd	r22, Y+17	; 0x11
    2a48:	7a 89       	ldd	r23, Y+18	; 0x12
    2a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	88 8b       	std	Y+16, r24	; 0x10
    2a58:	88 89       	ldd	r24, Y+16	; 0x10
    2a5a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	8a 95       	dec	r24
    2a60:	f1 f7       	brne	.-4      	; 0x2a5e <lcd_4bit_initialize+0x3be>
    2a62:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(150);
        ret = lcd_4bit_send_command(lcd_obj, _LCD_8BIT_MODE_2LINES_COMMAND);
    2a64:	8f a9       	ldd	r24, Y+55	; 0x37
    2a66:	98 ad       	ldd	r25, Y+56	; 0x38
    2a68:	68 e3       	ldi	r22, 0x38	; 56
    2a6a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    2a6e:	8e ab       	std	Y+54, r24	; 0x36
        
        ret = lcd_send_4bit(lcd_obj, 0x02); // start operation in 4-bit mode
    2a70:	8f a9       	ldd	r24, Y+55	; 0x37
    2a72:	98 ad       	ldd	r25, Y+56	; 0x38
    2a74:	62 e0       	ldi	r22, 0x02	; 2
    2a76:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <lcd_send_4bit>
    2a7a:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_CURSOR_OFF_DISPLAY_OFF);
    2a7c:	8f a9       	ldd	r24, Y+55	; 0x37
    2a7e:	98 ad       	ldd	r25, Y+56	; 0x38
    2a80:	68 e0       	ldi	r22, 0x08	; 8
    2a82:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    2a86:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_CLEAR);
    2a88:	8f a9       	ldd	r24, Y+55	; 0x37
    2a8a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a8c:	61 e0       	ldi	r22, 0x01	; 1
    2a8e:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    2a92:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_RETURN_HOME);
    2a94:	8f a9       	ldd	r24, Y+55	; 0x37
    2a96:	98 ad       	ldd	r25, Y+56	; 0x38
    2a98:	62 e0       	ldi	r22, 0x02	; 2
    2a9a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    2a9e:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_ENTRY_MODE_INC_NO_SHIFT);
    2aa0:	8f a9       	ldd	r24, Y+55	; 0x37
    2aa2:	98 ad       	ldd	r25, Y+56	; 0x38
    2aa4:	66 e0       	ldi	r22, 0x06	; 6
    2aa6:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    2aaa:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_CURSOR_OFF_DISPLAY_ON);
    2aac:	8f a9       	ldd	r24, Y+55	; 0x37
    2aae:	98 ad       	ldd	r25, Y+56	; 0x38
    2ab0:	6c e0       	ldi	r22, 0x0C	; 12
    2ab2:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    2ab6:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS);  // Set DDRAM to address 0, start at row 1 column 1
    2ab8:	8f a9       	ldd	r24, Y+55	; 0x37
    2aba:	98 ad       	ldd	r25, Y+56	; 0x38
    2abc:	60 e8       	ldi	r22, 0x80	; 128
    2abe:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    2ac2:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd_obj, _LCD_4BIT_MODE_2LINES_COMMAND);    // Set 4bit lcd mode
    2ac4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ac6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ac8:	68 e2       	ldi	r22, 0x28	; 40
    2aca:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    2ace:	8e ab       	std	Y+54, r24	; 0x36
    }
    return ret;
    2ad0:	8e a9       	ldd	r24, Y+54	; 0x36
}
    2ad2:	e8 96       	adiw	r28, 0x38	; 56
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <lcd_4bit_send_command>:
Std_ReturnType lcd_4bit_send_command(const char_lcd_t* lcd_obj, uint8 lcd_command)
{
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <lcd_4bit_send_command+0x6>
    2aea:	00 d0       	rcall	.+0      	; 0x2aec <lcd_4bit_send_command+0x8>
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	9b 83       	std	Y+3, r25	; 0x03
    2af2:	8a 83       	std	Y+2, r24	; 0x02
    2af4:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType ret = E_NOT_OK;
    2af6:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	9b 81       	ldd	r25, Y+3	; 0x03
    2afc:	00 97       	sbiw	r24, 0x00	; 0
    2afe:	11 f4       	brne	.+4      	; 0x2b04 <lcd_4bit_send_command+0x20>
    {
        ret = E_NOT_OK;
    2b00:	19 82       	std	Y+1, r1	; 0x01
    2b02:	20 c0       	rjmp	.+64     	; 0x2b44 <lcd_4bit_send_command+0x60>
    }
    else
    {
        ret = GPIO_pin_write_logic(&(lcd_obj->RS_pin), GPIO_LOW);
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	9b 81       	ldd	r25, Y+3	; 0x03
    2b08:	60 e0       	ldi	r22, 0x00	; 0
    2b0a:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_pin_write_logic>
    2b0e:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_4bit(lcd_obj, (lcd_command >> 4));    // Send high Nibble
    2b10:	8c 81       	ldd	r24, Y+4	; 0x04
    2b12:	28 2f       	mov	r18, r24
    2b14:	22 95       	swap	r18
    2b16:	2f 70       	andi	r18, 0x0F	; 15
    2b18:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1c:	62 2f       	mov	r22, r18
    2b1e:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <lcd_send_4bit>
    2b22:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_enable_signal(lcd_obj);               // Send enable signal
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	9b 81       	ldd	r25, Y+3	; 0x03
    2b28:	0e 94 25 19 	call	0x324a	; 0x324a <lcd_send_enable_signal>
    2b2c:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_4bit(lcd_obj, lcd_command);           // Send low Nibble
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	9b 81       	ldd	r25, Y+3	; 0x03
    2b32:	6c 81       	ldd	r22, Y+4	; 0x04
    2b34:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <lcd_send_4bit>
    2b38:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_enable_signal(lcd_obj);               // Send enable signal
    2b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3e:	0e 94 25 19 	call	0x324a	; 0x324a <lcd_send_enable_signal>
    2b42:	89 83       	std	Y+1, r24	; 0x01
    }
    
    return ret;
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <lcd_4bit_send_char_data>:
Std_ReturnType lcd_4bit_send_char_data(const char_lcd_t* lcd_obj, uint8 lcd_data)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <lcd_4bit_send_char_data+0x6>
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <lcd_4bit_send_char_data+0x8>
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	9b 83       	std	Y+3, r25	; 0x03
    2b62:	8a 83       	std	Y+2, r24	; 0x02
    2b64:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType ret = E_NOT_OK;
    2b66:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    2b68:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b6c:	00 97       	sbiw	r24, 0x00	; 0
    2b6e:	11 f4       	brne	.+4      	; 0x2b74 <lcd_4bit_send_char_data+0x20>
    {
        ret = E_NOT_OK;
    2b70:	19 82       	std	Y+1, r1	; 0x01
    2b72:	20 c0       	rjmp	.+64     	; 0x2bb4 <lcd_4bit_send_char_data+0x60>
    }
    else
    {
        ret = GPIO_pin_write_logic(&(lcd_obj->RS_pin), GPIO_HIGH);
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	9b 81       	ldd	r25, Y+3	; 0x03
    2b78:	61 e0       	ldi	r22, 0x01	; 1
    2b7a:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_pin_write_logic>
    2b7e:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_4bit(lcd_obj, (lcd_data >> 4));       // Send high Nibble
    2b80:	8c 81       	ldd	r24, Y+4	; 0x04
    2b82:	28 2f       	mov	r18, r24
    2b84:	22 95       	swap	r18
    2b86:	2f 70       	andi	r18, 0x0F	; 15
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b8c:	62 2f       	mov	r22, r18
    2b8e:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <lcd_send_4bit>
    2b92:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_enable_signal(lcd_obj);               // Send enable signal
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	9b 81       	ldd	r25, Y+3	; 0x03
    2b98:	0e 94 25 19 	call	0x324a	; 0x324a <lcd_send_enable_signal>
    2b9c:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_4bit(lcd_obj, lcd_data);              // Send low Nibble
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba2:	6c 81       	ldd	r22, Y+4	; 0x04
    2ba4:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <lcd_send_4bit>
    2ba8:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_send_enable_signal(lcd_obj);               // Send enable signal
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	9b 81       	ldd	r25, Y+3	; 0x03
    2bae:	0e 94 25 19 	call	0x324a	; 0x324a <lcd_send_enable_signal>
    2bb2:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	08 95       	ret

00002bc4 <lcd_4bit_send_char_data_pos>:
Std_ReturnType lcd_4bit_send_char_data_pos(const char_lcd_t* lcd_obj, uint8 row, uint8 col, uint8 lcd_data)
{
    2bc4:	df 93       	push	r29
    2bc6:	cf 93       	push	r28
    2bc8:	00 d0       	rcall	.+0      	; 0x2bca <lcd_4bit_send_char_data_pos+0x6>
    2bca:	00 d0       	rcall	.+0      	; 0x2bcc <lcd_4bit_send_char_data_pos+0x8>
    2bcc:	00 d0       	rcall	.+0      	; 0x2bce <lcd_4bit_send_char_data_pos+0xa>
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	9b 83       	std	Y+3, r25	; 0x03
    2bd4:	8a 83       	std	Y+2, r24	; 0x02
    2bd6:	6c 83       	std	Y+4, r22	; 0x04
    2bd8:	4d 83       	std	Y+5, r20	; 0x05
    2bda:	2e 83       	std	Y+6, r18	; 0x06
    Std_ReturnType ret = E_NOT_OK;
    2bdc:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	9b 81       	ldd	r25, Y+3	; 0x03
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	11 f4       	brne	.+4      	; 0x2bea <lcd_4bit_send_char_data_pos+0x26>
    {
        ret = E_NOT_OK;
    2be6:	19 82       	std	Y+1, r1	; 0x01
    2be8:	0d c0       	rjmp	.+26     	; 0x2c04 <lcd_4bit_send_char_data_pos+0x40>
    }
    else
    {
        ret = lcd_4bit_set_cursor_pos(lcd_obj, row, col);
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	9b 81       	ldd	r25, Y+3	; 0x03
    2bee:	6c 81       	ldd	r22, Y+4	; 0x04
    2bf0:	4d 81       	ldd	r20, Y+5	; 0x05
    2bf2:	0e 94 76 18 	call	0x30ec	; 0x30ec <lcd_4bit_set_cursor_pos>
    2bf6:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_4bit_send_char_data(lcd_obj, lcd_data);
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfc:	6e 81       	ldd	r22, Y+6	; 0x06
    2bfe:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <lcd_4bit_send_char_data>
    2c02:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c06:	26 96       	adiw	r28, 0x06	; 6
    2c08:	0f b6       	in	r0, 0x3f	; 63
    2c0a:	f8 94       	cli
    2c0c:	de bf       	out	0x3e, r29	; 62
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	cd bf       	out	0x3d, r28	; 61
    2c12:	cf 91       	pop	r28
    2c14:	df 91       	pop	r29
    2c16:	08 95       	ret

00002c18 <lcd_4bit_send_string_data>:
Std_ReturnType lcd_4bit_send_string_data(const char_lcd_t* lcd_obj, uint8* str)
{
    2c18:	df 93       	push	r29
    2c1a:	cf 93       	push	r28
    2c1c:	00 d0       	rcall	.+0      	; 0x2c1e <lcd_4bit_send_string_data+0x6>
    2c1e:	00 d0       	rcall	.+0      	; 0x2c20 <lcd_4bit_send_string_data+0x8>
    2c20:	00 d0       	rcall	.+0      	; 0x2c22 <lcd_4bit_send_string_data+0xa>
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	9c 83       	std	Y+4, r25	; 0x04
    2c28:	8b 83       	std	Y+3, r24	; 0x03
    2c2a:	7e 83       	std	Y+6, r23	; 0x06
    2c2c:	6d 83       	std	Y+5, r22	; 0x05
    Std_ReturnType ret = E_NOT_OK;
    2c2e:	1a 82       	std	Y+2, r1	; 0x02
    uint8 index = ZERO_INIT;
    2c30:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    2c32:	8b 81       	ldd	r24, Y+3	; 0x03
    2c34:	9c 81       	ldd	r25, Y+4	; 0x04
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	a1 f4       	brne	.+40     	; 0x2c62 <lcd_4bit_send_string_data+0x4a>
    {
        ret = E_NOT_OK;
    2c3a:	1a 82       	std	Y+2, r1	; 0x02
    2c3c:	1d c0       	rjmp	.+58     	; 0x2c78 <lcd_4bit_send_string_data+0x60>
    }
    else
    {
        while('\0' != *(str+index))
        {
            ret = lcd_4bit_send_char_data(lcd_obj, *(str + index));
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	8d 81       	ldd	r24, Y+5	; 0x05
    2c46:	9e 81       	ldd	r25, Y+6	; 0x06
    2c48:	fc 01       	movw	r30, r24
    2c4a:	e2 0f       	add	r30, r18
    2c4c:	f3 1f       	adc	r31, r19
    2c4e:	20 81       	ld	r18, Z
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	9c 81       	ldd	r25, Y+4	; 0x04
    2c54:	62 2f       	mov	r22, r18
    2c56:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <lcd_4bit_send_char_data>
    2c5a:	8a 83       	std	Y+2, r24	; 0x02
            index++;
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	8f 5f       	subi	r24, 0xFF	; 255
    2c60:	89 83       	std	Y+1, r24	; 0x01
    {
        ret = E_NOT_OK;
    }
    else
    {
        while('\0' != *(str+index))
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	e2 0f       	add	r30, r18
    2c70:	f3 1f       	adc	r31, r19
    2c72:	80 81       	ld	r24, Z
    2c74:	88 23       	and	r24, r24
    2c76:	19 f7       	brne	.-58     	; 0x2c3e <lcd_4bit_send_string_data+0x26>
        {
            ret = lcd_4bit_send_char_data(lcd_obj, *(str + index));
            index++;
        }     
    }
    return ret;
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c7a:	26 96       	adiw	r28, 0x06	; 6
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	f8 94       	cli
    2c80:	de bf       	out	0x3e, r29	; 62
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	cd bf       	out	0x3d, r28	; 61
    2c86:	cf 91       	pop	r28
    2c88:	df 91       	pop	r29
    2c8a:	08 95       	ret

00002c8c <lcd_4bit_send_string_data_pos>:
Std_ReturnType lcd_4bit_send_string_data_pos(const char_lcd_t* lcd_obj, uint8 row, uint8 col, const uint8* str)
{
    2c8c:	df 93       	push	r29
    2c8e:	cf 93       	push	r28
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	28 97       	sbiw	r28, 0x08	; 8
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	9c 83       	std	Y+4, r25	; 0x04
    2ca2:	8b 83       	std	Y+3, r24	; 0x03
    2ca4:	6d 83       	std	Y+5, r22	; 0x05
    2ca6:	4e 83       	std	Y+6, r20	; 0x06
    2ca8:	38 87       	std	Y+8, r19	; 0x08
    2caa:	2f 83       	std	Y+7, r18	; 0x07
    Std_ReturnType ret = E_NOT_OK;
    2cac:	1a 82       	std	Y+2, r1	; 0x02
    uint8 index = ZERO_INIT;
    2cae:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj || NULL == str)
    2cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb4:	00 97       	sbiw	r24, 0x00	; 0
    2cb6:	21 f0       	breq	.+8      	; 0x2cc0 <lcd_4bit_send_string_data_pos+0x34>
    2cb8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cba:	98 85       	ldd	r25, Y+8	; 0x08
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	11 f4       	brne	.+4      	; 0x2cc4 <lcd_4bit_send_string_data_pos+0x38>
    {
        ret = E_NOT_OK;
    2cc0:	1a 82       	std	Y+2, r1	; 0x02
    2cc2:	25 c0       	rjmp	.+74     	; 0x2d0e <lcd_4bit_send_string_data_pos+0x82>
    }
    else
    {
        ret = lcd_4bit_set_cursor_pos(lcd_obj, row, col);
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc8:	6d 81       	ldd	r22, Y+5	; 0x05
    2cca:	4e 81       	ldd	r20, Y+6	; 0x06
    2ccc:	0e 94 76 18 	call	0x30ec	; 0x30ec <lcd_4bit_set_cursor_pos>
    2cd0:	8a 83       	std	Y+2, r24	; 0x02
    2cd2:	12 c0       	rjmp	.+36     	; 0x2cf8 <lcd_4bit_send_string_data_pos+0x6c>
        while('\0' != *(str+index))
        {
            ret = lcd_4bit_send_char_data(lcd_obj, *(str + index));
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	28 2f       	mov	r18, r24
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	8f 81       	ldd	r24, Y+7	; 0x07
    2cdc:	98 85       	ldd	r25, Y+8	; 0x08
    2cde:	fc 01       	movw	r30, r24
    2ce0:	e2 0f       	add	r30, r18
    2ce2:	f3 1f       	adc	r31, r19
    2ce4:	20 81       	ld	r18, Z
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cea:	62 2f       	mov	r22, r18
    2cec:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <lcd_4bit_send_char_data>
    2cf0:	8a 83       	std	Y+2, r24	; 0x02
            index++;
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	8f 5f       	subi	r24, 0xFF	; 255
    2cf6:	89 83       	std	Y+1, r24	; 0x01
        ret = E_NOT_OK;
    }
    else
    {
        ret = lcd_4bit_set_cursor_pos(lcd_obj, row, col);
        while('\0' != *(str+index))
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	28 2f       	mov	r18, r24
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	8f 81       	ldd	r24, Y+7	; 0x07
    2d00:	98 85       	ldd	r25, Y+8	; 0x08
    2d02:	fc 01       	movw	r30, r24
    2d04:	e2 0f       	add	r30, r18
    2d06:	f3 1f       	adc	r31, r19
    2d08:	80 81       	ld	r24, Z
    2d0a:	88 23       	and	r24, r24
    2d0c:	19 f7       	brne	.-58     	; 0x2cd4 <lcd_4bit_send_string_data_pos+0x48>
            ret = lcd_4bit_send_char_data(lcd_obj, *(str + index));
            index++;
        }   
    }
    
    return ret;
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2d10:	28 96       	adiw	r28, 0x08	; 8
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <lcd_4bit_send_custom_char>:
Std_ReturnType lcd_4bit_send_custom_char(const char_lcd_t* lcd_obj, uint8 row, uint8 col, const uint8 _char[], uint8 mem_pos)
{
    2d22:	0f 93       	push	r16
    2d24:	df 93       	push	r29
    2d26:	cf 93       	push	r28
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	29 97       	sbiw	r28, 0x09	; 9
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	cd bf       	out	0x3d, r28	; 61
    2d38:	9c 83       	std	Y+4, r25	; 0x04
    2d3a:	8b 83       	std	Y+3, r24	; 0x03
    2d3c:	6d 83       	std	Y+5, r22	; 0x05
    2d3e:	4e 83       	std	Y+6, r20	; 0x06
    2d40:	38 87       	std	Y+8, r19	; 0x08
    2d42:	2f 83       	std	Y+7, r18	; 0x07
    2d44:	09 87       	std	Y+9, r16	; 0x09
    Std_ReturnType ret = E_NOT_OK;
    2d46:	1a 82       	std	Y+2, r1	; 0x02
    uint8 l_counter = ZERO_INIT;
    2d48:	19 82       	std	Y+1, r1	; 0x01
    if (NULL == lcd_obj)
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	11 f4       	brne	.+4      	; 0x2d56 <lcd_4bit_send_custom_char+0x34>
    {
        ret = E_NOT_OK;
    2d52:	1a 82       	std	Y+2, r1	; 0x02
    2d54:	30 c0       	rjmp	.+96     	; 0x2db6 <lcd_4bit_send_custom_char+0x94>
    }
    else
    {
        // set Address counter to CGRAM 
        ret = lcd_4bit_send_command(lcd_obj, (CGRAM_START_ADDRESS + (mem_pos * 8)));
    2d56:	89 85       	ldd	r24, Y+9	; 0x09
    2d58:	88 2f       	mov	r24, r24
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	08 96       	adiw	r24, 0x08	; 8
    2d5e:	88 0f       	add	r24, r24
    2d60:	99 1f       	adc	r25, r25
    2d62:	88 0f       	add	r24, r24
    2d64:	99 1f       	adc	r25, r25
    2d66:	88 0f       	add	r24, r24
    2d68:	99 1f       	adc	r25, r25
    2d6a:	28 2f       	mov	r18, r24
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d70:	62 2f       	mov	r22, r18
    2d72:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    2d76:	8a 83       	std	Y+2, r24	; 0x02
        // sending the special character pattern to save in CGRAM
        for(l_counter=0; l_counter < 8; ++l_counter)
    2d78:	19 82       	std	Y+1, r1	; 0x01
    2d7a:	12 c0       	rjmp	.+36     	; 0x2da0 <lcd_4bit_send_custom_char+0x7e>
        {
            ret = lcd_4bit_send_char_data(lcd_obj, _char[l_counter]);
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	28 2f       	mov	r18, r24
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	8f 81       	ldd	r24, Y+7	; 0x07
    2d84:	98 85       	ldd	r25, Y+8	; 0x08
    2d86:	fc 01       	movw	r30, r24
    2d88:	e2 0f       	add	r30, r18
    2d8a:	f3 1f       	adc	r31, r19
    2d8c:	20 81       	ld	r18, Z
    2d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d90:	9c 81       	ldd	r25, Y+4	; 0x04
    2d92:	62 2f       	mov	r22, r18
    2d94:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <lcd_4bit_send_char_data>
    2d98:	8a 83       	std	Y+2, r24	; 0x02
    else
    {
        // set Address counter to CGRAM 
        ret = lcd_4bit_send_command(lcd_obj, (CGRAM_START_ADDRESS + (mem_pos * 8)));
        // sending the special character pattern to save in CGRAM
        for(l_counter=0; l_counter < 8; ++l_counter)
    2d9a:	89 81       	ldd	r24, Y+1	; 0x01
    2d9c:	8f 5f       	subi	r24, 0xFF	; 255
    2d9e:	89 83       	std	Y+1, r24	; 0x01
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	88 30       	cpi	r24, 0x08	; 8
    2da4:	58 f3       	brcs	.-42     	; 0x2d7c <lcd_4bit_send_custom_char+0x5a>
        {
            ret = lcd_4bit_send_char_data(lcd_obj, _char[l_counter]);
        }
        // Sending the Character Codes (DDRAM) that mapping Character Patterns (CGRAM Data)
        //0x00->1st character pattern, 0x01->2nd character pattern and so on.. until 0x07->eighth char pattern
        ret = lcd_4bit_send_char_data_pos(lcd_obj, row, col, mem_pos);
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	9c 81       	ldd	r25, Y+4	; 0x04
    2daa:	6d 81       	ldd	r22, Y+5	; 0x05
    2dac:	4e 81       	ldd	r20, Y+6	; 0x06
    2dae:	29 85       	ldd	r18, Y+9	; 0x09
    2db0:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <lcd_4bit_send_char_data_pos>
    2db4:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret;
    2db6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2db8:	29 96       	adiw	r28, 0x09	; 9
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	0f 91       	pop	r16
    2dca:	08 95       	ret

00002dcc <my_memset>:
 * @param ch
 * @param str_size
 * @return pointer to void type
 */
static void* my_memset(void* str, uint8 ch, uint8 str_size)
{
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <my_memset+0x6>
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <my_memset+0x8>
    2dd4:	00 d0       	rcall	.+0      	; 0x2dd6 <my_memset+0xa>
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    2dda:	9b 83       	std	Y+3, r25	; 0x03
    2ddc:	8a 83       	std	Y+2, r24	; 0x02
    2dde:	6c 83       	std	Y+4, r22	; 0x04
    2de0:	4d 83       	std	Y+5, r20	; 0x05
    uint8 counter = 0;
    2de2:	19 82       	std	Y+1, r1	; 0x01
    2de4:	0d c0       	rjmp	.+26     	; 0x2e00 <my_memset+0x34>
    while(str_size--)
    {
        *((uint8*)str + counter) = ch;
    2de6:	2a 81       	ldd	r18, Y+2	; 0x02
    2de8:	3b 81       	ldd	r19, Y+3	; 0x03
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	88 2f       	mov	r24, r24
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	f9 01       	movw	r30, r18
    2df2:	e8 0f       	add	r30, r24
    2df4:	f9 1f       	adc	r31, r25
    2df6:	8c 81       	ldd	r24, Y+4	; 0x04
    2df8:	80 83       	st	Z, r24
        counter++;
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	8f 5f       	subi	r24, 0xFF	; 255
    2dfe:	89 83       	std	Y+1, r24	; 0x01
 * @return pointer to void type
 */
static void* my_memset(void* str, uint8 ch, uint8 str_size)
{
    uint8 counter = 0;
    while(str_size--)
    2e00:	8d 81       	ldd	r24, Y+5	; 0x05
    2e02:	8e 83       	std	Y+6, r24	; 0x06
    2e04:	8e 81       	ldd	r24, Y+6	; 0x06
    2e06:	88 23       	and	r24, r24
    2e08:	11 f0       	breq	.+4      	; 0x2e0e <my_memset+0x42>
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	8e 83       	std	Y+6, r24	; 0x06
    2e0e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e10:	9d 81       	ldd	r25, Y+5	; 0x05
    2e12:	91 50       	subi	r25, 0x01	; 1
    2e14:	9d 83       	std	Y+5, r25	; 0x05
    2e16:	88 23       	and	r24, r24
    2e18:	31 f7       	brne	.-52     	; 0x2de6 <my_memset+0x1a>
    {
        *((uint8*)str + counter) = ch;
        counter++;
    }
    return str;
    2e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1c:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2e1e:	26 96       	adiw	r28, 0x06	; 6
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	cf 91       	pop	r28
    2e2c:	df 91       	pop	r29
    2e2e:	08 95       	ret

00002e30 <LCD_convert_byte_to_string>:

Std_ReturnType LCD_convert_byte_to_string(uint8 data, uint8* str)
{
    2e30:	df 93       	push	r29
    2e32:	cf 93       	push	r28
    2e34:	00 d0       	rcall	.+0      	; 0x2e36 <LCD_convert_byte_to_string+0x6>
    2e36:	00 d0       	rcall	.+0      	; 0x2e38 <LCD_convert_byte_to_string+0x8>
    2e38:	00 d0       	rcall	.+0      	; 0x2e3a <LCD_convert_byte_to_string+0xa>
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
    2e3e:	8c 83       	std	Y+4, r24	; 0x04
    2e40:	7e 83       	std	Y+6, r23	; 0x06
    2e42:	6d 83       	std	Y+5, r22	; 0x05
    // data range = 0:255. max size of the string is set to 4 (3 for data , 1 for '\0')
    Std_ReturnType ret = E_NOT_OK;
    2e44:	1b 82       	std	Y+3, r1	; 0x03
    uint8 index = 0;
    2e46:	1a 82       	std	Y+2, r1	; 0x02
    uint8 tens = 100;
    2e48:	84 e6       	ldi	r24, 0x64	; 100
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == str)
    2e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	11 f4       	brne	.+4      	; 0x2e58 <LCD_convert_byte_to_string+0x28>
    {
        ret = E_NOT_OK;
    2e54:	1b 82       	std	Y+3, r1	; 0x03
    2e56:	39 c0       	rjmp	.+114    	; 0x2eca <LCD_convert_byte_to_string+0x9a>
    }
    else
    {
        ret = E_OK;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	8b 83       	std	Y+3, r24	; 0x03
        str = (uint8* )my_memset(str, '\0', 4);
    2e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e60:	60 e0       	ldi	r22, 0x00	; 0
    2e62:	44 e0       	ldi	r20, 0x04	; 4
    2e64:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <my_memset>
    2e68:	9e 83       	std	Y+6, r25	; 0x06
    2e6a:	8d 83       	std	Y+5, r24	; 0x05
        // sprintf(str, "%i", data);    // this function return the number as string
        if (0 == data)
    2e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e6e:	88 23       	and	r24, r24
    2e70:	49 f5       	brne	.+82     	; 0x2ec4 <LCD_convert_byte_to_string+0x94>
        {
            *(str) = 48;
    2e72:	ed 81       	ldd	r30, Y+5	; 0x05
    2e74:	fe 81       	ldd	r31, Y+6	; 0x06
    2e76:	80 e3       	ldi	r24, 0x30	; 48
    2e78:	80 83       	st	Z, r24
    2e7a:	27 c0       	rjmp	.+78     	; 0x2eca <LCD_convert_byte_to_string+0x9a>
        }
        else
        {
             while (tens > 0)
            {
                if ((data / tens) > 0)
    2e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e7e:	99 81       	ldd	r25, Y+1	; 0x01
    2e80:	69 2f       	mov	r22, r25
    2e82:	0e 94 1d 1c 	call	0x383a	; 0x383a <__udivmodqi4>
    2e86:	88 23       	and	r24, r24
    2e88:	b9 f0       	breq	.+46     	; 0x2eb8 <LCD_convert_byte_to_string+0x88>
                {
                    *(str + index) = ((data / tens) % 10) + 48;
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	28 2f       	mov	r18, r24
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	8d 81       	ldd	r24, Y+5	; 0x05
    2e92:	9e 81       	ldd	r25, Y+6	; 0x06
    2e94:	fc 01       	movw	r30, r24
    2e96:	e2 0f       	add	r30, r18
    2e98:	f3 1f       	adc	r31, r19
    2e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9c:	99 81       	ldd	r25, Y+1	; 0x01
    2e9e:	69 2f       	mov	r22, r25
    2ea0:	0e 94 1d 1c 	call	0x383a	; 0x383a <__udivmodqi4>
    2ea4:	9a e0       	ldi	r25, 0x0A	; 10
    2ea6:	69 2f       	mov	r22, r25
    2ea8:	0e 94 1d 1c 	call	0x383a	; 0x383a <__udivmodqi4>
    2eac:	89 2f       	mov	r24, r25
    2eae:	80 5d       	subi	r24, 0xD0	; 208
    2eb0:	80 83       	st	Z, r24
                    index++;
    2eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb4:	8f 5f       	subi	r24, 0xFF	; 255
    2eb6:	8a 83       	std	Y+2, r24	; 0x02
                }
                tens = tens / 10;
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	9a e0       	ldi	r25, 0x0A	; 10
    2ebc:	69 2f       	mov	r22, r25
    2ebe:	0e 94 1d 1c 	call	0x383a	; 0x383a <__udivmodqi4>
    2ec2:	89 83       	std	Y+1, r24	; 0x01
        {
            *(str) = 48;
        }
        else
        {
             while (tens > 0)
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	88 23       	and	r24, r24
    2ec8:	c9 f6       	brne	.-78     	; 0x2e7c <LCD_convert_byte_to_string+0x4c>
                }
                tens = tens / 10;
            }
        }
    }
    return ret;
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2ecc:	26 96       	adiw	r28, 0x06	; 6
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	cf 91       	pop	r28
    2eda:	df 91       	pop	r29
    2edc:	08 95       	ret

00002ede <LCD_convert_short_to_string>:

Std_ReturnType LCD_convert_short_to_string(uint16 data, uint8* str)
{
    2ede:	df 93       	push	r29
    2ee0:	cf 93       	push	r28
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	28 97       	sbiw	r28, 0x08	; 8
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61
    2ef2:	9e 83       	std	Y+6, r25	; 0x06
    2ef4:	8d 83       	std	Y+5, r24	; 0x05
    2ef6:	78 87       	std	Y+8, r23	; 0x08
    2ef8:	6f 83       	std	Y+7, r22	; 0x07
    // data range = 0:65535 max size of the string is set to 6 (5 for data , 1 for '\0')
    Std_ReturnType ret = E_NOT_OK;
    2efa:	1c 82       	std	Y+4, r1	; 0x04
    uint8 index = 0;
    2efc:	1b 82       	std	Y+3, r1	; 0x03
    uint16 tens = 10000;
    2efe:	80 e1       	ldi	r24, 0x10	; 16
    2f00:	97 e2       	ldi	r25, 0x27	; 39
    2f02:	9a 83       	std	Y+2, r25	; 0x02
    2f04:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == str)
    2f06:	8f 81       	ldd	r24, Y+7	; 0x07
    2f08:	98 85       	ldd	r25, Y+8	; 0x08
    2f0a:	00 97       	sbiw	r24, 0x00	; 0
    2f0c:	11 f4       	brne	.+4      	; 0x2f12 <LCD_convert_short_to_string+0x34>
    {
        ret = E_NOT_OK;
    2f0e:	1c 82       	std	Y+4, r1	; 0x04
    2f10:	4a c0       	rjmp	.+148    	; 0x2fa6 <LCD_convert_short_to_string+0xc8>
    }
    else
    {
        ret = E_OK;
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	8c 83       	std	Y+4, r24	; 0x04
        str = (uint8* )my_memset(str, ' ', 5);
    2f16:	8f 81       	ldd	r24, Y+7	; 0x07
    2f18:	98 85       	ldd	r25, Y+8	; 0x08
    2f1a:	60 e2       	ldi	r22, 0x20	; 32
    2f1c:	45 e0       	ldi	r20, 0x05	; 5
    2f1e:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <my_memset>
    2f22:	98 87       	std	Y+8, r25	; 0x08
    2f24:	8f 83       	std	Y+7, r24	; 0x07
        str[5] = '\0';
    2f26:	8f 81       	ldd	r24, Y+7	; 0x07
    2f28:	98 85       	ldd	r25, Y+8	; 0x08
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	35 96       	adiw	r30, 0x05	; 5
    2f2e:	10 82       	st	Z, r1
        // sprintf(str, "%i", data);    // this function return the number as string
        if (0 == data)
    2f30:	8d 81       	ldd	r24, Y+5	; 0x05
    2f32:	9e 81       	ldd	r25, Y+6	; 0x06
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	99 f5       	brne	.+102    	; 0x2f9e <LCD_convert_short_to_string+0xc0>
        {
            *(str) = 48;
    2f38:	ef 81       	ldd	r30, Y+7	; 0x07
    2f3a:	f8 85       	ldd	r31, Y+8	; 0x08
    2f3c:	80 e3       	ldi	r24, 0x30	; 48
    2f3e:	80 83       	st	Z, r24
    2f40:	32 c0       	rjmp	.+100    	; 0x2fa6 <LCD_convert_short_to_string+0xc8>
        }
        else
        {
             while (tens > 0)
            {
                if ((data / tens) > 0)
    2f42:	8d 81       	ldd	r24, Y+5	; 0x05
    2f44:	9e 81       	ldd	r25, Y+6	; 0x06
    2f46:	29 81       	ldd	r18, Y+1	; 0x01
    2f48:	3a 81       	ldd	r19, Y+2	; 0x02
    2f4a:	b9 01       	movw	r22, r18
    2f4c:	0e 94 29 1c 	call	0x3852	; 0x3852 <__udivmodhi4>
    2f50:	cb 01       	movw	r24, r22
    2f52:	00 97       	sbiw	r24, 0x00	; 0
    2f54:	d1 f0       	breq	.+52     	; 0x2f8a <LCD_convert_short_to_string+0xac>
                {
                    *(str + index) = ((data / tens) % 10) + 48;
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	28 2f       	mov	r18, r24
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f5e:	98 85       	ldd	r25, Y+8	; 0x08
    2f60:	fc 01       	movw	r30, r24
    2f62:	e2 0f       	add	r30, r18
    2f64:	f3 1f       	adc	r31, r19
    2f66:	8d 81       	ldd	r24, Y+5	; 0x05
    2f68:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6a:	29 81       	ldd	r18, Y+1	; 0x01
    2f6c:	3a 81       	ldd	r19, Y+2	; 0x02
    2f6e:	b9 01       	movw	r22, r18
    2f70:	0e 94 29 1c 	call	0x3852	; 0x3852 <__udivmodhi4>
    2f74:	cb 01       	movw	r24, r22
    2f76:	2a e0       	ldi	r18, 0x0A	; 10
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	b9 01       	movw	r22, r18
    2f7c:	0e 94 29 1c 	call	0x3852	; 0x3852 <__udivmodhi4>
    2f80:	80 5d       	subi	r24, 0xD0	; 208
    2f82:	80 83       	st	Z, r24
                    index++;
    2f84:	8b 81       	ldd	r24, Y+3	; 0x03
    2f86:	8f 5f       	subi	r24, 0xFF	; 255
    2f88:	8b 83       	std	Y+3, r24	; 0x03
                }
                tens = tens / 10;
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8e:	2a e0       	ldi	r18, 0x0A	; 10
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	b9 01       	movw	r22, r18
    2f94:	0e 94 29 1c 	call	0x3852	; 0x3852 <__udivmodhi4>
    2f98:	cb 01       	movw	r24, r22
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01
        {
            *(str) = 48;
        }
        else
        {
             while (tens > 0)
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	71 f6       	brne	.-100    	; 0x2f42 <LCD_convert_short_to_string+0x64>
                }
                tens = tens / 10;
            }
        }
    }
    return ret;
    2fa6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2fa8:	28 96       	adiw	r28, 0x08	; 8
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	de bf       	out	0x3e, r29	; 62
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	cd bf       	out	0x3d, r28	; 61
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	08 95       	ret

00002fba <LCD_convert_int_to_string>:
    
Std_ReturnType LCD_convert_int_to_string(uint32 data, uint8* str)
{
    2fba:	0f 93       	push	r16
    2fbc:	1f 93       	push	r17
    2fbe:	df 93       	push	r29
    2fc0:	cf 93       	push	r28
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	2c 97       	sbiw	r28, 0x0c	; 12
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	f8 94       	cli
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	cd bf       	out	0x3d, r28	; 61
    2fd2:	6f 83       	std	Y+7, r22	; 0x07
    2fd4:	78 87       	std	Y+8, r23	; 0x08
    2fd6:	89 87       	std	Y+9, r24	; 0x09
    2fd8:	9a 87       	std	Y+10, r25	; 0x0a
    2fda:	5c 87       	std	Y+12, r21	; 0x0c
    2fdc:	4b 87       	std	Y+11, r20	; 0x0b
    // data range = 0:4294967296 max size of the string is set to 11 (10 for data , 1 for '\0')
    Std_ReturnType ret = E_NOT_OK;
    2fde:	1e 82       	std	Y+6, r1	; 0x06
    uint8 index = 0;
    2fe0:	1d 82       	std	Y+5, r1	; 0x05
    uint32 tens = 1000000000;
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	9a ec       	ldi	r25, 0xCA	; 202
    2fe6:	aa e9       	ldi	r26, 0x9A	; 154
    2fe8:	bb e3       	ldi	r27, 0x3B	; 59
    2fea:	89 83       	std	Y+1, r24	; 0x01
    2fec:	9a 83       	std	Y+2, r25	; 0x02
    2fee:	ab 83       	std	Y+3, r26	; 0x03
    2ff0:	bc 83       	std	Y+4, r27	; 0x04
    if (NULL == str)
    2ff2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ff4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	11 f4       	brne	.+4      	; 0x2ffe <LCD_convert_int_to_string+0x44>
    {
        ret = E_NOT_OK;
    2ffa:	1e 82       	std	Y+6, r1	; 0x06
    2ffc:	6b c0       	rjmp	.+214    	; 0x30d4 <LCD_convert_int_to_string+0x11a>
    }
    else
    {
        ret = E_OK;
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	8e 83       	std	Y+6, r24	; 0x06
        str = (uint8* )my_memset(str, '\0', 11);
    3002:	8b 85       	ldd	r24, Y+11	; 0x0b
    3004:	9c 85       	ldd	r25, Y+12	; 0x0c
    3006:	60 e0       	ldi	r22, 0x00	; 0
    3008:	4b e0       	ldi	r20, 0x0B	; 11
    300a:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <my_memset>
    300e:	9c 87       	std	Y+12, r25	; 0x0c
    3010:	8b 87       	std	Y+11, r24	; 0x0b
        // sprintf(str, "%i", data);    // this function return the number as string
        if (0 == data)
    3012:	8f 81       	ldd	r24, Y+7	; 0x07
    3014:	98 85       	ldd	r25, Y+8	; 0x08
    3016:	a9 85       	ldd	r26, Y+9	; 0x09
    3018:	ba 85       	ldd	r27, Y+10	; 0x0a
    301a:	00 97       	sbiw	r24, 0x00	; 0
    301c:	a1 05       	cpc	r26, r1
    301e:	b1 05       	cpc	r27, r1
    3020:	09 f0       	breq	.+2      	; 0x3024 <LCD_convert_int_to_string+0x6a>
    3022:	4f c0       	rjmp	.+158    	; 0x30c2 <LCD_convert_int_to_string+0x108>
        {
            *(str) = 48;
    3024:	eb 85       	ldd	r30, Y+11	; 0x0b
    3026:	fc 85       	ldd	r31, Y+12	; 0x0c
    3028:	80 e3       	ldi	r24, 0x30	; 48
    302a:	80 83       	st	Z, r24
    302c:	53 c0       	rjmp	.+166    	; 0x30d4 <LCD_convert_int_to_string+0x11a>
        }
        else
        {
             while (tens > 0)
            {
                if ((data / tens) > 0)
    302e:	8f 81       	ldd	r24, Y+7	; 0x07
    3030:	98 85       	ldd	r25, Y+8	; 0x08
    3032:	a9 85       	ldd	r26, Y+9	; 0x09
    3034:	ba 85       	ldd	r27, Y+10	; 0x0a
    3036:	29 81       	ldd	r18, Y+1	; 0x01
    3038:	3a 81       	ldd	r19, Y+2	; 0x02
    303a:	4b 81       	ldd	r20, Y+3	; 0x03
    303c:	5c 81       	ldd	r21, Y+4	; 0x04
    303e:	bc 01       	movw	r22, r24
    3040:	cd 01       	movw	r24, r26
    3042:	0e 94 3d 1c 	call	0x387a	; 0x387a <__udivmodsi4>
    3046:	da 01       	movw	r26, r20
    3048:	c9 01       	movw	r24, r18
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	a1 05       	cpc	r26, r1
    304e:	b1 05       	cpc	r27, r1
    3050:	31 f1       	breq	.+76     	; 0x309e <LCD_convert_int_to_string+0xe4>
                {
                    *(str + index) = ((data / tens) % 10) + 48;
    3052:	8d 81       	ldd	r24, Y+5	; 0x05
    3054:	28 2f       	mov	r18, r24
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	8b 85       	ldd	r24, Y+11	; 0x0b
    305a:	9c 85       	ldd	r25, Y+12	; 0x0c
    305c:	8c 01       	movw	r16, r24
    305e:	02 0f       	add	r16, r18
    3060:	13 1f       	adc	r17, r19
    3062:	8f 81       	ldd	r24, Y+7	; 0x07
    3064:	98 85       	ldd	r25, Y+8	; 0x08
    3066:	a9 85       	ldd	r26, Y+9	; 0x09
    3068:	ba 85       	ldd	r27, Y+10	; 0x0a
    306a:	29 81       	ldd	r18, Y+1	; 0x01
    306c:	3a 81       	ldd	r19, Y+2	; 0x02
    306e:	4b 81       	ldd	r20, Y+3	; 0x03
    3070:	5c 81       	ldd	r21, Y+4	; 0x04
    3072:	bc 01       	movw	r22, r24
    3074:	cd 01       	movw	r24, r26
    3076:	0e 94 3d 1c 	call	0x387a	; 0x387a <__udivmodsi4>
    307a:	da 01       	movw	r26, r20
    307c:	c9 01       	movw	r24, r18
    307e:	2a e0       	ldi	r18, 0x0A	; 10
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	50 e0       	ldi	r21, 0x00	; 0
    3086:	bc 01       	movw	r22, r24
    3088:	cd 01       	movw	r24, r26
    308a:	0e 94 3d 1c 	call	0x387a	; 0x387a <__udivmodsi4>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	80 5d       	subi	r24, 0xD0	; 208
    3094:	f8 01       	movw	r30, r16
    3096:	80 83       	st	Z, r24
                    index++;
    3098:	8d 81       	ldd	r24, Y+5	; 0x05
    309a:	8f 5f       	subi	r24, 0xFF	; 255
    309c:	8d 83       	std	Y+5, r24	; 0x05
                }
                tens = tens / 10;
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	9a 81       	ldd	r25, Y+2	; 0x02
    30a2:	ab 81       	ldd	r26, Y+3	; 0x03
    30a4:	bc 81       	ldd	r27, Y+4	; 0x04
    30a6:	2a e0       	ldi	r18, 0x0A	; 10
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e0       	ldi	r20, 0x00	; 0
    30ac:	50 e0       	ldi	r21, 0x00	; 0
    30ae:	bc 01       	movw	r22, r24
    30b0:	cd 01       	movw	r24, r26
    30b2:	0e 94 3d 1c 	call	0x387a	; 0x387a <__udivmodsi4>
    30b6:	da 01       	movw	r26, r20
    30b8:	c9 01       	movw	r24, r18
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	9a 83       	std	Y+2, r25	; 0x02
    30be:	ab 83       	std	Y+3, r26	; 0x03
    30c0:	bc 83       	std	Y+4, r27	; 0x04
        {
            *(str) = 48;
        }
        else
        {
             while (tens > 0)
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	9a 81       	ldd	r25, Y+2	; 0x02
    30c6:	ab 81       	ldd	r26, Y+3	; 0x03
    30c8:	bc 81       	ldd	r27, Y+4	; 0x04
    30ca:	00 97       	sbiw	r24, 0x00	; 0
    30cc:	a1 05       	cpc	r26, r1
    30ce:	b1 05       	cpc	r27, r1
    30d0:	09 f0       	breq	.+2      	; 0x30d4 <LCD_convert_int_to_string+0x11a>
    30d2:	ad cf       	rjmp	.-166    	; 0x302e <LCD_convert_int_to_string+0x74>
                }
                tens = tens / 10;
            }
        }
    }
    return ret;
    30d4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    30d6:	2c 96       	adiw	r28, 0x0c	; 12
    30d8:	0f b6       	in	r0, 0x3f	; 63
    30da:	f8 94       	cli
    30dc:	de bf       	out	0x3e, r29	; 62
    30de:	0f be       	out	0x3f, r0	; 63
    30e0:	cd bf       	out	0x3d, r28	; 61
    30e2:	cf 91       	pop	r28
    30e4:	df 91       	pop	r29
    30e6:	1f 91       	pop	r17
    30e8:	0f 91       	pop	r16
    30ea:	08 95       	ret

000030ec <lcd_4bit_set_cursor_pos>:
    return ret;
}

#elif (LCD_MODE == CHAR_LCD_4BIT_MODE)
static Std_ReturnType lcd_4bit_set_cursor_pos(const char_lcd_t* lcd_obj, uint8 row, uint8 col)
{
    30ec:	df 93       	push	r29
    30ee:	cf 93       	push	r28
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
    30f4:	2b 97       	sbiw	r28, 0x0b	; 11
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	9f 83       	std	Y+7, r25	; 0x07
    3102:	8e 83       	std	Y+6, r24	; 0x06
    3104:	68 87       	std	Y+8, r22	; 0x08
    3106:	49 87       	std	Y+9, r20	; 0x09
    Std_ReturnType ret = E_OK;
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	8d 83       	std	Y+5, r24	; 0x05
    col--;  // to ensure zero indexing
    310c:	89 85       	ldd	r24, Y+9	; 0x09
    310e:	81 50       	subi	r24, 0x01	; 1
    3110:	89 87       	std	Y+9, r24	; 0x09
    uint8 row1_offset = 0x00, 
    3112:	1c 82       	std	Y+4, r1	; 0x04
            row2_offset = 0x40, 
    3114:	80 e4       	ldi	r24, 0x40	; 64
    3116:	8b 83       	std	Y+3, r24	; 0x03
            row3_offset = 0x14, 
    3118:	84 e1       	ldi	r24, 0x14	; 20
    311a:	8a 83       	std	Y+2, r24	; 0x02
            row4_offset = 0x40 + 0x14;
    311c:	84 e5       	ldi	r24, 0x54	; 84
    311e:	89 83       	std	Y+1, r24	; 0x01
    switch(row)
    3120:	88 85       	ldd	r24, Y+8	; 0x08
    3122:	28 2f       	mov	r18, r24
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	3b 87       	std	Y+11, r19	; 0x0b
    3128:	2a 87       	std	Y+10, r18	; 0x0a
    312a:	8a 85       	ldd	r24, Y+10	; 0x0a
    312c:	9b 85       	ldd	r25, Y+11	; 0x0b
    312e:	82 30       	cpi	r24, 0x02	; 2
    3130:	91 05       	cpc	r25, r1
    3132:	11 f1       	breq	.+68     	; 0x3178 <lcd_4bit_set_cursor_pos+0x8c>
    3134:	2a 85       	ldd	r18, Y+10	; 0x0a
    3136:	3b 85       	ldd	r19, Y+11	; 0x0b
    3138:	23 30       	cpi	r18, 0x03	; 3
    313a:	31 05       	cpc	r19, r1
    313c:	34 f4       	brge	.+12     	; 0x314a <lcd_4bit_set_cursor_pos+0x5e>
    313e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3140:	9b 85       	ldd	r25, Y+11	; 0x0b
    3142:	81 30       	cpi	r24, 0x01	; 1
    3144:	91 05       	cpc	r25, r1
    3146:	61 f0       	breq	.+24     	; 0x3160 <lcd_4bit_set_cursor_pos+0x74>
    3148:	3a c0       	rjmp	.+116    	; 0x31be <lcd_4bit_set_cursor_pos+0xd2>
    314a:	2a 85       	ldd	r18, Y+10	; 0x0a
    314c:	3b 85       	ldd	r19, Y+11	; 0x0b
    314e:	23 30       	cpi	r18, 0x03	; 3
    3150:	31 05       	cpc	r19, r1
    3152:	f1 f0       	breq	.+60     	; 0x3190 <lcd_4bit_set_cursor_pos+0xa4>
    3154:	8a 85       	ldd	r24, Y+10	; 0x0a
    3156:	9b 85       	ldd	r25, Y+11	; 0x0b
    3158:	84 30       	cpi	r24, 0x04	; 4
    315a:	91 05       	cpc	r25, r1
    315c:	29 f1       	breq	.+74     	; 0x31a8 <lcd_4bit_set_cursor_pos+0xbc>
    315e:	2f c0       	rjmp	.+94     	; 0x31be <lcd_4bit_set_cursor_pos+0xd2>
    {
        case ROW1:
            ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS + row1_offset + col);    // 0x80 + col
    3160:	9c 81       	ldd	r25, Y+4	; 0x04
    3162:	89 85       	ldd	r24, Y+9	; 0x09
    3164:	89 0f       	add	r24, r25
    3166:	28 2f       	mov	r18, r24
    3168:	20 58       	subi	r18, 0x80	; 128
    316a:	8e 81       	ldd	r24, Y+6	; 0x06
    316c:	9f 81       	ldd	r25, Y+7	; 0x07
    316e:	62 2f       	mov	r22, r18
    3170:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    3174:	8d 83       	std	Y+5, r24	; 0x05
    3176:	23 c0       	rjmp	.+70     	; 0x31be <lcd_4bit_set_cursor_pos+0xd2>
            break;
        case ROW2:
            ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS + row2_offset + col);   // 0xC0 + col
    3178:	9b 81       	ldd	r25, Y+3	; 0x03
    317a:	89 85       	ldd	r24, Y+9	; 0x09
    317c:	89 0f       	add	r24, r25
    317e:	28 2f       	mov	r18, r24
    3180:	20 58       	subi	r18, 0x80	; 128
    3182:	8e 81       	ldd	r24, Y+6	; 0x06
    3184:	9f 81       	ldd	r25, Y+7	; 0x07
    3186:	62 2f       	mov	r22, r18
    3188:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    318c:	8d 83       	std	Y+5, r24	; 0x05
    318e:	17 c0       	rjmp	.+46     	; 0x31be <lcd_4bit_set_cursor_pos+0xd2>
            break;
        case ROW3:
            ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS + row3_offset + col); // 0x94 + col
    3190:	9a 81       	ldd	r25, Y+2	; 0x02
    3192:	89 85       	ldd	r24, Y+9	; 0x09
    3194:	89 0f       	add	r24, r25
    3196:	28 2f       	mov	r18, r24
    3198:	20 58       	subi	r18, 0x80	; 128
    319a:	8e 81       	ldd	r24, Y+6	; 0x06
    319c:	9f 81       	ldd	r25, Y+7	; 0x07
    319e:	62 2f       	mov	r22, r18
    31a0:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    31a4:	8d 83       	std	Y+5, r24	; 0x05
    31a6:	0b c0       	rjmp	.+22     	; 0x31be <lcd_4bit_set_cursor_pos+0xd2>
            break;
        case ROW4:
            ret = lcd_4bit_send_command(lcd_obj, DDRAM_START_ADDRESS + row4_offset + col); // 0xD4 + col
    31a8:	99 81       	ldd	r25, Y+1	; 0x01
    31aa:	89 85       	ldd	r24, Y+9	; 0x09
    31ac:	89 0f       	add	r24, r25
    31ae:	28 2f       	mov	r18, r24
    31b0:	20 58       	subi	r18, 0x80	; 128
    31b2:	8e 81       	ldd	r24, Y+6	; 0x06
    31b4:	9f 81       	ldd	r25, Y+7	; 0x07
    31b6:	62 2f       	mov	r22, r18
    31b8:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    31bc:	8d 83       	std	Y+5, r24	; 0x05
            break;
        default:
            break;
    }
    return ret;
    31be:	8d 81       	ldd	r24, Y+5	; 0x05
}
    31c0:	2b 96       	adiw	r28, 0x0b	; 11
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	08 95       	ret

000031d2 <lcd_send_4bit>:

static Std_ReturnType lcd_send_4bit(const char_lcd_t* lcd_obj, uint8 _data_command)
{
    31d2:	df 93       	push	r29
    31d4:	cf 93       	push	r28
    31d6:	00 d0       	rcall	.+0      	; 0x31d8 <lcd_send_4bit+0x6>
    31d8:	00 d0       	rcall	.+0      	; 0x31da <lcd_send_4bit+0x8>
    31da:	0f 92       	push	r0
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	9c 83       	std	Y+4, r25	; 0x04
    31e2:	8b 83       	std	Y+3, r24	; 0x03
    31e4:	6d 83       	std	Y+5, r22	; 0x05
    Std_ReturnType ret = E_NOT_OK;
    31e6:	1a 82       	std	Y+2, r1	; 0x02
    uint8 l_pin_counter = ZERO_INIT;
    31e8:	19 82       	std	Y+1, r1	; 0x01
    for (l_pin_counter = 0; l_pin_counter < 4; l_pin_counter++)
    31ea:	19 82       	std	Y+1, r1	; 0x01
    31ec:	22 c0       	rjmp	.+68     	; 0x3232 <lcd_send_4bit+0x60>
    {
        ret = GPIO_pin_write_logic(&(lcd_obj->lcd_data_pins[l_pin_counter]), ((_data_command >> l_pin_counter) & BIT_MASK));
    31ee:	8b 81       	ldd	r24, Y+3	; 0x03
    31f0:	9c 81       	ldd	r25, Y+4	; 0x04
    31f2:	9c 01       	movw	r18, r24
    31f4:	2e 5f       	subi	r18, 0xFE	; 254
    31f6:	3f 4f       	sbci	r19, 0xFF	; 255
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
    31fa:	88 2f       	mov	r24, r24
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	a9 01       	movw	r20, r18
    3200:	48 0f       	add	r20, r24
    3202:	59 1f       	adc	r21, r25
    3204:	8d 81       	ldd	r24, Y+5	; 0x05
    3206:	28 2f       	mov	r18, r24
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	88 2f       	mov	r24, r24
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	b9 01       	movw	r22, r18
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <lcd_send_4bit+0x46>
    3214:	75 95       	asr	r23
    3216:	67 95       	ror	r22
    3218:	8a 95       	dec	r24
    321a:	e2 f7       	brpl	.-8      	; 0x3214 <lcd_send_4bit+0x42>
    321c:	cb 01       	movw	r24, r22
    321e:	28 2f       	mov	r18, r24
    3220:	21 70       	andi	r18, 0x01	; 1
    3222:	ca 01       	movw	r24, r20
    3224:	62 2f       	mov	r22, r18
    3226:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_pin_write_logic>
    322a:	8a 83       	std	Y+2, r24	; 0x02

static Std_ReturnType lcd_send_4bit(const char_lcd_t* lcd_obj, uint8 _data_command)
{
    Std_ReturnType ret = E_NOT_OK;
    uint8 l_pin_counter = ZERO_INIT;
    for (l_pin_counter = 0; l_pin_counter < 4; l_pin_counter++)
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	8f 5f       	subi	r24, 0xFF	; 255
    3230:	89 83       	std	Y+1, r24	; 0x01
    3232:	89 81       	ldd	r24, Y+1	; 0x01
    3234:	84 30       	cpi	r24, 0x04	; 4
    3236:	d8 f2       	brcs	.-74     	; 0x31ee <lcd_send_4bit+0x1c>
    {
        ret = GPIO_pin_write_logic(&(lcd_obj->lcd_data_pins[l_pin_counter]), ((_data_command >> l_pin_counter) & BIT_MASK));
    }
    return ret;
    3238:	8a 81       	ldd	r24, Y+2	; 0x02
}
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	08 95       	ret

0000324a <lcd_send_enable_signal>:
#endif

static Std_ReturnType lcd_send_enable_signal(const char_lcd_t* lcd_obj)
{
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	6b 97       	sbiw	r28, 0x1b	; 27
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	de bf       	out	0x3e, r29	; 62
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	cd bf       	out	0x3d, r28	; 61
    325e:	9b 8f       	std	Y+27, r25	; 0x1b
    3260:	8a 8f       	std	Y+26, r24	; 0x1a
    Std_ReturnType ret = E_OK;
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	89 8f       	std	Y+25, r24	; 0x19
    ret = GPIO_pin_write_logic(&(lcd_obj->E_pin), GPIO_HIGH);
    3266:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3268:	9b 8d       	ldd	r25, Y+27	; 0x1b
    326a:	01 96       	adiw	r24, 0x01	; 1
    326c:	61 e0       	ldi	r22, 0x01	; 1
    326e:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_pin_write_logic>
    3272:	89 8f       	std	Y+25, r24	; 0x19
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	a0 ea       	ldi	r26, 0xA0	; 160
    327a:	b0 e4       	ldi	r27, 0x40	; 64
    327c:	8d 8b       	std	Y+21, r24	; 0x15
    327e:	9e 8b       	std	Y+22, r25	; 0x16
    3280:	af 8b       	std	Y+23, r26	; 0x17
    3282:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3284:	6d 89       	ldd	r22, Y+21	; 0x15
    3286:	7e 89       	ldd	r23, Y+22	; 0x16
    3288:	8f 89       	ldd	r24, Y+23	; 0x17
    328a:	98 8d       	ldd	r25, Y+24	; 0x18
    328c:	2b ea       	ldi	r18, 0xAB	; 171
    328e:	3a ea       	ldi	r19, 0xAA	; 170
    3290:	4a e2       	ldi	r20, 0x2A	; 42
    3292:	50 e4       	ldi	r21, 0x40	; 64
    3294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	89 8b       	std	Y+17, r24	; 0x11
    329e:	9a 8b       	std	Y+18, r25	; 0x12
    32a0:	ab 8b       	std	Y+19, r26	; 0x13
    32a2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    32a4:	69 89       	ldd	r22, Y+17	; 0x11
    32a6:	7a 89       	ldd	r23, Y+18	; 0x12
    32a8:	8b 89       	ldd	r24, Y+19	; 0x13
    32aa:	9c 89       	ldd	r25, Y+20	; 0x14
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	40 e8       	ldi	r20, 0x80	; 128
    32b2:	5f e3       	ldi	r21, 0x3F	; 63
    32b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32b8:	88 23       	and	r24, r24
    32ba:	1c f4       	brge	.+6      	; 0x32c2 <lcd_send_enable_signal+0x78>
		__ticks = 1;
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	88 8b       	std	Y+16, r24	; 0x10
    32c0:	91 c0       	rjmp	.+290    	; 0x33e4 <lcd_send_enable_signal+0x19a>
	else if (__tmp > 255)
    32c2:	69 89       	ldd	r22, Y+17	; 0x11
    32c4:	7a 89       	ldd	r23, Y+18	; 0x12
    32c6:	8b 89       	ldd	r24, Y+19	; 0x13
    32c8:	9c 89       	ldd	r25, Y+20	; 0x14
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	4f e7       	ldi	r20, 0x7F	; 127
    32d0:	53 e4       	ldi	r21, 0x43	; 67
    32d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32d6:	18 16       	cp	r1, r24
    32d8:	0c f0       	brlt	.+2      	; 0x32dc <lcd_send_enable_signal+0x92>
    32da:	7b c0       	rjmp	.+246    	; 0x33d2 <lcd_send_enable_signal+0x188>
	{
		_delay_ms(__us / 1000.0);
    32dc:	6d 89       	ldd	r22, Y+21	; 0x15
    32de:	7e 89       	ldd	r23, Y+22	; 0x16
    32e0:	8f 89       	ldd	r24, Y+23	; 0x17
    32e2:	98 8d       	ldd	r25, Y+24	; 0x18
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	4a e7       	ldi	r20, 0x7A	; 122
    32ea:	54 e4       	ldi	r21, 0x44	; 68
    32ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	8c 87       	std	Y+12, r24	; 0x0c
    32f6:	9d 87       	std	Y+13, r25	; 0x0d
    32f8:	ae 87       	std	Y+14, r26	; 0x0e
    32fa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    32fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    3300:	8e 85       	ldd	r24, Y+14	; 0x0e
    3302:	9f 85       	ldd	r25, Y+15	; 0x0f
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	4a ef       	ldi	r20, 0xFA	; 250
    330a:	54 e4       	ldi	r21, 0x44	; 68
    330c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	88 87       	std	Y+8, r24	; 0x08
    3316:	99 87       	std	Y+9, r25	; 0x09
    3318:	aa 87       	std	Y+10, r26	; 0x0a
    331a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    331c:	68 85       	ldd	r22, Y+8	; 0x08
    331e:	79 85       	ldd	r23, Y+9	; 0x09
    3320:	8a 85       	ldd	r24, Y+10	; 0x0a
    3322:	9b 85       	ldd	r25, Y+11	; 0x0b
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e8       	ldi	r20, 0x80	; 128
    332a:	5f e3       	ldi	r21, 0x3F	; 63
    332c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3330:	88 23       	and	r24, r24
    3332:	2c f4       	brge	.+10     	; 0x333e <lcd_send_enable_signal+0xf4>
		__ticks = 1;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	9f 83       	std	Y+7, r25	; 0x07
    333a:	8e 83       	std	Y+6, r24	; 0x06
    333c:	3f c0       	rjmp	.+126    	; 0x33bc <lcd_send_enable_signal+0x172>
	else if (__tmp > 65535)
    333e:	68 85       	ldd	r22, Y+8	; 0x08
    3340:	79 85       	ldd	r23, Y+9	; 0x09
    3342:	8a 85       	ldd	r24, Y+10	; 0x0a
    3344:	9b 85       	ldd	r25, Y+11	; 0x0b
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	3f ef       	ldi	r19, 0xFF	; 255
    334a:	4f e7       	ldi	r20, 0x7F	; 127
    334c:	57 e4       	ldi	r21, 0x47	; 71
    334e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3352:	18 16       	cp	r1, r24
    3354:	4c f5       	brge	.+82     	; 0x33a8 <lcd_send_enable_signal+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3356:	6c 85       	ldd	r22, Y+12	; 0x0c
    3358:	7d 85       	ldd	r23, Y+13	; 0x0d
    335a:	8e 85       	ldd	r24, Y+14	; 0x0e
    335c:	9f 85       	ldd	r25, Y+15	; 0x0f
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	40 e2       	ldi	r20, 0x20	; 32
    3364:	51 e4       	ldi	r21, 0x41	; 65
    3366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	bc 01       	movw	r22, r24
    3370:	cd 01       	movw	r24, r26
    3372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	9f 83       	std	Y+7, r25	; 0x07
    337c:	8e 83       	std	Y+6, r24	; 0x06
    337e:	0f c0       	rjmp	.+30     	; 0x339e <lcd_send_enable_signal+0x154>
    3380:	88 ec       	ldi	r24, 0xC8	; 200
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	9d 83       	std	Y+5, r25	; 0x05
    3386:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3388:	8c 81       	ldd	r24, Y+4	; 0x04
    338a:	9d 81       	ldd	r25, Y+5	; 0x05
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	f1 f7       	brne	.-4      	; 0x338c <lcd_send_enable_signal+0x142>
    3390:	9d 83       	std	Y+5, r25	; 0x05
    3392:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3394:	8e 81       	ldd	r24, Y+6	; 0x06
    3396:	9f 81       	ldd	r25, Y+7	; 0x07
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	9f 83       	std	Y+7, r25	; 0x07
    339c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339e:	8e 81       	ldd	r24, Y+6	; 0x06
    33a0:	9f 81       	ldd	r25, Y+7	; 0x07
    33a2:	00 97       	sbiw	r24, 0x00	; 0
    33a4:	69 f7       	brne	.-38     	; 0x3380 <lcd_send_enable_signal+0x136>
    33a6:	24 c0       	rjmp	.+72     	; 0x33f0 <lcd_send_enable_signal+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a8:	68 85       	ldd	r22, Y+8	; 0x08
    33aa:	79 85       	ldd	r23, Y+9	; 0x09
    33ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    33ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    33b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	9f 83       	std	Y+7, r25	; 0x07
    33ba:	8e 83       	std	Y+6, r24	; 0x06
    33bc:	8e 81       	ldd	r24, Y+6	; 0x06
    33be:	9f 81       	ldd	r25, Y+7	; 0x07
    33c0:	9b 83       	std	Y+3, r25	; 0x03
    33c2:	8a 83       	std	Y+2, r24	; 0x02
    33c4:	8a 81       	ldd	r24, Y+2	; 0x02
    33c6:	9b 81       	ldd	r25, Y+3	; 0x03
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	f1 f7       	brne	.-4      	; 0x33c8 <lcd_send_enable_signal+0x17e>
    33cc:	9b 83       	std	Y+3, r25	; 0x03
    33ce:	8a 83       	std	Y+2, r24	; 0x02
    33d0:	0f c0       	rjmp	.+30     	; 0x33f0 <lcd_send_enable_signal+0x1a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33d2:	69 89       	ldd	r22, Y+17	; 0x11
    33d4:	7a 89       	ldd	r23, Y+18	; 0x12
    33d6:	8b 89       	ldd	r24, Y+19	; 0x13
    33d8:	9c 89       	ldd	r25, Y+20	; 0x14
    33da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	88 8b       	std	Y+16, r24	; 0x10
    33e4:	88 89       	ldd	r24, Y+16	; 0x10
    33e6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	8a 95       	dec	r24
    33ec:	f1 f7       	brne	.-4      	; 0x33ea <lcd_send_enable_signal+0x1a0>
    33ee:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
    ret = GPIO_pin_write_logic(&(lcd_obj->E_pin), GPIO_LOW);
    33f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33f4:	01 96       	adiw	r24, 0x01	; 1
    33f6:	60 e0       	ldi	r22, 0x00	; 0
    33f8:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_pin_write_logic>
    33fc:	89 8f       	std	Y+25, r24	; 0x19
    return ret;
    33fe:	89 8d       	ldd	r24, Y+25	; 0x19
}
    3400:	6b 96       	adiw	r28, 0x1b	; 27
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	f8 94       	cli
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	cd bf       	out	0x3d, r28	; 61
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	08 95       	ret

00003412 <HAL_init>:
		.connection_status=NEGATIVE_CONNECTION ,.led_status=LED_OFF};
const led_t g_ledMotorON = {.port_name=PORT_C, .pin=GPIO_PIN3,
		.connection_status=NEGATIVE_CONNECTION ,.led_status=LED_OFF};

Std_ReturnType HAL_init(void)
{
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
	ret = lcd_4bit_initialize(&g_lcdObj_4bitMode);
    341a:	83 ed       	ldi	r24, 0xD3	; 211
    341c:	91 e0       	ldi	r25, 0x01	; 1
    341e:	0e 94 50 13 	call	0x26a0	; 0x26a0 <lcd_4bit_initialize>
    3422:	80 93 c9 01 	sts	0x01C9, r24
	ret = LED_initialize(&g_ledMotorON);
    3426:	8c ed       	ldi	r24, 0xDC	; 220
    3428:	91 e0       	ldi	r25, 0x01	; 1
    342a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <LED_initialize>
    342e:	80 93 c9 01 	sts	0x01C9, r24
	ret = LED_initialize(&g_ledMotorOFF);
    3432:	8b ed       	ldi	r24, 0xDB	; 219
    3434:	91 e0       	ldi	r25, 0x01	; 1
    3436:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <LED_initialize>
    343a:	80 93 c9 01 	sts	0x01C9, r24
	ret = dc_motor_init(&g_dcMotorObj);
    343e:	89 ed       	ldi	r24, 0xD9	; 217
    3440:	91 e0       	ldi	r25, 0x01	; 1
    3442:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <dc_motor_init>
    3446:	80 93 c9 01 	sts	0x01C9, r24
	/* display welcome message */
	ret = lcd_4bit_send_string_data(&g_lcdObj_4bitMode, "Temp. Control Fan");
    344a:	83 ed       	ldi	r24, 0xD3	; 211
    344c:	91 e0       	ldi	r25, 0x01	; 1
    344e:	20 e6       	ldi	r18, 0x60	; 96
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	b9 01       	movw	r22, r18
    3454:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <lcd_4bit_send_string_data>
    3458:	80 93 c9 01 	sts	0x01C9, r24
	ret = lcd_4bit_send_command(&g_lcdObj_4bitMode, DDRAM_START_ADDRESS+0x40);
    345c:	83 ed       	ldi	r24, 0xD3	; 211
    345e:	91 e0       	ldi	r25, 0x01	; 1
    3460:	60 ec       	ldi	r22, 0xC0	; 192
    3462:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_4bit_send_command>
    3466:	80 93 c9 01 	sts	0x01C9, r24
	ret = lcd_4bit_send_string_data(&g_lcdObj_4bitMode, "Temperature= ");
    346a:	83 ed       	ldi	r24, 0xD3	; 211
    346c:	91 e0       	ldi	r25, 0x01	; 1
    346e:	22 e7       	ldi	r18, 0x72	; 114
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	b9 01       	movw	r22, r18
    3474:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <lcd_4bit_send_string_data>
    3478:	80 93 c9 01 	sts	0x01C9, r24
	return ret;
    347c:	80 91 c9 01 	lds	r24, 0x01C9
}
    3480:	cf 91       	pop	r28
    3482:	df 91       	pop	r29
    3484:	08 95       	ret

00003486 <main>:
volatile uint8 duty_cycle = 0;	// depend on temperature
uint16 g_adcData=20;
volatile uint16 temperature = 0;
uint8 lm_sensor_str[6]={0};
int main(void)
{
    3486:	df 93       	push	r29
    3488:	cf 93       	push	r28
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
	application_initialize();
    348e:	0e 94 b0 1a 	call	0x3560	; 0x3560 <application_initialize>
	// start system with pwm = 0
	ret = timer0_pwm_duty_cycle(&g_tmr0Obj, duty_cycle);
    3492:	20 91 e0 01 	lds	r18, 0x01E0
    3496:	80 ed       	ldi	r24, 0xD0	; 208
    3498:	91 e0       	ldi	r25, 0x01	; 1
    349a:	62 2f       	mov	r22, r18
    349c:	0e 94 56 08 	call	0x10ac	; 0x10ac <timer0_pwm_duty_cycle>
    34a0:	80 93 c9 01 	sts	0x01C9, r24
	ret = timer0_pwm_start(&g_tmr0Obj);
    34a4:	80 ed       	ldi	r24, 0xD0	; 208
    34a6:	91 e0       	ldi	r25, 0x01	; 1
    34a8:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <timer0_pwm_start>
    34ac:	80 93 c9 01 	sts	0x01C9, r24
	while(1)
	{
		if(!READ_BIT(ADCSRA, ADSC))
    34b0:	e6 e2       	ldi	r30, 0x26	; 38
    34b2:	f0 e0       	ldi	r31, 0x00	; 0
    34b4:	80 81       	ld	r24, Z
    34b6:	82 95       	swap	r24
    34b8:	86 95       	lsr	r24
    34ba:	86 95       	lsr	r24
    34bc:	83 70       	andi	r24, 0x03	; 3
    34be:	88 2f       	mov	r24, r24
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	81 70       	andi	r24, 0x01	; 1
    34c4:	90 70       	andi	r25, 0x00	; 0
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	21 f4       	brne	.+8      	; 0x34d2 <main+0x4c>
		{
			ret = ADC_StartConversion();
    34ca:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <ADC_StartConversion>
    34ce:	80 93 c9 01 	sts	0x01C9, r24
		}
        /* Convert ADC read to actual degree Celsius */
        temperature = g_adcData * ((VREF)/1024.0f);
    34d2:	80 91 ca 01 	lds	r24, 0x01CA
    34d6:	90 91 cb 01 	lds	r25, 0x01CB
    34da:	cc 01       	movw	r24, r24
    34dc:	a0 e0       	ldi	r26, 0x00	; 0
    34de:	b0 e0       	ldi	r27, 0x00	; 0
    34e0:	bc 01       	movw	r22, r24
    34e2:	cd 01       	movw	r24, r26
    34e4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	bc 01       	movw	r22, r24
    34ee:	cd 01       	movw	r24, r26
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e4       	ldi	r19, 0x40	; 64
    34f4:	4c e9       	ldi	r20, 0x9C	; 156
    34f6:	50 e4       	ldi	r21, 0x40	; 64
    34f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	bc 01       	movw	r22, r24
    3502:	cd 01       	movw	r24, r26
    3504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	90 93 e2 01 	sts	0x01E2, r25
    3510:	80 93 e1 01 	sts	0x01E1, r24
        temperature = temperature / 10;
    3514:	80 91 e1 01 	lds	r24, 0x01E1
    3518:	90 91 e2 01 	lds	r25, 0x01E2
    351c:	2a e0       	ldi	r18, 0x0A	; 10
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	b9 01       	movw	r22, r18
    3522:	0e 94 29 1c 	call	0x3852	; 0x3852 <__udivmodhi4>
    3526:	cb 01       	movw	r24, r22
    3528:	90 93 e2 01 	sts	0x01E2, r25
    352c:	80 93 e1 01 	sts	0x01E1, r24
        /* Converting result from uint16 to text */
        ret = LCD_convert_short_to_string(temperature, &(lm_sensor_str[0]));
    3530:	80 91 e1 01 	lds	r24, 0x01E1
    3534:	90 91 e2 01 	lds	r25, 0x01E2
    3538:	23 ee       	ldi	r18, 0xE3	; 227
    353a:	31 e0       	ldi	r19, 0x01	; 1
    353c:	b9 01       	movw	r22, r18
    353e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <LCD_convert_short_to_string>
    3542:	80 93 c9 01 	sts	0x01C9, r24
        /* display A/D result (in text) on LCD */
        ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 2, 14, &lm_sensor_str[0]);
    3546:	83 ed       	ldi	r24, 0xD3	; 211
    3548:	91 e0       	ldi	r25, 0x01	; 1
    354a:	23 ee       	ldi	r18, 0xE3	; 227
    354c:	31 e0       	ldi	r19, 0x01	; 1
    354e:	62 e0       	ldi	r22, 0x02	; 2
    3550:	4e e0       	ldi	r20, 0x0E	; 14
    3552:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <lcd_4bit_send_string_data_pos>
    3556:	80 93 c9 01 	sts	0x01C9, r24
        define_motor_state();
    355a:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <define_motor_state>
    355e:	a8 cf       	rjmp	.-176    	; 0x34b0 <main+0x2a>

00003560 <application_initialize>:
	return 0;
}


void application_initialize(void)
{
    3560:	df 93       	push	r29
    3562:	cf 93       	push	r28
    3564:	cd b7       	in	r28, 0x3d	; 61
    3566:	de b7       	in	r29, 0x3e	; 62
	ret = HAL_init();
    3568:	0e 94 09 1a 	call	0x3412	; 0x3412 <HAL_init>
    356c:	80 93 c9 01 	sts	0x01C9, r24
	ret = MCAL_init();
    3570:	0e 94 47 11 	call	0x228e	; 0x228e <MCAL_init>
    3574:	80 93 c9 01 	sts	0x01C9, r24
	ret = dc_motor_move_right(&g_dcMotorObj);
    3578:	89 ed       	ldi	r24, 0xD9	; 217
    357a:	91 e0       	ldi	r25, 0x01	; 1
    357c:	0e 94 7e 11 	call	0x22fc	; 0x22fc <dc_motor_move_right>
    3580:	80 93 c9 01 	sts	0x01C9, r24
}
    3584:	cf 91       	pop	r28
    3586:	df 91       	pop	r29
    3588:	08 95       	ret

0000358a <ADC_callBack_notify>:


void ADC_callBack_notify(void)
{
    358a:	df 93       	push	r29
    358c:	cf 93       	push	r28
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
	ADC_readData(&g_adcData, g_adcObj.adc_resultAdjustfy);
    3592:	80 91 ce 01 	lds	r24, 0x01CE
    3596:	88 1f       	adc	r24, r24
    3598:	88 27       	eor	r24, r24
    359a:	88 1f       	adc	r24, r24
    359c:	28 2f       	mov	r18, r24
    359e:	8a ec       	ldi	r24, 0xCA	; 202
    35a0:	91 e0       	ldi	r25, 0x01	; 1
    35a2:	62 2f       	mov	r22, r18
    35a4:	0e 94 0e 10 	call	0x201c	; 0x201c <ADC_readData>
}
    35a8:	cf 91       	pop	r28
    35aa:	df 91       	pop	r29
    35ac:	08 95       	ret

000035ae <define_motor_state>:

void define_motor_state()
{
    35ae:	df 93       	push	r29
    35b0:	cf 93       	push	r28
    35b2:	00 d0       	rcall	.+0      	; 0x35b4 <define_motor_state+0x6>
    35b4:	00 d0       	rcall	.+0      	; 0x35b6 <define_motor_state+0x8>
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
	uint8 str[4]={0};
    35ba:	19 82       	std	Y+1, r1	; 0x01
    35bc:	1a 82       	std	Y+2, r1	; 0x02
    35be:	1b 82       	std	Y+3, r1	; 0x03
    35c0:	1c 82       	std	Y+4, r1	; 0x04
	if(temperature < 25)
    35c2:	80 91 e1 01 	lds	r24, 0x01E1
    35c6:	90 91 e2 01 	lds	r25, 0x01E2
    35ca:	89 31       	cpi	r24, 0x19	; 25
    35cc:	91 05       	cpc	r25, r1
    35ce:	10 f5       	brcc	.+68     	; 0x3614 <define_motor_state+0x66>
	{	 // turn motor off -> duty cycle = 0
		duty_cycle = 0;
    35d0:	10 92 e0 01 	sts	0x01E0, r1
		ret = timer0_pwm_duty_cycle(&g_tmr0Obj, duty_cycle);
    35d4:	20 91 e0 01 	lds	r18, 0x01E0
    35d8:	80 ed       	ldi	r24, 0xD0	; 208
    35da:	91 e0       	ldi	r25, 0x01	; 1
    35dc:	62 2f       	mov	r22, r18
    35de:	0e 94 56 08 	call	0x10ac	; 0x10ac <timer0_pwm_duty_cycle>
    35e2:	80 93 c9 01 	sts	0x01C9, r24
		ret = LED_turn_off(&g_ledMotorON);
    35e6:	8c ed       	ldi	r24, 0xDC	; 220
    35e8:	91 e0       	ldi	r25, 0x01	; 1
    35ea:	0e 94 ad 12 	call	0x255a	; 0x255a <LED_turn_off>
    35ee:	80 93 c9 01 	sts	0x01C9, r24
		ret = LED_turn_on(&g_ledMotorOFF);
    35f2:	8b ed       	ldi	r24, 0xDB	; 219
    35f4:	91 e0       	ldi	r25, 0x01	; 1
    35f6:	0e 94 57 12 	call	0x24ae	; 0x24ae <LED_turn_on>
    35fa:	80 93 c9 01 	sts	0x01C9, r24
		ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 3, 1, "Fan Turned OFF ");
    35fe:	83 ed       	ldi	r24, 0xD3	; 211
    3600:	91 e0       	ldi	r25, 0x01	; 1
    3602:	20 e8       	ldi	r18, 0x80	; 128
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	63 e0       	ldi	r22, 0x03	; 3
    3608:	41 e0       	ldi	r20, 0x01	; 1
    360a:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <lcd_4bit_send_string_data_pos>
    360e:	80 93 c9 01 	sts	0x01C9, r24
    3612:	0c c1       	rjmp	.+536    	; 0x382c <define_motor_state+0x27e>
	}
	else
	{
		if(temperature >= 25 && temperature < 30)
    3614:	80 91 e1 01 	lds	r24, 0x01E1
    3618:	90 91 e2 01 	lds	r25, 0x01E2
    361c:	89 31       	cpi	r24, 0x19	; 25
    361e:	91 05       	cpc	r25, r1
    3620:	d8 f1       	brcs	.+118    	; 0x3698 <define_motor_state+0xea>
    3622:	80 91 e1 01 	lds	r24, 0x01E1
    3626:	90 91 e2 01 	lds	r25, 0x01E2
    362a:	8e 31       	cpi	r24, 0x1E	; 30
    362c:	91 05       	cpc	r25, r1
    362e:	a0 f5       	brcc	.+104    	; 0x3698 <define_motor_state+0xea>
		{
			duty_cycle = 25;
    3630:	89 e1       	ldi	r24, 0x19	; 25
    3632:	80 93 e0 01 	sts	0x01E0, r24
			ret = timer0_pwm_duty_cycle(&g_tmr0Obj, duty_cycle);
    3636:	20 91 e0 01 	lds	r18, 0x01E0
    363a:	80 ed       	ldi	r24, 0xD0	; 208
    363c:	91 e0       	ldi	r25, 0x01	; 1
    363e:	62 2f       	mov	r22, r18
    3640:	0e 94 56 08 	call	0x10ac	; 0x10ac <timer0_pwm_duty_cycle>
    3644:	80 93 c9 01 	sts	0x01C9, r24
			// display fan speed on LCD
			ret = LCD_convert_byte_to_string(duty_cycle, &str[0]);
    3648:	80 91 e0 01 	lds	r24, 0x01E0
    364c:	9e 01       	movw	r18, r28
    364e:	2f 5f       	subi	r18, 0xFF	; 255
    3650:	3f 4f       	sbci	r19, 0xFF	; 255
    3652:	b9 01       	movw	r22, r18
    3654:	0e 94 18 17 	call	0x2e30	; 0x2e30 <LCD_convert_byte_to_string>
    3658:	80 93 c9 01 	sts	0x01C9, r24
			ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 3, 1, "Fan Speed= ");
    365c:	83 ed       	ldi	r24, 0xD3	; 211
    365e:	91 e0       	ldi	r25, 0x01	; 1
    3660:	20 e9       	ldi	r18, 0x90	; 144
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	63 e0       	ldi	r22, 0x03	; 3
    3666:	41 e0       	ldi	r20, 0x01	; 1
    3668:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <lcd_4bit_send_string_data_pos>
    366c:	80 93 c9 01 	sts	0x01C9, r24
			ret = lcd_4bit_send_string_data(&g_lcdObj_4bitMode, str);
    3670:	83 ed       	ldi	r24, 0xD3	; 211
    3672:	91 e0       	ldi	r25, 0x01	; 1
    3674:	9e 01       	movw	r18, r28
    3676:	2f 5f       	subi	r18, 0xFF	; 255
    3678:	3f 4f       	sbci	r19, 0xFF	; 255
    367a:	b9 01       	movw	r22, r18
    367c:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <lcd_4bit_send_string_data>
    3680:	80 93 c9 01 	sts	0x01C9, r24
			ret = lcd_4bit_send_string_data(&g_lcdObj_4bitMode, "% ");
    3684:	83 ed       	ldi	r24, 0xD3	; 211
    3686:	91 e0       	ldi	r25, 0x01	; 1
    3688:	2c e9       	ldi	r18, 0x9C	; 156
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	b9 01       	movw	r22, r18
    368e:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <lcd_4bit_send_string_data>
    3692:	80 93 c9 01 	sts	0x01C9, r24
    3696:	be c0       	rjmp	.+380    	; 0x3814 <define_motor_state+0x266>
		}
		else if(temperature >= 30 && temperature < 35)
    3698:	80 91 e1 01 	lds	r24, 0x01E1
    369c:	90 91 e2 01 	lds	r25, 0x01E2
    36a0:	8e 31       	cpi	r24, 0x1E	; 30
    36a2:	91 05       	cpc	r25, r1
    36a4:	d8 f1       	brcs	.+118    	; 0x371c <define_motor_state+0x16e>
    36a6:	80 91 e1 01 	lds	r24, 0x01E1
    36aa:	90 91 e2 01 	lds	r25, 0x01E2
    36ae:	83 32       	cpi	r24, 0x23	; 35
    36b0:	91 05       	cpc	r25, r1
    36b2:	a0 f5       	brcc	.+104    	; 0x371c <define_motor_state+0x16e>
		{
			duty_cycle = 50;
    36b4:	82 e3       	ldi	r24, 0x32	; 50
    36b6:	80 93 e0 01 	sts	0x01E0, r24
			ret = timer0_pwm_duty_cycle(&g_tmr0Obj, duty_cycle);
    36ba:	20 91 e0 01 	lds	r18, 0x01E0
    36be:	80 ed       	ldi	r24, 0xD0	; 208
    36c0:	91 e0       	ldi	r25, 0x01	; 1
    36c2:	62 2f       	mov	r22, r18
    36c4:	0e 94 56 08 	call	0x10ac	; 0x10ac <timer0_pwm_duty_cycle>
    36c8:	80 93 c9 01 	sts	0x01C9, r24
			// display fan speed on LCD
			ret = LCD_convert_byte_to_string(duty_cycle, &str[0]);
    36cc:	80 91 e0 01 	lds	r24, 0x01E0
    36d0:	9e 01       	movw	r18, r28
    36d2:	2f 5f       	subi	r18, 0xFF	; 255
    36d4:	3f 4f       	sbci	r19, 0xFF	; 255
    36d6:	b9 01       	movw	r22, r18
    36d8:	0e 94 18 17 	call	0x2e30	; 0x2e30 <LCD_convert_byte_to_string>
    36dc:	80 93 c9 01 	sts	0x01C9, r24
			ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 3, 1, "Fan Speed= ");
    36e0:	83 ed       	ldi	r24, 0xD3	; 211
    36e2:	91 e0       	ldi	r25, 0x01	; 1
    36e4:	20 e9       	ldi	r18, 0x90	; 144
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	63 e0       	ldi	r22, 0x03	; 3
    36ea:	41 e0       	ldi	r20, 0x01	; 1
    36ec:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <lcd_4bit_send_string_data_pos>
    36f0:	80 93 c9 01 	sts	0x01C9, r24
			ret = lcd_4bit_send_string_data(&g_lcdObj_4bitMode, str);
    36f4:	83 ed       	ldi	r24, 0xD3	; 211
    36f6:	91 e0       	ldi	r25, 0x01	; 1
    36f8:	9e 01       	movw	r18, r28
    36fa:	2f 5f       	subi	r18, 0xFF	; 255
    36fc:	3f 4f       	sbci	r19, 0xFF	; 255
    36fe:	b9 01       	movw	r22, r18
    3700:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <lcd_4bit_send_string_data>
    3704:	80 93 c9 01 	sts	0x01C9, r24
			ret = lcd_4bit_send_string_data(&g_lcdObj_4bitMode, "% ");
    3708:	83 ed       	ldi	r24, 0xD3	; 211
    370a:	91 e0       	ldi	r25, 0x01	; 1
    370c:	2c e9       	ldi	r18, 0x9C	; 156
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	b9 01       	movw	r22, r18
    3712:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <lcd_4bit_send_string_data>
    3716:	80 93 c9 01 	sts	0x01C9, r24
    371a:	7c c0       	rjmp	.+248    	; 0x3814 <define_motor_state+0x266>
		}
		else if(temperature >= 35 && temperature < 40)
    371c:	80 91 e1 01 	lds	r24, 0x01E1
    3720:	90 91 e2 01 	lds	r25, 0x01E2
    3724:	83 32       	cpi	r24, 0x23	; 35
    3726:	91 05       	cpc	r25, r1
    3728:	d8 f1       	brcs	.+118    	; 0x37a0 <define_motor_state+0x1f2>
    372a:	80 91 e1 01 	lds	r24, 0x01E1
    372e:	90 91 e2 01 	lds	r25, 0x01E2
    3732:	88 32       	cpi	r24, 0x28	; 40
    3734:	91 05       	cpc	r25, r1
    3736:	a0 f5       	brcc	.+104    	; 0x37a0 <define_motor_state+0x1f2>
		{
			duty_cycle = 75;
    3738:	8b e4       	ldi	r24, 0x4B	; 75
    373a:	80 93 e0 01 	sts	0x01E0, r24
			ret = timer0_pwm_duty_cycle(&g_tmr0Obj, duty_cycle);
    373e:	20 91 e0 01 	lds	r18, 0x01E0
    3742:	80 ed       	ldi	r24, 0xD0	; 208
    3744:	91 e0       	ldi	r25, 0x01	; 1
    3746:	62 2f       	mov	r22, r18
    3748:	0e 94 56 08 	call	0x10ac	; 0x10ac <timer0_pwm_duty_cycle>
    374c:	80 93 c9 01 	sts	0x01C9, r24
			// display fan speed on LCD
			ret = LCD_convert_byte_to_string(duty_cycle, &str[0]);
    3750:	80 91 e0 01 	lds	r24, 0x01E0
    3754:	9e 01       	movw	r18, r28
    3756:	2f 5f       	subi	r18, 0xFF	; 255
    3758:	3f 4f       	sbci	r19, 0xFF	; 255
    375a:	b9 01       	movw	r22, r18
    375c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <LCD_convert_byte_to_string>
    3760:	80 93 c9 01 	sts	0x01C9, r24
			ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 3, 1, "Fan Speed= ");
    3764:	83 ed       	ldi	r24, 0xD3	; 211
    3766:	91 e0       	ldi	r25, 0x01	; 1
    3768:	20 e9       	ldi	r18, 0x90	; 144
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	63 e0       	ldi	r22, 0x03	; 3
    376e:	41 e0       	ldi	r20, 0x01	; 1
    3770:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <lcd_4bit_send_string_data_pos>
    3774:	80 93 c9 01 	sts	0x01C9, r24
			ret = lcd_4bit_send_string_data(&g_lcdObj_4bitMode, str);
    3778:	83 ed       	ldi	r24, 0xD3	; 211
    377a:	91 e0       	ldi	r25, 0x01	; 1
    377c:	9e 01       	movw	r18, r28
    377e:	2f 5f       	subi	r18, 0xFF	; 255
    3780:	3f 4f       	sbci	r19, 0xFF	; 255
    3782:	b9 01       	movw	r22, r18
    3784:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <lcd_4bit_send_string_data>
    3788:	80 93 c9 01 	sts	0x01C9, r24
			ret = lcd_4bit_send_string_data(&g_lcdObj_4bitMode, "% ");
    378c:	83 ed       	ldi	r24, 0xD3	; 211
    378e:	91 e0       	ldi	r25, 0x01	; 1
    3790:	2c e9       	ldi	r18, 0x9C	; 156
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	b9 01       	movw	r22, r18
    3796:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <lcd_4bit_send_string_data>
    379a:	80 93 c9 01 	sts	0x01C9, r24
    379e:	3a c0       	rjmp	.+116    	; 0x3814 <define_motor_state+0x266>
		}
		else if(temperature >= 40)
    37a0:	80 91 e1 01 	lds	r24, 0x01E1
    37a4:	90 91 e2 01 	lds	r25, 0x01E2
    37a8:	88 32       	cpi	r24, 0x28	; 40
    37aa:	91 05       	cpc	r25, r1
    37ac:	98 f1       	brcs	.+102    	; 0x3814 <define_motor_state+0x266>
		{
			duty_cycle = 100;
    37ae:	84 e6       	ldi	r24, 0x64	; 100
    37b0:	80 93 e0 01 	sts	0x01E0, r24
			ret = timer0_pwm_duty_cycle(&g_tmr0Obj, duty_cycle);
    37b4:	20 91 e0 01 	lds	r18, 0x01E0
    37b8:	80 ed       	ldi	r24, 0xD0	; 208
    37ba:	91 e0       	ldi	r25, 0x01	; 1
    37bc:	62 2f       	mov	r22, r18
    37be:	0e 94 56 08 	call	0x10ac	; 0x10ac <timer0_pwm_duty_cycle>
    37c2:	80 93 c9 01 	sts	0x01C9, r24
			// display fan speed on LCD
			ret = LCD_convert_byte_to_string(duty_cycle, &str[0]);
    37c6:	80 91 e0 01 	lds	r24, 0x01E0
    37ca:	9e 01       	movw	r18, r28
    37cc:	2f 5f       	subi	r18, 0xFF	; 255
    37ce:	3f 4f       	sbci	r19, 0xFF	; 255
    37d0:	b9 01       	movw	r22, r18
    37d2:	0e 94 18 17 	call	0x2e30	; 0x2e30 <LCD_convert_byte_to_string>
    37d6:	80 93 c9 01 	sts	0x01C9, r24
			ret = lcd_4bit_send_string_data_pos(&g_lcdObj_4bitMode, 3, 1, "Fan Speed= ");
    37da:	83 ed       	ldi	r24, 0xD3	; 211
    37dc:	91 e0       	ldi	r25, 0x01	; 1
    37de:	20 e9       	ldi	r18, 0x90	; 144
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	63 e0       	ldi	r22, 0x03	; 3
    37e4:	41 e0       	ldi	r20, 0x01	; 1
    37e6:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <lcd_4bit_send_string_data_pos>
    37ea:	80 93 c9 01 	sts	0x01C9, r24
			ret = lcd_4bit_send_string_data(&g_lcdObj_4bitMode, str);
    37ee:	83 ed       	ldi	r24, 0xD3	; 211
    37f0:	91 e0       	ldi	r25, 0x01	; 1
    37f2:	9e 01       	movw	r18, r28
    37f4:	2f 5f       	subi	r18, 0xFF	; 255
    37f6:	3f 4f       	sbci	r19, 0xFF	; 255
    37f8:	b9 01       	movw	r22, r18
    37fa:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <lcd_4bit_send_string_data>
    37fe:	80 93 c9 01 	sts	0x01C9, r24
			ret = lcd_4bit_send_string_data(&g_lcdObj_4bitMode, "% ");
    3802:	83 ed       	ldi	r24, 0xD3	; 211
    3804:	91 e0       	ldi	r25, 0x01	; 1
    3806:	2c e9       	ldi	r18, 0x9C	; 156
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	b9 01       	movw	r22, r18
    380c:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <lcd_4bit_send_string_data>
    3810:	80 93 c9 01 	sts	0x01C9, r24
		}
		ret = LED_turn_off(&g_ledMotorOFF);
    3814:	8b ed       	ldi	r24, 0xDB	; 219
    3816:	91 e0       	ldi	r25, 0x01	; 1
    3818:	0e 94 ad 12 	call	0x255a	; 0x255a <LED_turn_off>
    381c:	80 93 c9 01 	sts	0x01C9, r24
		ret = LED_turn_on(&g_ledMotorON);
    3820:	8c ed       	ldi	r24, 0xDC	; 220
    3822:	91 e0       	ldi	r25, 0x01	; 1
    3824:	0e 94 57 12 	call	0x24ae	; 0x24ae <LED_turn_on>
    3828:	80 93 c9 01 	sts	0x01C9, r24
	}

}
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
    3834:	cf 91       	pop	r28
    3836:	df 91       	pop	r29
    3838:	08 95       	ret

0000383a <__udivmodqi4>:
    383a:	99 1b       	sub	r25, r25
    383c:	79 e0       	ldi	r23, 0x09	; 9
    383e:	04 c0       	rjmp	.+8      	; 0x3848 <__udivmodqi4_ep>

00003840 <__udivmodqi4_loop>:
    3840:	99 1f       	adc	r25, r25
    3842:	96 17       	cp	r25, r22
    3844:	08 f0       	brcs	.+2      	; 0x3848 <__udivmodqi4_ep>
    3846:	96 1b       	sub	r25, r22

00003848 <__udivmodqi4_ep>:
    3848:	88 1f       	adc	r24, r24
    384a:	7a 95       	dec	r23
    384c:	c9 f7       	brne	.-14     	; 0x3840 <__udivmodqi4_loop>
    384e:	80 95       	com	r24
    3850:	08 95       	ret

00003852 <__udivmodhi4>:
    3852:	aa 1b       	sub	r26, r26
    3854:	bb 1b       	sub	r27, r27
    3856:	51 e1       	ldi	r21, 0x11	; 17
    3858:	07 c0       	rjmp	.+14     	; 0x3868 <__udivmodhi4_ep>

0000385a <__udivmodhi4_loop>:
    385a:	aa 1f       	adc	r26, r26
    385c:	bb 1f       	adc	r27, r27
    385e:	a6 17       	cp	r26, r22
    3860:	b7 07       	cpc	r27, r23
    3862:	10 f0       	brcs	.+4      	; 0x3868 <__udivmodhi4_ep>
    3864:	a6 1b       	sub	r26, r22
    3866:	b7 0b       	sbc	r27, r23

00003868 <__udivmodhi4_ep>:
    3868:	88 1f       	adc	r24, r24
    386a:	99 1f       	adc	r25, r25
    386c:	5a 95       	dec	r21
    386e:	a9 f7       	brne	.-22     	; 0x385a <__udivmodhi4_loop>
    3870:	80 95       	com	r24
    3872:	90 95       	com	r25
    3874:	bc 01       	movw	r22, r24
    3876:	cd 01       	movw	r24, r26
    3878:	08 95       	ret

0000387a <__udivmodsi4>:
    387a:	a1 e2       	ldi	r26, 0x21	; 33
    387c:	1a 2e       	mov	r1, r26
    387e:	aa 1b       	sub	r26, r26
    3880:	bb 1b       	sub	r27, r27
    3882:	fd 01       	movw	r30, r26
    3884:	0d c0       	rjmp	.+26     	; 0x38a0 <__udivmodsi4_ep>

00003886 <__udivmodsi4_loop>:
    3886:	aa 1f       	adc	r26, r26
    3888:	bb 1f       	adc	r27, r27
    388a:	ee 1f       	adc	r30, r30
    388c:	ff 1f       	adc	r31, r31
    388e:	a2 17       	cp	r26, r18
    3890:	b3 07       	cpc	r27, r19
    3892:	e4 07       	cpc	r30, r20
    3894:	f5 07       	cpc	r31, r21
    3896:	20 f0       	brcs	.+8      	; 0x38a0 <__udivmodsi4_ep>
    3898:	a2 1b       	sub	r26, r18
    389a:	b3 0b       	sbc	r27, r19
    389c:	e4 0b       	sbc	r30, r20
    389e:	f5 0b       	sbc	r31, r21

000038a0 <__udivmodsi4_ep>:
    38a0:	66 1f       	adc	r22, r22
    38a2:	77 1f       	adc	r23, r23
    38a4:	88 1f       	adc	r24, r24
    38a6:	99 1f       	adc	r25, r25
    38a8:	1a 94       	dec	r1
    38aa:	69 f7       	brne	.-38     	; 0x3886 <__udivmodsi4_loop>
    38ac:	60 95       	com	r22
    38ae:	70 95       	com	r23
    38b0:	80 95       	com	r24
    38b2:	90 95       	com	r25
    38b4:	9b 01       	movw	r18, r22
    38b6:	ac 01       	movw	r20, r24
    38b8:	bd 01       	movw	r22, r26
    38ba:	cf 01       	movw	r24, r30
    38bc:	08 95       	ret

000038be <__prologue_saves__>:
    38be:	2f 92       	push	r2
    38c0:	3f 92       	push	r3
    38c2:	4f 92       	push	r4
    38c4:	5f 92       	push	r5
    38c6:	6f 92       	push	r6
    38c8:	7f 92       	push	r7
    38ca:	8f 92       	push	r8
    38cc:	9f 92       	push	r9
    38ce:	af 92       	push	r10
    38d0:	bf 92       	push	r11
    38d2:	cf 92       	push	r12
    38d4:	df 92       	push	r13
    38d6:	ef 92       	push	r14
    38d8:	ff 92       	push	r15
    38da:	0f 93       	push	r16
    38dc:	1f 93       	push	r17
    38de:	cf 93       	push	r28
    38e0:	df 93       	push	r29
    38e2:	cd b7       	in	r28, 0x3d	; 61
    38e4:	de b7       	in	r29, 0x3e	; 62
    38e6:	ca 1b       	sub	r28, r26
    38e8:	db 0b       	sbc	r29, r27
    38ea:	0f b6       	in	r0, 0x3f	; 63
    38ec:	f8 94       	cli
    38ee:	de bf       	out	0x3e, r29	; 62
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	cd bf       	out	0x3d, r28	; 61
    38f4:	09 94       	ijmp

000038f6 <__epilogue_restores__>:
    38f6:	2a 88       	ldd	r2, Y+18	; 0x12
    38f8:	39 88       	ldd	r3, Y+17	; 0x11
    38fa:	48 88       	ldd	r4, Y+16	; 0x10
    38fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    38fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3900:	7d 84       	ldd	r7, Y+13	; 0x0d
    3902:	8c 84       	ldd	r8, Y+12	; 0x0c
    3904:	9b 84       	ldd	r9, Y+11	; 0x0b
    3906:	aa 84       	ldd	r10, Y+10	; 0x0a
    3908:	b9 84       	ldd	r11, Y+9	; 0x09
    390a:	c8 84       	ldd	r12, Y+8	; 0x08
    390c:	df 80       	ldd	r13, Y+7	; 0x07
    390e:	ee 80       	ldd	r14, Y+6	; 0x06
    3910:	fd 80       	ldd	r15, Y+5	; 0x05
    3912:	0c 81       	ldd	r16, Y+4	; 0x04
    3914:	1b 81       	ldd	r17, Y+3	; 0x03
    3916:	aa 81       	ldd	r26, Y+2	; 0x02
    3918:	b9 81       	ldd	r27, Y+1	; 0x01
    391a:	ce 0f       	add	r28, r30
    391c:	d1 1d       	adc	r29, r1
    391e:	0f b6       	in	r0, 0x3f	; 63
    3920:	f8 94       	cli
    3922:	de bf       	out	0x3e, r29	; 62
    3924:	0f be       	out	0x3f, r0	; 63
    3926:	cd bf       	out	0x3d, r28	; 61
    3928:	ed 01       	movw	r28, r26
    392a:	08 95       	ret

0000392c <_exit>:
    392c:	f8 94       	cli

0000392e <__stop_program>:
    392e:	ff cf       	rjmp	.-2      	; 0x392e <__stop_program>
